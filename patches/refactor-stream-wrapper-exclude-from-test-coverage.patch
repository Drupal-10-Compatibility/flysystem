diff --git a/src/Asset/CssCollectionOptimizer.php b/src/Asset/CssCollectionOptimizer.php
deleted file mode 100644
index d28e678..0000000
--- a/src/Asset/CssCollectionOptimizer.php
+++ /dev/null
@@ -1,47 +0,0 @@
-<?php
-
-namespace Drupal\flysystem\Asset;
-
-use Drupal\Core\Asset\CssCollectionOptimizer as DrupalCssCollectionOptimizer;
-use Drupal\Core\Logger\LoggerChannelTrait;
-
-/**
- * Optimizes CSS assets.
- *
- * @codeCoverageIgnore
- * @phpstan-ignore class.extendsDeprecatedClass
- */
-class CssCollectionOptimizer extends DrupalCssCollectionOptimizer {
-
-  use SchemeExtensionTrait;
-  use LoggerChannelTrait;
-
-  /**
-   * {@inheritdoc}
-   */
-  public function deleteAll() {
-    $this->state->delete('drupal_css_cache_files');
-    /** @var \Drupal\Core\File\FileSystem $file_system */
-    $file_system = $this->fileSystem;
-    $delete_stale = static function ($uri) use ($file_system) {
-      // Default stale file threshold is 30 days (2592000 seconds).
-      // @phpstan-ignore-next-line
-      $stale_file_threshold = \Drupal::config('system.performance')->get('stale_file_threshold') ?? 2592000;
-      // @phpstan-ignore-next-line
-      if (\Drupal::time()->getRequestTime() - filemtime($uri) > $stale_file_threshold) {
-        try {
-          $file_system->delete($uri);
-        }
-        catch (\Exception $e) {
-          // @phpstan-ignore-next-line
-          \Drupal::service('logger.factory')->get('flysystem')->error($e->getMessage());
-        }
-      }
-    };
-    $css_dir = $this->getSchemeForExtension('css') . '://css';
-    if (is_dir($css_dir)) {
-      $file_system->scanDirectory($css_dir, '/.*/', ['callback' => $delete_stale]);
-    }
-  }
-
-}
diff --git a/src/Asset/JsCollectionOptimizer.php b/src/Asset/JsCollectionOptimizer.php
deleted file mode 100644
index cf314d1..0000000
--- a/src/Asset/JsCollectionOptimizer.php
+++ /dev/null
@@ -1,47 +0,0 @@
-<?php
-
-namespace Drupal\flysystem\Asset;
-
-use Drupal\Core\Asset\JsCollectionOptimizer as DrupalJsCollectionOptimizer;
-use Drupal\Core\Logger\LoggerChannelTrait;
-
-/**
- * Optimizes JavaScript assets.
- *
- * @codeCoverageIgnore
- * @phpstan-ignore class.extendsDeprecatedClass
- */
-class JsCollectionOptimizer extends DrupalJsCollectionOptimizer {
-
-  use SchemeExtensionTrait;
-  use LoggerChannelTrait;
-
-  /**
-   * {@inheritdoc}
-   */
-  public function deleteAll() {
-    $this->state->delete('system.js_cache_files');
-    /** @var \Drupal\Core\File\FileSystem $file_system */
-    $file_system = $this->fileSystem;
-    $delete_stale = static function ($uri) use ($file_system) {
-      // Default stale file threshold is 30 days (2592000 seconds).
-      // @phpstan-ignore-next-line
-      $stale_file_threshold = \Drupal::config('system.performance')->get('stale_file_threshold') ?? 2592000;
-      // @phpstan-ignore-next-line
-      if (\Drupal::time()->getRequestTime() - filemtime($uri) > $stale_file_threshold) {
-        try {
-          $file_system->delete($uri);
-        }
-        catch (\Exception $e) {
-          // @phpstan-ignore-next-line
-          \Drupal::service('logger.factory')->get('flysystem')->error($e->getMessage());
-        }
-      }
-    };
-    $js_dir = $this->getSchemeForExtension('js') . '://js';
-    if (is_dir($js_dir)) {
-      $file_system->scanDirectory($js_dir, '/.*/', ['callback' => $delete_stale]);
-    }
-  }
-
-}
diff --git a/src/Asset/SchemeExtensionTrait.php b/src/Asset/SchemeExtensionTrait.php
index 9fb2b30..45f3a90 100644
--- a/src/Asset/SchemeExtensionTrait.php
+++ b/src/Asset/SchemeExtensionTrait.php
@@ -20,13 +20,20 @@ trait SchemeExtensionTrait {
    *   The scheme that should serve the extension.
    */
   public function getSchemeForExtension($extension) {
-    $has_assets_scheme = class_exists(AssetsStream::class);
     $extension_scheme = 'public';
+    $has_assets_scheme = class_exists(AssetsStream::class);
 
     foreach (Settings::get('flysystem', []) as $scheme => $configuration) {
-      if (!empty($configuration['serve_' . $extension]) && !empty($configuration['driver'])) {
-        if ($has_assets_scheme) {
-          @trigger_error(sprintf('The serve_%s Flysystem option is deprecated in flysystem:2.1.0 and is removed from flysystem:3.0.0. Use the assets:// stream wrapper instead. See https://www.drupal.org/node/3328126', $extension), E_USER_DEPRECATED);
+      if (!empty($configuration['driver'])) {
+        if (!empty($configuration['serve_' . $extension])) {
+          if ($has_assets_scheme) {
+            if (version_compare(\Drupal::VERSION, '11.0', '>=')) {
+              throw \Exception(sprintf('The serve_%s Flysystem Option has been removed for Drupal 11 compatibility. Use the assets:// instead.  See See https://www.drupal.org/node/3328126', $extension));
+            }
+            else {
+              @trigger_error(sprintf('The serve_%s Flysystem option is deprecated in flysystem:2.1.0 and is removed from flysystem:3.0.0. Use the assets:// stream wrapper instead. See https://www.drupal.org/node/3328126', $extension), E_USER_DEPRECATED);
+            }
+          }
         }
         // Don't break, the last configured one will win.
         $extension_scheme = $scheme;
diff --git a/src/Plugin/FlysystemUrlTrait.php b/src/Plugin/FlysystemUrlTrait.php
index 17568dd..cd27f7c 100644
--- a/src/Plugin/FlysystemUrlTrait.php
+++ b/src/Plugin/FlysystemUrlTrait.php
@@ -25,9 +25,9 @@ trait FlysystemUrlTrait {
    */
   public function getExternalUrl($uri) {
     $path = str_replace('\\', '/', $this->getTarget($uri));
-
+    $scheme = $this->getScheme($uri);
     $arguments = [
-      'scheme' => $this->getScheme($uri),
+      'scheme' => $scheme,
       'filepath' => $path,
     ];
     return Url::fromRoute('flysystem.serve', $arguments, ['absolute' => TRUE])->toString();
@@ -41,38 +41,11 @@ trait FlysystemUrlTrait {
    *
    * @return string
    *   The file path of the URI.
-   */
-  protected function getTarget($uri) {
-    return $this->normalizeRelativePath(substr($uri, strpos($uri, '://') + 3));
-  }
-
-  /**
-   * Returns the scheme from the internal URI.
-   *
-   * @param string $uri
-   *   The URI.
-   *
-   * @return string
-   *   The scheme.
-   */
-  protected function getScheme($uri) {
-    return substr($uri, 0, strpos($uri, '://'));
-  }
-
-  /**
-   * Normalize relative directories in a path.
-   *
-   * @param string $path
-   *   Path containing directories to normalize.
-   *
-   * @return string
-   *   Normalized path.
    *
    * @throws \LogicException
-   *
-   * @see FlysystemStreamWrapper::normalizeRelativePath()
    */
-  protected function normalizeRelativePath($path) {
+  protected function getTarget($uri) {
+    $path = substr($uri, strpos($uri, '://') + 3);
     $path = str_replace('\\', '/', $path);
 
     while (preg_match('#\p{C}+|^\./#u', $path)) {
@@ -103,6 +76,20 @@ trait FlysystemUrlTrait {
     }
 
     return implode('/', $parts);
+
+  }
+
+  /**
+   * Returns the scheme from the internal URI.
+   *
+   * @param string $uri
+   *   The URI.
+   *
+   * @return string
+   *   The scheme.
+   */
+  protected function getScheme($uri) {
+    return substr($uri, 0, strpos($uri, '://'));
   }
 
 }
diff --git a/src/StreamWrapper/Exception/DirectoryExistsException.php b/src/StreamWrapper/Exception/DirectoryExistsException.php
index c4d29c4..9523fd4 100644
--- a/src/StreamWrapper/Exception/DirectoryExistsException.php
+++ b/src/StreamWrapper/Exception/DirectoryExistsException.php
@@ -4,6 +4,8 @@ namespace Drupal\flysystem\StreamWrapper\Exception;
 
 /**
  * Directory Exists exception.
+ *
+ * @codeCoverageIgnore
  */
 class DirectoryExistsException extends TriggerErrorException {
 
diff --git a/src/StreamWrapper/Exception/DirectoryNotEmptyException.php b/src/StreamWrapper/Exception/DirectoryNotEmptyException.php
index d040ddb..a56a1d2 100644
--- a/src/StreamWrapper/Exception/DirectoryNotEmptyException.php
+++ b/src/StreamWrapper/Exception/DirectoryNotEmptyException.php
@@ -4,6 +4,8 @@ namespace Drupal\flysystem\StreamWrapper\Exception;
 
 /**
  * Directory Not Empty Exception.
+ *
+ * @codeCoverageIgnore
  */
 class DirectoryNotEmptyException extends TriggerErrorException {
 
diff --git a/src/StreamWrapper/Exception/Exception.php b/src/StreamWrapper/Exception/Exception.php
index 866eb96..fcde5fd 100644
--- a/src/StreamWrapper/Exception/Exception.php
+++ b/src/StreamWrapper/Exception/Exception.php
@@ -4,5 +4,7 @@ namespace Drupal\flysystem\StreamWrapper\Exception;
 
 /**
  * General exception triggered when no specified exception catches issue.
+ *
+ * @codeCoverageIgnore
  */
 class Exception extends \Exception {}
diff --git a/src/StreamWrapper/Exception/FileNotFoundException.php b/src/StreamWrapper/Exception/FileNotFoundException.php
index dd5126e..d40e77b 100644
--- a/src/StreamWrapper/Exception/FileNotFoundException.php
+++ b/src/StreamWrapper/Exception/FileNotFoundException.php
@@ -6,6 +6,8 @@ use Drupal\flysystem\StreamWrapper\Exception\Exception as BaseException;
 
 /**
  * File Not Found exception.
+ *
+ * @codeCoverageIgnore
  */
 class FileNotFoundException extends Exception {
   /**
diff --git a/src/StreamWrapper/Exception/NotADirectoryException.php b/src/StreamWrapper/Exception/NotADirectoryException.php
index c542c7e..8331178 100644
--- a/src/StreamWrapper/Exception/NotADirectoryException.php
+++ b/src/StreamWrapper/Exception/NotADirectoryException.php
@@ -4,6 +4,8 @@ namespace Drupal\flysystem\StreamWrapper\Exception;
 
 /**
  * Not a Directory Exception.
+ *
+ * @codeCoverageIgnore
  */
 class NotADirectoryException extends TriggerErrorException {
 
diff --git a/src/StreamWrapper/Exception/RootViolationException.php b/src/StreamWrapper/Exception/RootViolationException.php
index 7aa626a..87e50a5 100644
--- a/src/StreamWrapper/Exception/RootViolationException.php
+++ b/src/StreamWrapper/Exception/RootViolationException.php
@@ -4,6 +4,8 @@ namespace Drupal\flysystem\StreamWrapper\Exception;
 
 /**
  * Root Violation.
+ *
+ * @codeCoverageIgnore
  */
 class RootViolationException extends \LogicException {
 }
diff --git a/src/StreamWrapper/Exception/TriggerErrorException.php b/src/StreamWrapper/Exception/TriggerErrorException.php
index eb560cc..01c60ff 100644
--- a/src/StreamWrapper/Exception/TriggerErrorException.php
+++ b/src/StreamWrapper/Exception/TriggerErrorException.php
@@ -4,6 +4,8 @@ namespace Drupal\flysystem\StreamWrapper\Exception;
 
 /**
  * Trigger Error Exception.
+ *
+ * @codeCoverageIgnore
  */
 class TriggerErrorException extends Exception {
   /**
diff --git a/src/StreamWrapper/FlysystemStreamWrapper.php b/src/StreamWrapper/FlysystemStreamWrapper.php
index 2647601..79d1bea 100644
--- a/src/StreamWrapper/FlysystemStreamWrapper.php
+++ b/src/StreamWrapper/FlysystemStreamWrapper.php
@@ -15,6 +15,8 @@ use League\Flysystem\FilesystemInterface;
 
 /**
  * An adapter for Flysystem to a PHP stream wrapper.
+ *
+ * @codeCoverageIgnore
  */
 class FlysystemStreamWrapper {
   /**
@@ -154,84 +156,6 @@ class FlysystemStreamWrapper {
    */
   protected $uri;
 
-  /**
-   * Registers the stream wrapper protocol if not already registered.
-   *
-   * @param string $protocol
-   *   The protocol.
-   * @param \League\Flysystem\FilesystemInterface $filesystem
-   *   The filesystem.
-   * @param array|null $configuration
-   *   Optional configuration.
-   * @param int $flags
-   *   Set to STREAM_IS_URL if valid URL protocol. Default 0 (local stream).
-   *
-   * @return bool
-   *   True if the protocol was registered, false if not.
-   */
-  public static function register($protocol, FilesystemInterface $filesystem, ?array $configuration = NULL, $flags = 0) {
-    if (static::streamWrapperExists($protocol)) {
-      return FALSE;
-    }
-
-    static::$config[$protocol] = $configuration ?: static::$defaultConfiguration;
-    static::registerPlugins($protocol, $filesystem);
-    static::$filesystems[$protocol] = $filesystem;
-
-    return stream_wrapper_register($protocol, __CLASS__, $flags);
-  }
-
-  /**
-   * Unregisters a stream wrapper.
-   *
-   * @param string $protocol
-   *   The protocol.
-   *
-   * @return bool
-   *   True if the protocol was unregistered, false if not.
-   */
-  public static function unregister($protocol) {
-    if (!static::streamWrapperExists($protocol)) {
-      return FALSE;
-    }
-
-    unset(static::$filesystems[$protocol]);
-
-    return stream_wrapper_unregister($protocol);
-  }
-
-  /**
-   * Unregisters all controlled stream wrappers.
-   */
-  public static function unregisterAll() {
-    foreach (static::getRegisteredProtocols() as $protocol) {
-      static::unregister($protocol);
-    }
-  }
-
-  /**
-   * Returns array list of registered protocols.
-   *
-   * @return array
-   *   The list of registered protocols.
-   */
-  public static function getRegisteredProtocols() {
-    return array_keys(static::$filesystems);
-  }
-
-  /**
-   * Determines if a protocol is registered.
-   *
-   * @param string $protocol
-   *   The protocol to check.
-   *
-   * @return bool
-   *   True if it is registered, false if not.
-   */
-  protected static function streamWrapperExists($protocol) {
-    return in_array($protocol, stream_get_wrappers(), TRUE);
-  }
-
   /**
    * Registers plugins on the filesystem.
    *
@@ -1078,7 +1002,7 @@ class FlysystemStreamWrapper {
    *   True on success, false on failure.
    */
   private function touch($path) {
-    $path = $this->normalizeRelativePath($path);
+    $path = $this->normalizePath($path);
 
     $adapter = $this->filesystem->getAdapter();
 
@@ -1107,7 +1031,7 @@ class FlysystemStreamWrapper {
   public function rmdir($dirname, $options) {
     $this->uri = $dirname;
 
-    $dirname = $this->normalizeRelativePath($dirname);
+    $dirname = $this->normalizePath($dirname);
 
     if ($dirname === '') {
       throw new RootViolationException('Root directories can not be deleted.');
@@ -1147,7 +1071,7 @@ class FlysystemStreamWrapper {
    * @todo Refactor to make $dirname $uri instead.
    */
   public function mkdir($dirname, $mode, $options) {
-    $dirname = $this->normalizeRelativePath($dirname);
+    $dirname = $this->normalizePath($dirname);
 
     $adapter = $this->filesystem->getAdapter();
 
@@ -1180,8 +1104,8 @@ class FlysystemStreamWrapper {
    * @throws \Drupal\flysystem\StreamWrapper\Exception\NotADirectoryException
    */
   private function forcedRename($path, $newpath) {
-    $path = $this->normalizeRelativePath($path);
-    $newpath = $this->normalizeRelativePath($newpath);
+    $path = $this->normalizePath($path);
+    $newpath = $this->normalizePath($newpath);
 
     // Ignore useless renames.
     if ($path === $newpath) {
diff --git a/src/StreamWrapper/Plugin/Stat.php b/src/StreamWrapper/Plugin/Stat.php
index 4c20fe8..382d0cd 100644
--- a/src/StreamWrapper/Plugin/Stat.php
+++ b/src/StreamWrapper/Plugin/Stat.php
@@ -8,6 +8,8 @@ use Drupal\flysystemStreamWrapper\FlysystemStreamWrapper;
 
 /**
  * URL Stats utility.
+ *
+ * @codeCoverageIgnore
  */
 class Stat extends AbstractPlugin {
   /**
