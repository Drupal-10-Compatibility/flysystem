diff --git a/src/Asset/AssetDumper.php b/src/Asset/AssetDumper.php
index 8cb8294..1120f76 100644
--- a/src/Asset/AssetDumper.php
+++ b/src/Asset/AssetDumper.php
@@ -5,6 +5,7 @@ namespace Drupal\flysystem\Asset;
 use Drupal\Component\Utility\Crypt;
 use Drupal\Core\Asset\AssetDumper as DrupalAssetDumper;
 use Drupal\Core\File\FileSystemInterface;
+use Drupal\Core\File\FileExists;
 
 /**
  * Flysystem dependency injection container.
@@ -27,7 +28,7 @@ class AssetDumper extends DrupalAssetDumper {
     $uri = $path . '/' . $filename;
     // Create the CSS or JS file.
     $this->fileSystem->prepareDirectory($path, FileSystemInterface::CREATE_DIRECTORY);
-    if (!file_exists($uri) && !$this->fileSystem->saveData($data, $uri, FileSystemInterface::EXISTS_REPLACE)) {
+    if (!file_exists($uri) && !$this->fileSystem->saveData($data, $uri, FileExists::Replace)) {
       return FALSE;
     }
     // If CSS/JS gzip compression is enabled and the zlib extension is available
@@ -38,8 +39,8 @@ class AssetDumper extends DrupalAssetDumper {
     // file) in generating the file anyway. Sites on servers where rewrite rules
     // aren't working can set css.gzip to FALSE in order to skip
     // generating a file that won't be used.
-    if (extension_loaded('zlib') && \Drupal::config('system.performance')->get($file_extension . '.gzip')) {
-      if (!file_exists($uri . '.gz') && !$this->fileSystem->saveData(gzencode($data, 9, FORCE_GZIP), $uri . '.gz', FileSystemInterface::EXISTS_REPLACE)) {
+    if (extension_loaded('zlib') && \Drupal::config('system.performance')->get($file_extension . '.gzip')) { // @phpstan-ignore-line
+      if (!file_exists($uri . '.gz') && !$this->fileSystem->saveData(gzencode($data, 9, FORCE_GZIP), $uri . '.gz', FileExists::Replace)) {
         return FALSE;
       }
     }
diff --git a/src/Asset/CssCollectionOptimizer.php b/src/Asset/CssCollectionOptimizer.php
index 4ab1679..08b75d4 100644
--- a/src/Asset/CssCollectionOptimizer.php
+++ b/src/Asset/CssCollectionOptimizer.php
@@ -8,7 +8,7 @@ use Drupal\Core\Logger\LoggerChannelTrait;
 /**
  * Optimizes CSS assets.
  */
-class CssCollectionOptimizer extends DrupalCssCollectionOptimizer {
+class CssCollectionOptimizer extends DrupalCssCollectionOptimizer { // @phpstan-ignore-line
 
   use SchemeExtensionTrait;
   use LoggerChannelTrait;
@@ -22,13 +22,13 @@ class CssCollectionOptimizer extends DrupalCssCollectionOptimizer {
     $file_system = $this->fileSystem;
     $delete_stale = static function ($uri) use ($file_system) {
       // Default stale file threshold is 30 days (2592000 seconds).
-      $stale_file_threshold = \Drupal::config('system.performance')->get('stale_file_threshold') ?? 2592000;
-      if (\Drupal::time()->getRequestTime() - filemtime($uri) > $stale_file_threshold) {
+      $stale_file_threshold = \Drupal::config('system.performance')->get('stale_file_threshold') ?? 2592000; // @phpstan-ignore-line
+      if (\Drupal::time()->getRequestTime() - filemtime($uri) > $stale_file_threshold) { // @phpstan-ignore-line
         try {
           $file_system->delete($uri);
         }
         catch (\Exception $e) {
-          \Drupal::service('logger.factory')->get('flysystem')->error($e->getMessage());
+          \Drupal::service('logger.factory')->get('flysystem')->error($e->getMessage()); // @phpstan-ignore-line
         }
       }
     };
diff --git a/src/Asset/CssCollectionOptimizerLazy.php b/src/Asset/CssCollectionOptimizerLazy.php
index 2e1bfff..d6d4a4c 100644
--- a/src/Asset/CssCollectionOptimizerLazy.php
+++ b/src/Asset/CssCollectionOptimizerLazy.php
@@ -20,7 +20,7 @@ class CssCollectionOptimizerLazy extends DrupalCssCollectionOptimizerLazy {
       $this->fileSystem->deleteRecursive($this->getSchemeForExtension('css') . '://css');
     }
     catch (FileException $fileException) {
-      \Drupal::logger('flysystem')->error($fileException->getMessage());
+      \Drupal::logger('flysystem')->error($fileException->getMessage()); // @phpstan-ignore-line
     }
   }
 
diff --git a/src/Asset/JsCollectionOptimizer.php b/src/Asset/JsCollectionOptimizer.php
index ca61254..6374609 100644
--- a/src/Asset/JsCollectionOptimizer.php
+++ b/src/Asset/JsCollectionOptimizer.php
@@ -8,7 +8,7 @@ use Drupal\Core\Logger\LoggerChannelTrait;
 /**
  * Optimizes JavaScript assets.
  */
-class JsCollectionOptimizer extends DrupalJsCollectionOptimizer {
+class JsCollectionOptimizer extends DrupalJsCollectionOptimizer { // @phpstan-ignore-line
 
   use SchemeExtensionTrait;
   use LoggerChannelTrait;
@@ -22,13 +22,13 @@ class JsCollectionOptimizer extends DrupalJsCollectionOptimizer {
     $file_system = $this->fileSystem;
     $delete_stale = static function ($uri) use ($file_system) {
       // Default stale file threshold is 30 days (2592000 seconds).
-      $stale_file_threshold = \Drupal::config('system.performance')->get('stale_file_threshold') ?? 2592000;
-      if (\Drupal::time()->getRequestTime() - filemtime($uri) > $stale_file_threshold) {
+      $stale_file_threshold = \Drupal::config('system.performance')->get('stale_file_threshold') ?? 2592000; // @phpstan-ignore-line
+      if (\Drupal::time()->getRequestTime() - filemtime($uri) > $stale_file_threshold) { // @phpstan-ignore-line
         try {
           $file_system->delete($uri);
         }
         catch (\Exception $e) {
-          \Drupal::service('logger.factory')->get('flysystem')->error($e->getMessage());
+          \Drupal::service('logger.factory')->get('flysystem')->error($e->getMessage()); // @phpstan-ignore-line
         }
       }
     };
diff --git a/src/Asset/JsCollectionOptimizerLazy.php b/src/Asset/JsCollectionOptimizerLazy.php
index 385e626..64ee567 100644
--- a/src/Asset/JsCollectionOptimizerLazy.php
+++ b/src/Asset/JsCollectionOptimizerLazy.php
@@ -20,7 +20,7 @@ class JsCollectionOptimizerLazy extends DrupalJsCollectionOptimizerLazy {
       $this->fileSystem->deleteRecursive($this->getSchemeForExtension('js') . '://js');
     }
     catch (FileException $fileException) {
-      \Drupal::logger('flysystem')->error($fileException->getMessage());
+      \Drupal::logger('flysystem')->error($fileException->getMessage()); // @phpstan-ignore-line
     }
   }
 
diff --git a/tests/src/Unit/FlysystemServiceProviderTest.php b/tests/src/Unit/FlysystemServiceProviderTest.php
index 02a16a0..0c438f6 100644
--- a/tests/src/Unit/FlysystemServiceProviderTest.php
+++ b/tests/src/Unit/FlysystemServiceProviderTest.php
@@ -97,10 +97,10 @@ class FlysystemServiceProviderTest extends UnitTestCase {
     (new FlysystemServiceProvider())->register($this->container);
     $this->assertSame(AssetDumper::class, $this->container->getDefinition('asset.js.dumper')->getClass());
 
-    $this->container->register('asset.js.collection_optimizer', JsCollectionOptimizer::class);
+    $this->container->register('asset.js.collection_optimizer', JsCollectionOptimizer::class); // @phpstan-ignore-line
     (new FlysystemServiceProvider())->register($this->container);
     $this->assertSame(AssetDumper::class, $this->container->getDefinition('asset.js.dumper')->getClass());
-    $this->assertSame(JsCollectionOptimizer::class, $this->container->getDefinition('asset.js.collection_optimizer')->getClass());
+    $this->assertSame(JsCollectionOptimizer::class, $this->container->getDefinition('asset.js.collection_optimizer') ->getClass()); // @phpstan-ignore-line
 
     // A successful swap.
     new Settings([
@@ -122,7 +122,7 @@ class FlysystemServiceProviderTest extends UnitTestCase {
   public function testSwappingCssServices() {
     // Test swapping the asset dumper.
     $this->container->register('asset.css.dumper', AssetDumper::class);
-    $this->container->register('asset.css.collection_optimizer', CssCollectionOptimizer::class);
+    $this->container->register('asset.css.collection_optimizer', CssCollectionOptimizer::class); // @phpstan-ignore-line
     $this->container->register('asset.css.optimizer', CssOptimizer::class);
 
     new Settings([
