diff --git a/composer.json b/composer.json
index 122738c..bca0e4c 100644
--- a/composer.json
+++ b/composer.json
@@ -2,9 +2,16 @@
   "name": "drupal/flysystem",
   "type": "drupal-module",
   "require": {
-    "php": ">=8.1",
-    "league/mime-type-detection": "^1.11"
+    "league/flysystem": "^1.0.3",
+    "league/flysystem-replicate-adapter": "~1.0",
+    "twistor/flysystem-stream-wrapper": "^1.0.5",
+    "php": ">=8.1"
   },
+
+  "require-dev": {
+    "league/flysystem-memory": "~1.0"
+  },
+
   "autoload": {
     "psr-4": {
       "Drupal\\flysystem\\": "src/"
diff --git a/flysystem.install b/flysystem.install
index a0f6335..b507919 100644
--- a/flysystem.install
+++ b/flysystem.install
@@ -56,9 +56,9 @@ function __flysystem_validate_schemes(array &$requirements) {
  */
 function __flysystem_check_dependencies(array &$requirements) {
   $dependencies = [
-    'Drupal\flysystem\Ported\Flysystem\Filesystem' => \Drupal::translation()->translate('Flysystem'),
-    'Drupal\flysystem\Ported\Replicate\ReplicateAdapter' => \Drupal::translation()->translate('replicate adapter'),
-    'Drupal\flysystem\FlysystemStreamWrapper' => \Drupal::translation()->translate('stream wrapper'),
+    'League\Flysystem\Filesystem' => \Drupal::translation()->translate('Flysystem'),
+    'League\Flysystem\Replicate\ReplicateAdapter' => \Drupal::translation()->translate('replicate adapter'),
+    'Twistor\FlysystemStreamWrapper' => \Drupal::translation()->translate('stream wrapper'),
   ];
 
   $missing = array_filter(array_map(function ($dependency) use ($dependencies) {
diff --git a/src/Asset/CssCollectionOptimizer.php b/src/Asset/CssCollectionOptimizer.php
index 4ab1679..0f2296a 100644
--- a/src/Asset/CssCollectionOptimizer.php
+++ b/src/Asset/CssCollectionOptimizer.php
@@ -28,7 +28,7 @@ class CssCollectionOptimizer extends DrupalCssCollectionOptimizer {
           $file_system->delete($uri);
         }
         catch (\Exception $e) {
-          \Drupal::service('logger.factory')->get('flysystem')->error($e->getMessage());
+          $this->getLogger('flysystem')->error($e->getMessage());
         }
       }
     };
diff --git a/src/Asset/JsCollectionOptimizer.php b/src/Asset/JsCollectionOptimizer.php
index ca61254..6216288 100644
--- a/src/Asset/JsCollectionOptimizer.php
+++ b/src/Asset/JsCollectionOptimizer.php
@@ -28,7 +28,7 @@ class JsCollectionOptimizer extends DrupalJsCollectionOptimizer {
           $file_system->delete($uri);
         }
         catch (\Exception $e) {
-          \Drupal::service('logger.factory')->get('flysystem')->error($e->getMessage());
+          $this->getLogger('flysystem')->error($e->getMessage());
         }
       }
     };
diff --git a/src/EventSubscriber/EnsureSubscriber.php b/src/EventSubscriber/EnsureSubscriber.php
index aef0402..e397d29 100644
--- a/src/EventSubscriber/EnsureSubscriber.php
+++ b/src/EventSubscriber/EnsureSubscriber.php
@@ -24,7 +24,7 @@ class EnsureSubscriber implements EventSubscriberInterface {
   /**
    * {@inheritdoc}
    */
-  public static function getSubscribedEvents(): array {
+  public static function getSubscribedEvents() {
     $events = [];
 
     $events[FlysystemEvents::ENSURE][] = 'onEnsure';
diff --git a/src/Exception/DirectoryExistsException.php b/src/Exception/DirectoryExistsException.php
deleted file mode 100644
index 953e605..0000000
--- a/src/Exception/DirectoryExistsException.php
+++ /dev/null
@@ -1,12 +0,0 @@
-<?php
-
-namespace Drupal\flysystem\Exception;
-
-/**
- * Ported from twistor/flysystem-stream-wrapper.
- * @see https://raw.githubusercontent.com/twistor/flysystem-stream-wrapper/master/src/Flysystem/Exception/DirectoryExistsException.php.
- */
-class DirectoryExistsException extends TriggerErrorException
-{
-    protected $defaultMessage = '%s(): Is a directory';
-}
\ No newline at end of file
diff --git a/src/Exception/DirectoryNotEmptyException.php b/src/Exception/DirectoryNotEmptyException.php
deleted file mode 100644
index adead64..0000000
--- a/src/Exception/DirectoryNotEmptyException.php
+++ /dev/null
@@ -1,12 +0,0 @@
-<?php
-
-namespace Drupal\flysystem\Exception;
-
-/**
- * Ported from twistor/flysystem-stream-wrapper.
- * @see https://raw.githubusercontent.com/twistor/flysystem-stream-wrapper/master/src/Flysystem/Exception/DirectoryNotEmptyException.php.
- */
-class DirectoryNotEmptyException extends TriggerErrorException
-{
-    protected $defaultMessage = '%s(): Directory not empty';
-}
\ No newline at end of file
diff --git a/src/Exception/NotADirectoryException.php b/src/Exception/NotADirectoryException.php
deleted file mode 100644
index 94696c4..0000000
--- a/src/Exception/NotADirectoryException.php
+++ /dev/null
@@ -1,12 +0,0 @@
-<?php
-
-namespace Drupal\flysystem\Exception;
-
-/**
- * Ported from twistor/flysystem-stream-wrapper.
- * @see https://raw.githubusercontent.com/twistor/flysystem-stream-wrapper/master/src/Flysystem/Exception/NotADirectoryException.php.
- */
-class NotADirectoryException extends TriggerErrorException
-{
-    protected $defaultMessage = '%s(): Not a directory';
-}
\ No newline at end of file
diff --git a/src/Exception/TriggerErrorException.php b/src/Exception/TriggerErrorException.php
deleted file mode 100644
index e3ff3ea..0000000
--- a/src/Exception/TriggerErrorException.php
+++ /dev/null
@@ -1,19 +0,0 @@
-<?php
-
-namespace Drupal\flysystem\Exception;
-
-use Drupal\flysystem\Ported\Flysystem\Exception;
-
-/**
- * Ported from twistor/flysystem-stream-wrapper.
- * @see https://github.com/twistor/flysystem-stream-wrapper/blob/master/src/Flysystem/Exception/TriggerErrorException.php.
- */
-class TriggerErrorException extends Exception
-{
-    protected $defaultMessage;
-
-    public function formatMessage($function)
-    {
-        return sprintf($this->message ? $this->message : $this->defaultMessage, $function);
-    }
-}
\ No newline at end of file
diff --git a/src/Flysystem/Adapter/DrupalCacheAdapter.php b/src/Flysystem/Adapter/DrupalCacheAdapter.php
index 5b61763..3f2a05f 100644
--- a/src/Flysystem/Adapter/DrupalCacheAdapter.php
+++ b/src/Flysystem/Adapter/DrupalCacheAdapter.php
@@ -2,9 +2,8 @@
 
 namespace Drupal\flysystem\Flysystem\Adapter;
 
-use Drupal\flysystem\Ported\Flysystem\AdapterInterface;
-use Drupal\flysystem\Ported\Flysystem\Cache;
-use Drupal\flysystem\Ported\Flysystem\Config;
+use League\Flysystem\AdapterInterface;
+use League\Flysystem\Config;
 
 /**
  * A Flysystem adapter implementing caching with Drupal's Cache API.
@@ -14,7 +13,7 @@ class DrupalCacheAdapter implements AdapterInterface {
   /**
    * The Flysystem adapter to cache data for.
    *
-   * @var \Drupal\flysystem\Ported\Flysystem\AdapterInterface
+   * @var \League\Flysystem\AdapterInterface
    */
   protected $adapter;
 
@@ -37,7 +36,7 @@ class DrupalCacheAdapter implements AdapterInterface {
    *
    * @param string $scheme
    *   The scheme of the stream wrapper used for this adapter.
-   * @param \Drupal\flysystem\Ported\Flysystem\AdapterInterface $adapter
+   * @param \League\Flysystem\AdapterInterface $adapter
    *   The flysystem adapter to cache data for.
    * @param \Drupal\flysystem\Flysystem\Adapter\CacheItemBackend $cacheItemBackend
    *   The cache backend to store data in.
diff --git a/src/Flysystem/Adapter/MissingAdapter.php b/src/Flysystem/Adapter/MissingAdapter.php
index e89096d..0ae9323 100644
--- a/src/Flysystem/Adapter/MissingAdapter.php
+++ b/src/Flysystem/Adapter/MissingAdapter.php
@@ -2,8 +2,8 @@
 
 namespace Drupal\flysystem\Flysystem\Adapter;
 
-use Drupal\flysystem\Ported\Flysystem\AdapterInterface;
-use Drupal\flysystem\Ported\Flysystem\Config;
+use League\Flysystem\AdapterInterface;
+use League\Flysystem\Config;
 
 /**
  * An adapter used when a plugin is missing. It fails at everything.
diff --git a/src/Flysystem/Ftp.php b/src/Flysystem/Ftp.php
index 97cb268..b09427d 100644
--- a/src/Flysystem/Ftp.php
+++ b/src/Flysystem/Ftp.php
@@ -6,7 +6,7 @@ use Drupal\Core\Logger\RfcLogLevel;
 use Drupal\flysystem\Flysystem\Adapter\MissingAdapter;
 use Drupal\flysystem\Plugin\FlysystemPluginInterface;
 use Drupal\flysystem\Plugin\FlysystemUrlTrait;
-use Drupal\flysystem\Ported\Flysystem\Adapter\Ftp as FtpAdapter;
+use League\Flysystem\Adapter\Ftp as FtpAdapter;
 
 /**
  * Drupal plugin for the "FTP" Flysystem adapter.
diff --git a/src/Flysystem/Local.php b/src/Flysystem/Local.php
index 29b5203..840c3db 100644
--- a/src/Flysystem/Local.php
+++ b/src/Flysystem/Local.php
@@ -10,7 +10,7 @@ use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\flysystem\Flysystem\Adapter\MissingAdapter;
 use Drupal\flysystem\Plugin\FlysystemPluginInterface;
 use Drupal\flysystem\Plugin\FlysystemUrlTrait;
-use Drupal\flysystem\Ported\Flysystem\Adapter\Local as LocalAdapter;
+use League\Flysystem\Adapter\Local as LocalAdapter;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 
 /**
diff --git a/src/FlysystemBridge.php b/src/FlysystemBridge.php
index 3a0c55a..998c37d 100644
--- a/src/FlysystemBridge.php
+++ b/src/FlysystemBridge.php
@@ -4,8 +4,8 @@ namespace Drupal\flysystem;
 
 use Drupal\Core\StreamWrapper\StreamWrapperInterface;
 use Drupal\Core\StringTranslation\StringTranslationTrait;
-use Drupal\flysystem\Ported\Flysystem\Util;
-use Drupal\flysystem\FlysystemStreamWrapper;
+use League\Flysystem\Util;
+use Twistor\FlysystemStreamWrapper;
 
 /**
  * An adapter for Flysystem to StreamWrapperInterface.
@@ -93,7 +93,7 @@ class FlysystemBridge extends FlysystemStreamWrapper implements StreamWrapperInt
    * @param string $scheme
    *   The scheme.
    *
-   * @return \Drupal\flysystem\Ported\Flysystem\FilesystemInterface
+   * @return \League\Flysystem\FilesystemInterface
    *   The filesystem for the scheme.
    */
   protected function getFilesystemForScheme($scheme) {
diff --git a/src/FlysystemFactory.php b/src/FlysystemFactory.php
index cd76597..fed8800 100644
--- a/src/FlysystemFactory.php
+++ b/src/FlysystemFactory.php
@@ -10,8 +10,8 @@ use Drupal\flysystem\Event\EnsureEvent;
 use Drupal\flysystem\Event\FlysystemEvents;
 use Drupal\flysystem\Flysystem\Adapter\CacheItemBackend;
 use Drupal\flysystem\Flysystem\Adapter\DrupalCacheAdapter;
-use Drupal\flysystem\Ported\Flysystem\Filesystem;
-use Drupal\flysystem\Ported\Replicate\ReplicateAdapter;
+use League\Flysystem\Filesystem;
+use League\Flysystem\Replicate\ReplicateAdapter;
 use Symfony\Contracts\EventDispatcher\EventDispatcherInterface;
 
 /**
@@ -52,7 +52,7 @@ class FlysystemFactory {
   /**
    * A cache of filesystems.
    *
-   * @var \Drupal\flysystem\Ported\Flysystem\FilesystemInterface[]
+   * @var \League\Flysystem\FilesystemInterface[]
    */
   protected $filesystems = [];
 
@@ -112,7 +112,7 @@ class FlysystemFactory {
    * @param string $scheme
    *   The scheme.
    *
-   * @return \Drupal\flysystem\Ported\Flysystem\FilesystemInterface
+   * @return \League\Flysystem\FilesystemInterface
    *   The filesystem for the scheme.
    */
   public function getFilesystem($scheme) {
@@ -203,7 +203,7 @@ class FlysystemFactory {
    * @param string $scheme
    *   The scheme to find an adapter for.
    *
-   * @return \Drupal\flysystem\Ported\Flysystem\AdapterInterface
+   * @return \League\Flysystem\AdapterInterface
    *   The correct adapter from settings.
    */
   protected function getAdapter($scheme) {
diff --git a/src/FlysystemStreamWrapper.php b/src/FlysystemStreamWrapper.php
deleted file mode 100644
index b03f634..0000000
--- a/src/FlysystemStreamWrapper.php
+++ /dev/null
@@ -1,990 +0,0 @@
-<?php
-
-namespace Drupal\flysystem;
-
-use Drupal\flysystem\Ported\Flysystem\AdapterInterface;
-use Drupal\flysystem\Ported\Flysystem\FileNotFoundException;
-use Drupal\flysystem\Ported\Flysystem\FilesystemInterface;
-use Drupal\flysystem\Ported\Flysystem\Util;
-use Drupal\flysystem\Exception\TriggerErrorException;
-use Drupal\flysystem\PortedPlugin\ForcedRename;
-use Drupal\flysystem\PortedPlugin\Mkdir;
-use Drupal\flysystem\PortedPlugin\Rmdir;
-use Drupal\flysystem\PortedPlugin\Stat;
-use Drupal\flysystem\PortedPlugin\Touch;
-
-/**
- * An adapter for Flysystem to a PHP stream wrapper.
- * 
- * Ported from twistor/flysystem-stream-wrapper
- * @see https://github.com/twistor/flysystem-stream-wrapper/blob/master/src/FlysystemStreamWrapper.php.
- */
-class FlysystemStreamWrapper
-{
-    /**
-     * A flag to tell FlysystemStreamWrapper::url_stat() to ignore the size.
-     *
-     * @var int
-     */
-    const STREAM_URL_IGNORE_SIZE = 8;
-
-    /**
-     * The registered filesystems.
-     *
-     * @var \Drupal\flysystem\Ported\Flysystem\FilesystemInterface[]
-     */
-    protected static $filesystems = [];
-
-    /**
-     * Optional configuration.
-     *
-     * @var array
-     */
-    protected static $config = [];
-
-    /**
-     * The default configuration.
-     *
-     * @var array
-     */
-    protected static $defaultConfiguration = [
-        'permissions' => [
-            'dir' => [
-                'private' => 0700,
-                'public' => 0755,
-            ],
-            'file' => [
-                'private' => 0600,
-                'public' => 0644,
-            ],
-        ],
-        'metadata' => ['timestamp', 'size', 'visibility'],
-        'public_mask' => 0044,
-    ];
-
-    /**
-     * The number of bytes that have been written since the last flush.
-     *
-     * @var int
-     */
-    protected $bytesWritten = 0;
-
-    /**
-     * The filesystem of the current stream wrapper.
-     *
-     * @var \Drupal\flysystem\Ported\Flysystem\FilesystemInterface
-     */
-    protected $filesystem;
-
-    /**
-     * A generic resource handle.
-     *
-     * @var resource|bool
-     */
-    protected $handle;
-
-    /**
-     * Whether the handle is in append mode.
-     *
-     * @var bool
-     */
-    protected $isAppendMode = false;
-
-    /**
-     * Whether the handle is read-only.
-     *
-     * The stream returned from Flysystem may not actually be read-only, This
-     * ensures read-only behavior.
-     *
-     * @var bool
-     */
-    protected $isReadOnly = false;
-
-    /**
-     * Whether the handle is write-only.
-     *
-     * @var bool
-     */
-    protected $isWriteOnly = false;
-
-    /**
-     * A directory listing.
-     *
-     * @var array
-     */
-    protected $listing;
-
-    /**
-     * Whether this handle has been verified writable.
-     *
-     * @var bool
-     */
-    protected $needsCowCheck = false;
-
-    /**
-     * Whether the handle should be flushed.
-     *
-     * @var bool
-     */
-    protected $needsFlush = false;
-
-    /**
-     * The handle used for calls to stream_lock.
-     *
-     * @var resource
-     */
-    protected $lockHandle;
-
-    /**
-     * If stream_set_write_buffer() is called, the arguments.
-     *
-     * @var int
-     */
-    protected $streamWriteBuffer;
-
-    /**
-     * Instance URI (stream).
-     *
-     * A stream is referenced as "protocol://target".
-     *
-     * @var string
-     */
-    protected $uri;
-
-    /**
-     * Registers the stream wrapper protocol if not already registered.
-     *
-     * @param string              $protocol      The protocol.
-     * @param FilesystemInterface $filesystem    The filesystem.
-     * @param array|null          $configuration Optional configuration.
-     * @param int                 $flags         Should be set to STREAM_IS_URL if protocol is a URL protocol. Default is 0, local stream.
-     *
-     * @return bool True if the protocol was registered, false if not.
-     */
-    public static function register($protocol, FilesystemInterface $filesystem, array $configuration = null, $flags = 0)
-    {
-        if (static::streamWrapperExists($protocol)) {
-            return false;
-        }
-
-        static::$config[$protocol] = $configuration ?: static::$defaultConfiguration;
-        static::registerPlugins($protocol, $filesystem);
-        static::$filesystems[$protocol] = $filesystem;
-
-        return stream_wrapper_register($protocol, __CLASS__, $flags);
-    }
-
-    /**
-     * Unregisters a stream wrapper.
-     *
-     * @param string $protocol The protocol.
-     *
-     * @return bool True if the protocol was unregistered, false if not.
-     */
-    public static function unregister($protocol)
-    {
-        if ( ! static::streamWrapperExists($protocol)) {
-            return false;
-        }
-
-        unset(static::$filesystems[$protocol]);
-
-        return stream_wrapper_unregister($protocol);
-    }
-
-    /**
-     * Unregisters all controlled stream wrappers.
-     */
-    public static function unregisterAll()
-    {
-        foreach (static::getRegisteredProtocols() as $protocol) {
-            static::unregister($protocol);
-        }
-    }
-
-    /**
-     * @return array The list of registered protocols.
-     */
-    public static function getRegisteredProtocols()
-    {
-        return array_keys(static::$filesystems);
-    }
-
-    /**
-     * Determines if a protocol is registered.
-     *
-     * @param string $protocol The protocol to check.
-     *
-     * @return bool True if it is registered, false if not.
-     */
-    protected static function streamWrapperExists($protocol)
-    {
-        return in_array($protocol, stream_get_wrappers(), true);
-    }
-
-    /**
-     * Registers plugins on the filesystem.
-     * @param string $protocol
-     * @param FilesystemInterface $filesystem
-     */
-    protected static function registerPlugins($protocol, FilesystemInterface $filesystem)
-    {
-        $filesystem->addPlugin(new ForcedRename());
-        $filesystem->addPlugin(new Mkdir());
-        $filesystem->addPlugin(new Rmdir());
-
-        $stat = new Stat(
-            static::$config[$protocol]['permissions'],
-            static::$config[$protocol]['metadata']
-        );
-
-        $filesystem->addPlugin($stat);
-        $filesystem->addPlugin(new Touch());
-    }
-
-    /**
-     * Closes the directory handle.
-     *
-     * @return bool True on success, false on failure.
-     */
-    public function dir_closedir()
-    {
-        unset($this->listing);
-
-        return true;
-    }
-
-    /**
-     * Opens a directory handle.
-     *
-     * @param string $uri     The URL that was passed to opendir().
-     * @param int    $options Whether or not to enforce safe_mode (0x04).
-     *
-     * @return bool True on success, false on failure.
-     */
-    public function dir_opendir($uri, $options)
-    {
-        $this->uri = $uri;
-
-        $path = Util::normalizePath($this->getTarget());
-
-        $this->listing = $this->invoke($this->getFilesystem(), 'listContents', [$path], 'opendir');
-
-        if ($this->listing === false) {
-            return false;
-        }
-
-        if ( ! $dirlen = strlen($path)) {
-            return true;
-        }
-
-        // Remove the separator /.
-        $dirlen++;
-
-        // Remove directory prefix.
-        foreach ($this->listing as $delta => $item) {
-            $this->listing[$delta]['path'] = substr($item['path'], $dirlen);
-        }
-
-        reset($this->listing);
-
-        return true;
-    }
-
-    /**
-     * Reads an entry from directory handle.
-     *
-     * @return string|bool The next filename, or false if there is no next file.
-     */
-    public function dir_readdir()
-    {
-        $current = current($this->listing);
-        next($this->listing);
-
-        return $current ? $current['path'] : false;
-    }
-
-    /**
-     * Rewinds the directory handle.
-     *
-     * @return bool True on success, false on failure.
-     */
-    public function dir_rewinddir()
-    {
-        reset($this->listing);
-
-        return true;
-    }
-
-    /**
-     * Creates a directory.
-     *
-     * @param string $uri
-     * @param int    $mode
-     * @param int    $options
-     *
-     * @return bool True on success, false on failure.
-     */
-    public function mkdir($uri, $mode, $options)
-    {
-        $this->uri = $uri;
-
-        return $this->invoke($this->getFilesystem(), 'mkdir', [$this->getTarget(), $mode, $options]);
-    }
-
-    /**
-     * Renames a file or directory.
-     *
-     * @param string $uri_from
-     * @param string $uri_to
-     *
-     * @return bool True on success, false on failure.
-     */
-    public function rename($uri_from, $uri_to)
-    {
-        $this->uri = $uri_from;
-        $args = [$this->getTarget($uri_from), $this->getTarget($uri_to)];
-
-        return $this->invoke($this->getFilesystem(), 'forcedRename', $args, 'rename');
-    }
-
-    /**
-     * Removes a directory.
-     *
-     * @param string $uri
-     * @param int    $options
-     *
-     * @return bool True on success, false on failure.
-     */
-    public function rmdir($uri, $options)
-    {
-        $this->uri = $uri;
-
-        return $this->invoke($this->getFilesystem(), 'rmdir', [$this->getTarget(), $options]);
-    }
-
-    /**
-     * Retrieves the underlying resource.
-     *
-     * @param int $cast_as
-     *
-     * @return resource|bool The stream resource used by the wrapper, or false.
-     */
-    public function stream_cast($cast_as)
-    {
-        return $this->handle;
-    }
-
-    /**
-     * Closes the resource.
-     */
-    public function stream_close()
-    {
-        // PHP 7 doesn't call flush automatically anymore for truncate() or when
-        // writing an empty file. We need to ensure that the handle gets pushed
-        // as needed in that case. This will be a no-op for php 5.
-        $this->stream_flush();
-
-        if (is_resource($this->handle)) {
-            fclose($this->handle);
-        }
-    }
-
-    /**
-     * Tests for end-of-file on a file pointer.
-     *
-     * @return bool True if the file is at the end, false if not.
-     */
-    public function stream_eof()
-    {
-        return feof($this->handle);
-    }
-
-    /**
-     * Flushes the output.
-     *
-     * @return bool True on success, false on failure.
-     */
-    public function stream_flush()
-    {
-        if ( ! $this->needsFlush) {
-            return true;
-        }
-
-        $this->needsFlush = false;
-        $this->bytesWritten = 0;
-
-        // Calling putStream() will rewind our handle. flush() shouldn't change
-        // the position of the file.
-        $pos = ftell($this->handle);
-
-        $args = [$this->getTarget(), $this->handle];
-        $success = $this->invoke($this->getFilesystem(), 'putStream', $args, 'fflush');
-
-        if (is_resource($this->handle)) {
-            fseek($this->handle, $pos);
-        }
-
-        return $success;
-    }
-
-    /**
-     * Advisory file locking.
-     *
-     * @param int $operation
-     *
-     * @return bool True on success, false on failure.
-     */
-    public function stream_lock($operation)
-    {
-        $operation = (int) $operation;
-
-        if (($operation & \LOCK_UN) === \LOCK_UN) {
-            return $this->releaseLock($operation);
-        }
-
-        // If the caller calls flock() twice, there's no reason to re-create the
-        // lock handle.
-        if (is_resource($this->lockHandle)) {
-            return flock($this->lockHandle, $operation);
-        }
-
-        $this->lockHandle = $this->openLockHandle();
-
-        return is_resource($this->lockHandle) && flock($this->lockHandle, $operation);
-    }
-
-    /**
-     * Changes stream options.
-     *
-     * @param string $uri
-     * @param int    $option
-     * @param mixed  $value
-     *
-     * @return bool True on success, false on failure.
-     */
-    public function stream_metadata($uri, $option, $value)
-    {
-        $this->uri = $uri;
-
-        switch ($option) {
-            case STREAM_META_ACCESS:
-                $permissions = octdec(substr(decoct($value), -4));
-                $is_public = $permissions & $this->getConfiguration('public_mask');
-                $visibility =  $is_public ? AdapterInterface::VISIBILITY_PUBLIC : AdapterInterface::VISIBILITY_PRIVATE;
-
-                try {
-                    return $this->getFilesystem()->setVisibility($this->getTarget(), $visibility);
-                } catch (\LogicException $e) {
-                    // The adapter doesn't support visibility.
-                } catch (\Exception $e) {
-                    $this->triggerError('chmod', $e);
-
-                    return false;
-                }
-
-                return true;
-
-            case STREAM_META_TOUCH:
-                return $this->invoke($this->getFilesystem(), 'touch', [$this->getTarget()]);
-
-            default:
-                return false;
-        }
-    }
-
-    /**
-     * Opens file or URL.
-     *
-     * @param string $uri
-     * @param string $mode
-     * @param int    $options
-     * @param string &$opened_path
-     *
-     * @return bool True on success, false on failure.
-     */
-    public function stream_open($uri, $mode, $options, &$opened_path)
-    {
-        $this->uri = $uri;
-        $path = $this->getTarget();
-
-        $this->isReadOnly = StreamUtil::modeIsReadOnly($mode);
-        $this->isWriteOnly = StreamUtil::modeIsWriteOnly($mode);
-        $this->isAppendMode = StreamUtil::modeIsAppendable($mode);
-
-        $this->handle = $this->invoke($this, 'getStream', [$path, $mode], 'fopen');
-
-        if ($this->handle && $options & STREAM_USE_PATH) {
-            $opened_path = $path;
-        }
-
-        return is_resource($this->handle);
-    }
-
-    /**
-     * Reads from stream.
-     *
-     * @param int $count
-     *
-     * @return string The bytes read.
-     */
-    public function stream_read($count)
-    {
-        if ($this->isWriteOnly) {
-            return '';
-        }
-
-        return fread($this->handle, $count);
-    }
-
-    /**
-     * Seeks to specific location in a stream.
-     *
-     * @param int $offset
-     * @param int $whence
-     *
-     * @return bool True on success, false on failure.
-     */
-    public function stream_seek($offset, $whence = SEEK_SET)
-    {
-        return fseek($this->handle, $offset, $whence) === 0;
-    }
-
-    /**
-     * Changes stream options.
-     *
-     * @param int $option
-     * @param int $arg1
-     * @param int $arg2
-     *
-     * @return bool True on success, false on failure.
-     */
-    public function stream_set_option($option, $arg1, $arg2)
-    {
-        switch ($option) {
-            case STREAM_OPTION_BLOCKING:
-                // This works for the local adapter. It doesn't do anything for
-                // memory streams.
-                return stream_set_blocking($this->handle, $arg1);
-
-            case STREAM_OPTION_READ_TIMEOUT:
-                return  stream_set_timeout($this->handle, $arg1, $arg2);
-
-            case STREAM_OPTION_READ_BUFFER:
-                if ($arg1 === STREAM_BUFFER_NONE) {
-                    return stream_set_read_buffer($this->handle, 0) === 0;
-                }
-
-                return stream_set_read_buffer($this->handle, $arg2) === 0;
-
-            case STREAM_OPTION_WRITE_BUFFER:
-                $this->streamWriteBuffer = $arg1 === STREAM_BUFFER_NONE ? 0 : $arg2;
-
-                return true;
-        }
-
-        return false;
-    }
-
-    /**
-     * Retrieves information about a file resource.
-     *
-     * @return array A similar array to fstat().
-     *
-     * @see fstat()
-     */
-    public function stream_stat()
-    {
-        // Get metadata from original file.
-        $stat = $this->url_stat($this->uri, static::STREAM_URL_IGNORE_SIZE | STREAM_URL_STAT_QUIET) ?: [];
-
-        // Newly created file.
-        if (empty($stat['mode'])) {
-            $stat['mode'] = 0100000 + $this->getConfiguration('permissions')['file']['public'];
-            $stat[2] = $stat['mode'];
-        }
-
-        // Use the size of our handle, since it could have been written to or
-        // truncated.
-        $stat['size'] = $stat[7] = StreamUtil::getSize($this->handle);
-
-        return $stat;
-    }
-
-    /**
-     * Retrieves the current position of a stream.
-     *
-     * @return int The current position of the stream.
-     */
-    public function stream_tell()
-    {
-        if ($this->isAppendMode) {
-            return 0;
-        }
-
-        return ftell($this->handle);
-    }
-
-    /**
-     * Truncates the stream.
-     *
-     * @param int $new_size
-     *
-     * @return bool True on success, false on failure.
-     */
-    public function stream_truncate($new_size)
-    {
-        if ($this->isReadOnly) {
-            return false;
-        }
-        $this->needsFlush = true;
-        $this->ensureWritableHandle();
-
-        return ftruncate($this->handle, $new_size);
-    }
-
-    /**
-     * Writes to the stream.
-     *
-     * @param string $data
-     *
-     * @return int The number of bytes that were successfully stored.
-     */
-    public function stream_write($data)
-    {
-        if ($this->isReadOnly) {
-            return 0;
-        }
-        $this->needsFlush = true;
-        $this->ensureWritableHandle();
-
-        // Enforce append semantics.
-        if ($this->isAppendMode) {
-            StreamUtil::trySeek($this->handle, 0, SEEK_END);
-        }
-
-        $written = fwrite($this->handle, $data);
-        $this->bytesWritten += $written;
-
-        if (isset($this->streamWriteBuffer) && $this->bytesWritten >= $this->streamWriteBuffer) {
-            $this->stream_flush();
-        }
-
-        return $written;
-    }
-
-    /**
-     * Deletes a file.
-     *
-     * @param string $uri
-     *
-     * @return bool True on success, false on failure.
-     */
-    public function unlink($uri)
-    {
-        $this->uri = $uri;
-
-        return $this->invoke($this->getFilesystem(), 'delete', [$this->getTarget()], 'unlink');
-    }
-
-    /**
-     * Retrieves information about a file.
-     *
-     * @param string $uri
-     * @param int    $flags
-     *
-     * @return array|false Output similar to stat().
-     *
-     * @see stat()
-     */
-    public function url_stat($uri, $flags)
-    {
-        $this->uri = $uri;
-
-        try {
-            return $this->getFilesystem()->stat($this->getTarget(), $flags);
-        } catch (FileNotFoundException $e) {
-            // File doesn't exist.
-            if ( ! ($flags & STREAM_URL_STAT_QUIET)) {
-                $this->triggerError('stat', $e);
-            }
-        } catch (\Exception $e) {
-            $this->triggerError('stat', $e);
-        }
-
-        return false;
-    }
-
-    /**
-     * Returns a stream for a given path and mode.
-     *
-     * @param string $path The path to open.
-     * @param string $mode The mode to open the stream in.
-     *
-     * @return resource|bool The file handle, or false.
-     *
-     * @throws \Drupal\flysystem\Ported\Flysystem\FileNotFoundException
-     */
-    protected function getStream($path, $mode)
-    {
-        switch ($mode[0]) {
-            case 'r':
-                $this->needsCowCheck = true;
-
-                return $this->getFilesystem()->readStream($path);
-
-            case 'w':
-                $this->needsFlush = true;
-
-                return fopen('php://temp', 'w+b');
-
-            case 'a':
-                return $this->getAppendStream($path);
-
-            case 'x':
-                return $this->getXStream($path);
-
-            case 'c':
-                return $this->getWritableStream($path);
-        }
-
-        return false;
-    }
-
-    /**
-     * Returns a writable stream for a given path and mode.
-     *
-     * @param string $path The path to open.
-     *
-     * @return resource|bool The file handle, or false.
-     */
-    protected function getWritableStream($path)
-    {
-        try {
-            $handle = $this->getFilesystem()->readStream($path);
-            $this->needsCowCheck = true;
-        } catch (FileNotFoundException $e) {
-            $handle = fopen('php://temp', 'w+b');
-            $this->needsFlush = true;
-        }
-
-        return $handle;
-    }
-
-    /**
-     * Returns an appendable stream for a given path and mode.
-     *
-     * @param string $path The path to open.
-     *
-     * @return resource|bool The file handle, or false.
-     */
-    protected function getAppendStream($path)
-    {
-        if ($handle = $this->getWritableStream($path)) {
-            StreamUtil::trySeek($handle, 0, SEEK_END);
-        }
-
-        return $handle;
-    }
-
-    /**
-     * Returns a writable stream for a given path and mode.
-     *
-     * Triggers a warning if the file exists.
-     *
-     * @param string $path The path to open.
-     *
-     * @return resource|bool The file handle, or false.
-     */
-    protected function getXStream($path)
-    {
-        if ($this->getFilesystem()->has($path)) {
-            trigger_error('fopen(): failed to open stream: File exists', E_USER_WARNING);
-
-            return false;
-        }
-
-        $this->needsFlush = true;
-
-        return fopen('php://temp', 'w+b');
-    }
-
-    /**
-     * Guarantees that the handle is writable.
-     */
-    protected function ensureWritableHandle()
-    {
-        if ( ! $this->needsCowCheck) {
-            return;
-        }
-
-        $this->needsCowCheck = false;
-
-        if (StreamUtil::isWritable($this->handle)) {
-            return;
-        }
-
-        $this->handle = StreamUtil::copy($this->handle);
-    }
-
-    /**
-     * Returns the protocol from the internal URI.
-     *
-     * @return string The protocol.
-     */
-    protected function getProtocol()
-    {
-        return substr($this->uri, 0, strpos($this->uri, '://'));
-    }
-
-    /**
-     * Returns the local writable target of the resource within the stream.
-     *
-     * @param string|null $uri The URI.
-     *
-     * @return string The path appropriate for use with Flysystem.
-     */
-    protected function getTarget($uri = null)
-    {
-        if ( ! isset($uri)) {
-            $uri = $this->uri;
-        }
-
-        $target = substr($uri, strpos($uri, '://') + 3);
-
-        return $target === false ? '' : $target;
-    }
-
-    /**
-     * Returns the configuration.
-     *
-     * @param string|null $key The optional configuration key.
-     *
-     * @return array The requested configuration.
-     */
-    protected function getConfiguration($key = null)
-    {
-        return $key ? static::$config[$this->getProtocol()][$key] : static::$config[$this->getProtocol()];
-    }
-
-    /**
-     * Returns the filesystem.
-     *
-     * @return \Drupal\flysystem\Ported\Flysystem\FilesystemInterface The filesystem object.
-     */
-    protected function getFilesystem()
-    {
-        if (isset($this->filesystem)) {
-            return $this->filesystem;
-        }
-
-        $this->filesystem = static::$filesystems[$this->getProtocol()];
-
-        return $this->filesystem;
-    }
-
-    /**
-     * Calls a method on an object, catching any exceptions.
-     *
-     * @param object      $object    The object to call the method on.
-     * @param string      $method    The method name.
-     * @param array       $args      The arguments to the method.
-     * @param string|null $errorname The name of the calling function.
-     *
-     * @return mixed|false The return value of the call, or false on failure.
-     */
-    protected function invoke($object, $method, array $args, $errorname = null)
-    {
-        try {
-            return call_user_func_array([$object, $method], $args);
-        } catch (\Exception $e) {
-            $errorname = $errorname ?: $method;
-            $this->triggerError($errorname, $e);
-        }
-
-        return false;
-    }
-
-    /**
-     * Calls trigger_error(), printing the appropriate message.
-     *
-     * @param string     $function
-     * @param \Exception $e
-     */
-    protected function triggerError($function, \Exception $e)
-    {
-        if ($e instanceof TriggerErrorException) {
-            trigger_error($e->formatMessage($function), E_USER_WARNING);
-
-            return;
-        }
-
-        switch (get_class($e)) {
-            case 'Drupal\flysystem\Ported\Flysystem\FileNotFoundException':
-                trigger_error(sprintf('%s(): No such file or directory', $function), E_USER_WARNING);
-
-                return;
-
-            case 'Drupal\flysystem\Ported\Flysystem\RootViolationException':
-                trigger_error(sprintf('%s(): Cannot remove the root directory', $function), E_USER_WARNING);
-
-                return;
-        }
-
-        // Don't allow any exceptions to leak.
-        trigger_error($e->getMessage(), E_USER_WARNING);
-    }
-
-    /**
-     * Creates an advisory lock handle.
-     *
-     * @return resource|false
-     */
-    protected function openLockHandle()
-    {
-        // PHP allows periods, '.', to be scheme names. Normalize the scheme
-        // name to something that won't cause problems. Also, avoid problems
-        // with case-insensitive filesystems. We use bin2hex() rather than a
-        // hashing function since most scheme names are small, and bin2hex()
-        // only doubles the string length.
-        $sub_dir = bin2hex($this->getProtocol());
-
-        // Since we're flattening out whole filesystems, at least create a
-        // sub-directory for each scheme to attempt to reduce the number of
-        // files per directory.
-        $temp_dir = sys_get_temp_dir() . '/flysystem-stream-wrapper/' . $sub_dir;
-
-        // Race free directory creation. If @mkdir() fails, fopen() will fail
-        // later, so there's no reason to test again.
-        ! is_dir($temp_dir) && @mkdir($temp_dir, 0777, true);
-
-        // Normalize paths so that locks are consistent.
-        // We are using sha1() to avoid the file name limits, and case
-        // insensitivity on Windows. This is not security sensitive.
-        $lock_key = sha1(Util::normalizePath($this->getTarget()));
-
-        // Relay the lock to a real filesystem lock.
-        return fopen($temp_dir . '/' . $lock_key, 'c');
-    }
-
-    /**
-     * Releases the advisory lock.
-     *
-     * @param int $operation
-     *
-     * @return bool
-     *
-     * @see FlysystemStreamWrapper::stream_lock()
-     */
-    protected function releaseLock($operation)
-    {
-        $exists = is_resource($this->lockHandle);
-
-        $success = $exists && flock($this->lockHandle, $operation);
-
-        $exists && fclose($this->lockHandle);
-        $this->lockHandle = null;
-
-        return $success;
-    }
-}
\ No newline at end of file
diff --git a/src/Plugin/FlysystemPluginInterface.php b/src/Plugin/FlysystemPluginInterface.php
index 11038ac..17582c3 100644
--- a/src/Plugin/FlysystemPluginInterface.php
+++ b/src/Plugin/FlysystemPluginInterface.php
@@ -2,8 +2,6 @@
 
 namespace Drupal\flysystem\Plugin;
 
-use Drupal\flysystem\Ported\Flysystem\AdapterInterface;
-
 /**
  * Interface definition for Flysystem plugins.
  */
@@ -16,7 +14,7 @@ interface FlysystemPluginInterface {
    * perform filesystem operations, it should either use a scheme:// or have the
    * \Drupal\flysystem\FlysystemFactory injected.
    *
-   * @return \Drupal\flysystem\Ported\Flysystem\AdapterInterface
+   * @return \League\Flysystem\AdapterInterface
    *   The Flysytem adapter.
    */
   public function getAdapter();
diff --git a/src/Plugin/FlysystemUrlTrait.php b/src/Plugin/FlysystemUrlTrait.php
index b925e2d..0062dba 100644
--- a/src/Plugin/FlysystemUrlTrait.php
+++ b/src/Plugin/FlysystemUrlTrait.php
@@ -3,7 +3,7 @@
 namespace Drupal\flysystem\Plugin;
 
 use Drupal\Core\Url;
-use Drupal\flysystem\Ported\Flysystem\Util;
+use League\Flysystem\Util;
 
 /**
  * Helper trait for generating URLs from adapter plugins.
diff --git a/src/Ported/Flysystem/Adapter/AbstractAdapter.php b/src/Ported/Flysystem/Adapter/AbstractAdapter.php
deleted file mode 100644
index 34c8745..0000000
--- a/src/Ported/Flysystem/Adapter/AbstractAdapter.php
+++ /dev/null
@@ -1,76 +0,0 @@
-<?php
-
-namespace Drupal\flysystem\Ported\Flysystem\Adapter;
-
-use Drupal\flysystem\Ported\Flysystem\AdapterInterface;
-
-/**
- * Ported from league/flysystem v1.
- * @see https://raw.githubusercontent.com/thephpleague/flysystem/1.x/src/Adapter/AbstractAdapter.php.
- */
-abstract class AbstractAdapter implements AdapterInterface
-{
-    /**
-     * @var string|null path prefix
-     */
-    protected $pathPrefix;
-
-    /**
-     * @var string
-     */
-    protected $pathSeparator = '/';
-
-    /**
-     * Set the path prefix.
-     *
-     * @param string $prefix
-     *
-     * @return void
-     */
-    public function setPathPrefix($prefix)
-    {
-        $prefix = (string) $prefix;
-
-        if ($prefix === '') {
-            $this->pathPrefix = null;
-
-            return;
-        }
-
-        $this->pathPrefix = rtrim($prefix, '\\/') . $this->pathSeparator;
-    }
-
-    /**
-     * Get the path prefix.
-     *
-     * @return string|null path prefix or null if pathPrefix is empty
-     */
-    public function getPathPrefix()
-    {
-        return $this->pathPrefix;
-    }
-
-    /**
-     * Prefix a path.
-     *
-     * @param string $path
-     *
-     * @return string prefixed path
-     */
-    public function applyPathPrefix($path)
-    {
-        return $this->getPathPrefix() . ltrim($path, '\\/');
-    }
-
-    /**
-     * Remove a path prefix.
-     *
-     * @param string $path
-     *
-     * @return string path without the prefix
-     */
-    public function removePathPrefix($path)
-    {
-        return substr($path, strlen((string) $this->getPathPrefix()));
-    }
-}
\ No newline at end of file
diff --git a/src/Ported/Flysystem/Adapter/AbstractFtpAdapter.php b/src/Ported/Flysystem/Adapter/AbstractFtpAdapter.php
deleted file mode 100644
index cf703ba..0000000
--- a/src/Ported/Flysystem/Adapter/AbstractFtpAdapter.php
+++ /dev/null
@@ -1,709 +0,0 @@
-<?php
-
-namespace Drupal\flysystem\Ported\Flysystem\Adapter;
-
-use DateTime;
-use Drupal\flysystem\Ported\Flysystem\AdapterInterface;
-use Drupal\flysystem\Ported\Flysystem\Config;
-use Drupal\flysystem\Ported\Flysystem\NotSupportedException;
-use Drupal\flysystem\Ported\Flysystem\SafeStorage;
-use RuntimeException;
-
-/**
- * Ported from league/flysystem v1.
- * @see https://raw.githubusercontent.com/thephpleague/flysystem/1.x/src/Adapter/AbstractFtpAdapter.php.
- */
-abstract class AbstractFtpAdapter extends AbstractAdapter
-{
-    /**
-     * @var mixed
-     */
-    protected $connection;
-
-    /**
-     * @var string
-     */
-    protected $host;
-
-    /**
-     * @var int
-     */
-    protected $port = 21;
-
-    /**
-     * @var bool
-     */
-    protected $ssl = false;
-
-    /**
-     * @var int
-     */
-    protected $timeout = 90;
-
-    /**
-     * @var bool
-     */
-    protected $passive = true;
-
-    /**
-     * @var string
-     */
-    protected $separator = '/';
-
-    /**
-     * @var string|null
-     */
-    protected $root;
-
-    /**
-     * @var int
-     */
-    protected $permPublic = 0744;
-
-    /**
-     * @var int
-     */
-    protected $permPrivate = 0700;
-
-    /**
-     * @var array
-     */
-    protected $configurable = [];
-
-    /**
-     * @var string
-     */
-    protected $systemType;
-
-    /**
-     * @var SafeStorage
-     */
-    protected $safeStorage;
-
-    /**
-     * True to enable timestamps for FTP servers that return unix-style listings.
-     *
-     * @var bool
-     */
-    protected $enableTimestampsOnUnixListings = false;
-
-    /**
-     * Constructor.
-     *
-     * @param array $config
-     */
-    public function __construct(array $config)
-    {
-        $this->safeStorage = new SafeStorage();
-        $this->setConfig($config);
-    }
-
-    /**
-     * Set the config.
-     *
-     * @param array $config
-     *
-     * @return $this
-     */
-    public function setConfig(array $config)
-    {
-        foreach ($this->configurable as $setting) {
-            if ( ! isset($config[$setting])) {
-                continue;
-            }
-
-            $method = 'set' . ucfirst($setting);
-
-            if (method_exists($this, $method)) {
-                $this->$method($config[$setting]);
-            }
-        }
-
-        return $this;
-    }
-
-    /**
-     * Returns the host.
-     *
-     * @return string
-     */
-    public function getHost()
-    {
-        return $this->host;
-    }
-
-    /**
-     * Set the host.
-     *
-     * @param string $host
-     *
-     * @return $this
-     */
-    public function setHost($host)
-    {
-        $this->host = $host;
-
-        return $this;
-    }
-
-    /**
-     * Set the public permission value.
-     *
-     * @param int $permPublic
-     *
-     * @return $this
-     */
-    public function setPermPublic($permPublic)
-    {
-        $this->permPublic = $permPublic;
-
-        return $this;
-    }
-
-    /**
-     * Set the private permission value.
-     *
-     * @param int $permPrivate
-     *
-     * @return $this
-     */
-    public function setPermPrivate($permPrivate)
-    {
-        $this->permPrivate = $permPrivate;
-
-        return $this;
-    }
-
-    /**
-     * Returns the ftp port.
-     *
-     * @return int
-     */
-    public function getPort()
-    {
-        return $this->port;
-    }
-
-    /**
-     * Returns the root folder to work from.
-     *
-     * @return string
-     */
-    public function getRoot()
-    {
-        return $this->root;
-    }
-
-    /**
-     * Set the ftp port.
-     *
-     * @param int|string $port
-     *
-     * @return $this
-     */
-    public function setPort($port)
-    {
-        $this->port = (int) $port;
-
-        return $this;
-    }
-
-    /**
-     * Set the root folder to work from.
-     *
-     * @param string $root
-     *
-     * @return $this
-     */
-    public function setRoot($root)
-    {
-        $this->root = rtrim($root, '\\/') . $this->separator;
-
-        return $this;
-    }
-
-    /**
-     * Returns the ftp username.
-     *
-     * @return string username
-     */
-    public function getUsername()
-    {
-        $username = $this->safeStorage->retrieveSafely('username');
-
-        return $username !== null ? $username : 'anonymous';
-    }
-
-    /**
-     * Set ftp username.
-     *
-     * @param string $username
-     *
-     * @return $this
-     */
-    public function setUsername($username)
-    {
-        $this->safeStorage->storeSafely('username', $username);
-
-        return $this;
-    }
-
-    /**
-     * Returns the password.
-     *
-     * @return string password
-     */
-    public function getPassword()
-    {
-        return $this->safeStorage->retrieveSafely('password');
-    }
-
-    /**
-     * Set the ftp password.
-     *
-     * @param string $password
-     *
-     * @return $this
-     */
-    public function setPassword($password)
-    {
-        $this->safeStorage->storeSafely('password', $password);
-
-        return $this;
-    }
-
-    /**
-     * Returns the amount of seconds before the connection will timeout.
-     *
-     * @return int
-     */
-    public function getTimeout()
-    {
-        return $this->timeout;
-    }
-
-    /**
-     * Set the amount of seconds before the connection should timeout.
-     *
-     * @param int $timeout
-     *
-     * @return $this
-     */
-    public function setTimeout($timeout)
-    {
-        $this->timeout = (int) $timeout;
-
-        return $this;
-    }
-
-    /**
-     * Return the FTP system type.
-     *
-     * @return string
-     */
-    public function getSystemType()
-    {
-        return $this->systemType;
-    }
-
-    /**
-     * Set the FTP system type (windows or unix).
-     *
-     * @param string $systemType
-     *
-     * @return $this
-     */
-    public function setSystemType($systemType)
-    {
-        $this->systemType = strtolower($systemType);
-
-        return $this;
-    }
-
-    /**
-     * True to enable timestamps for FTP servers that return unix-style listings.
-     *
-     * @param bool $bool
-     *
-     * @return $this
-     */
-    public function setEnableTimestampsOnUnixListings($bool = false)
-    {
-        $this->enableTimestampsOnUnixListings = $bool;
-
-        return $this;
-    }
-
-    /**
-     * @inheritdoc
-     */
-    public function listContents($directory = '', $recursive = false)
-    {
-        return $this->listDirectoryContents($directory, $recursive);
-    }
-
-    abstract protected function listDirectoryContents($directory, $recursive = false);
-
-    /**
-     * Normalize a directory listing.
-     *
-     * @param array  $listing
-     * @param string $prefix
-     *
-     * @return array directory listing
-     */
-    protected function normalizeListing(array $listing, $prefix = '')
-    {
-        $base = $prefix;
-        $result = [];
-        $listing = $this->removeDotDirectories($listing);
-
-        while ($item = array_shift($listing)) {
-            if (preg_match('#^.*:$#', $item)) {
-                $base = preg_replace('~^\./*|:$~', '', $item);
-                continue;
-            }
-
-            $result[] = $this->normalizeObject($item, $base);
-        }
-
-        return $this->sortListing($result);
-    }
-
-    /**
-     * Sort a directory listing.
-     *
-     * @param array $result
-     *
-     * @return array sorted listing
-     */
-    protected function sortListing(array $result)
-    {
-        $compare = function ($one, $two) {
-            return strnatcmp($one['path'], $two['path']);
-        };
-
-        usort($result, $compare);
-
-        return $result;
-    }
-
-    /**
-     * Normalize a file entry.
-     *
-     * @param string $item
-     * @param string $base
-     *
-     * @return array normalized file array
-     *
-     * @throws NotSupportedException
-     */
-    protected function normalizeObject($item, $base)
-    {
-        $systemType = $this->systemType ?: $this->detectSystemType($item);
-
-        if ($systemType === 'unix') {
-            return $this->normalizeUnixObject($item, $base);
-        } elseif ($systemType === 'windows') {
-            return $this->normalizeWindowsObject($item, $base);
-        }
-
-        throw NotSupportedException::forFtpSystemType($systemType);
-    }
-
-    /**
-     * Normalize a Unix file entry.
-     *
-     * Given $item contains:
-     *    '-rw-r--r--   1 ftp      ftp           409 Aug 19 09:01 file1.txt'
-     *
-     * This function will return:
-     * [
-     *   'type' => 'file',
-     *   'path' => 'file1.txt',
-     *   'visibility' => 'public',
-     *   'size' => 409,
-     *   'timestamp' => 1566205260
-     * ]
-     *
-     * @param string $item
-     * @param string $base
-     *
-     * @return array normalized file array
-     */
-    protected function normalizeUnixObject($item, $base)
-    {
-        $item = preg_replace('#\s+#', ' ', trim($item), 7);
-
-        if (count(explode(' ', $item, 9)) !== 9) {
-            throw new RuntimeException("Metadata can't be parsed from item '$item' , not enough parts.");
-        }
-
-        list($permissions, /* $number */, /* $owner */, /* $group */, $size, $month, $day, $timeOrYear, $name) = explode(' ', $item, 9);
-        $type = $this->detectType($permissions);
-        $path = $base === '' ? $name : $base . $this->separator . $name;
-
-        if ($type === 'dir') {
-            $result = compact('type', 'path');
-            if ($this->enableTimestampsOnUnixListings) {
-                $timestamp = $this->normalizeUnixTimestamp($month, $day, $timeOrYear);
-                $result += compact('timestamp');
-            }
-
-            return $result;
-        }
-
-        $permissions = $this->normalizePermissions($permissions);
-        $visibility = $permissions & 0044 ? AdapterInterface::VISIBILITY_PUBLIC : AdapterInterface::VISIBILITY_PRIVATE;
-        $size = (int) $size;
-
-        $result = compact('type', 'path', 'visibility', 'size');
-        if ($this->enableTimestampsOnUnixListings) {
-            $timestamp = $this->normalizeUnixTimestamp($month, $day, $timeOrYear);
-            $result += compact('timestamp');
-        }
-
-        return $result;
-    }
-
-    /**
-     * Only accurate to the minute (current year), or to the day.
-     *
-     * Inadequacies in timestamp accuracy are due to limitations of the FTP 'LIST' command
-     *
-     * Note: The 'MLSD' command is a machine-readable replacement for 'LIST'
-     * but many FTP servers do not support it :(
-     *
-     * @param string $month      e.g. 'Aug'
-     * @param string $day        e.g. '19'
-     * @param string $timeOrYear e.g. '09:01' OR '2015'
-     *
-     * @return int
-     */
-    protected function normalizeUnixTimestamp($month, $day, $timeOrYear)
-    {
-        if (is_numeric($timeOrYear)) {
-            $year = $timeOrYear;
-            $hour = '00';
-            $minute = '00';
-            $seconds = '00';
-        } else {
-            $year = date('Y');
-            list($hour, $minute) = explode(':', $timeOrYear);
-            $seconds = '00';
-        }
-        $dateTime = DateTime::createFromFormat('Y-M-j-G:i:s', "{$year}-{$month}-{$day}-{$hour}:{$minute}:{$seconds}");
-
-        return $dateTime->getTimestamp();
-    }
-
-    /**
-     * Normalize a Windows/DOS file entry.
-     *
-     * @param string $item
-     * @param string $base
-     *
-     * @return array normalized file array
-     */
-    protected function normalizeWindowsObject($item, $base)
-    {
-        $item = preg_replace('#\s+#', ' ', trim($item), 3);
-
-        if (count(explode(' ', $item, 4)) !== 4) {
-            throw new RuntimeException("Metadata can't be parsed from item '$item' , not enough parts.");
-        }
-
-        list($date, $time, $size, $name) = explode(' ', $item, 4);
-        $path = $base === '' ? $name : $base . $this->separator . $name;
-
-        // Check for the correct date/time format
-        $format = strlen($date) === 8 ? 'm-d-yH:iA' : 'Y-m-dH:i';
-        $dt = DateTime::createFromFormat($format, $date . $time);
-        $timestamp = $dt ? $dt->getTimestamp() : (int) strtotime("$date $time");
-
-        if ($size === '<DIR>') {
-            $type = 'dir';
-
-            return compact('type', 'path', 'timestamp');
-        }
-
-        $type = 'file';
-        $visibility = AdapterInterface::VISIBILITY_PUBLIC;
-        $size = (int) $size;
-
-        return compact('type', 'path', 'visibility', 'size', 'timestamp');
-    }
-
-    /**
-     * Get the system type from a listing item.
-     *
-     * @param string $item
-     *
-     * @return string the system type
-     */
-    protected function detectSystemType($item)
-    {
-        return preg_match('/^[0-9]{2,4}-[0-9]{2}-[0-9]{2}/', trim($item)) ? 'windows' : 'unix';
-    }
-
-    /**
-     * Get the file type from the permissions.
-     *
-     * @param string $permissions
-     *
-     * @return string file type
-     */
-    protected function detectType($permissions)
-    {
-        return substr($permissions, 0, 1) === 'd' ? 'dir' : 'file';
-    }
-
-    /**
-     * Normalize a permissions string.
-     *
-     * @param string $permissions
-     *
-     * @return int
-     */
-    protected function normalizePermissions($permissions)
-    {
-        if (is_numeric($permissions)) {
-            return ((int) $permissions) & 0777;
-        }
-
-        // remove the type identifier
-        $permissions = substr($permissions, 1);
-
-        // map the string rights to the numeric counterparts
-        $map = ['-' => '0', 'r' => '4', 'w' => '2', 'x' => '1'];
-        $permissions = strtr($permissions, $map);
-
-        // split up the permission groups
-        $parts = str_split($permissions, 3);
-
-        // convert the groups
-        $mapper = function ($part) {
-            return array_sum(str_split($part));
-        };
-
-        // converts to decimal number
-        return octdec(implode('', array_map($mapper, $parts)));
-    }
-
-    /**
-     * Filter out dot-directories.
-     *
-     * @param array $list
-     *
-     * @return array
-     */
-    public function removeDotDirectories(array $list)
-    {
-        $filter = function ($line) {
-            return $line !== '' && ! preg_match('#.* \.(\.)?$|^total#', $line);
-        };
-
-        return array_filter($list, $filter);
-    }
-
-    /**
-     * @inheritdoc
-     */
-    public function has($path)
-    {
-        return $this->getMetadata($path);
-    }
-
-    /**
-     * @inheritdoc
-     */
-    public function getSize($path)
-    {
-        return $this->getMetadata($path);
-    }
-
-    /**
-     * @inheritdoc
-     */
-    public function getVisibility($path)
-    {
-        return $this->getMetadata($path);
-    }
-
-    /**
-     * Ensure a directory exists.
-     *
-     * @param string $dirname
-     */
-    public function ensureDirectory($dirname)
-    {
-        $dirname = (string) $dirname;
-
-        if ($dirname !== '' && ! $this->has($dirname)) {
-            $this->createDir($dirname, new Config());
-        }
-    }
-
-    /**
-     * @return mixed
-     */
-    public function getConnection()
-    {
-        if ( ! $this->isConnected()) {
-            $this->disconnect();
-            $this->connect();
-        }
-
-        return $this->connection;
-    }
-
-    /**
-     * Get the public permission value.
-     *
-     * @return int
-     */
-    public function getPermPublic()
-    {
-        return $this->permPublic;
-    }
-
-    /**
-     * Get the private permission value.
-     *
-     * @return int
-     */
-    public function getPermPrivate()
-    {
-        return $this->permPrivate;
-    }
-
-    /**
-     * Disconnect on destruction.
-     */
-    public function __destruct()
-    {
-        $this->disconnect();
-    }
-
-    /**
-     * Establish a connection.
-     */
-    abstract public function connect();
-
-    /**
-     * Close the connection.
-     */
-    abstract public function disconnect();
-
-    /**
-     * Check if a connection is active.
-     *
-     * @return bool
-     */
-    abstract public function isConnected();
-
-    protected function escapePath($path)
-    {
-        return str_replace(['*', '[', ']'], ['\\*', '\\[', '\\]'], $path);
-    }
-}
diff --git a/src/Ported/Flysystem/Adapter/CanOverwriteFiles.php b/src/Ported/Flysystem/Adapter/CanOverwriteFiles.php
deleted file mode 100644
index 0a27d1c..0000000
--- a/src/Ported/Flysystem/Adapter/CanOverwriteFiles.php
+++ /dev/null
@@ -1,14 +0,0 @@
-<?php
-
-namespace Drupal\flysystem\Ported\Flysystem\Adapter;
-
-/**
- * Ported from league/flysystem v1.
- * @see https://raw.githubusercontent.com/thephpleague/flysystem/1.x/src/Adapter/CanOverwriteFiles.php.
- *
- * Adapters that implement this interface let the Filesystem know that files can be overwritten using the write
- * functions and don't need the update function to be called. This can help improve performance when asserts are disabled.
- */
-interface CanOverwriteFiles
-{
-}
diff --git a/src/Ported/Flysystem/Adapter/Ftp.php b/src/Ported/Flysystem/Adapter/Ftp.php
deleted file mode 100644
index 9b248db..0000000
--- a/src/Ported/Flysystem/Adapter/Ftp.php
+++ /dev/null
@@ -1,588 +0,0 @@
-<?php
-
-namespace Drupal\flysystem\Ported\Flysystem\Adapter;
-
-use Drupal\flysystem\Ported\Flysystem\Adapter\Polyfill\StreamedCopyTrait;
-use Drupal\flysystem\Ported\Flysystem\AdapterInterface;
-use Drupal\flysystem\Ported\Flysystem\Config;
-use Drupal\flysystem\Ported\Flysystem\ConnectionErrorException;
-use Drupal\flysystem\Ported\Flysystem\ConnectionRuntimeException;
-use Drupal\flysystem\Ported\Flysystem\InvalidRootException;
-use Drupal\flysystem\Ported\Flysystem\Util;
-use Drupal\flysystem\Ported\Flysystem\Util\MimeType;
-
-use function in_array;
-
-/**
- * Ported from league/flysystem v1.
- * @see https://raw.githubusercontent.com/thephpleague/flysystem/1.x/src/Adapter/Ftp.php
- */
-class Ftp extends AbstractFtpAdapter
-{
-    use StreamedCopyTrait;
-
-    /**
-     * @var int
-     */
-    protected $transferMode = FTP_BINARY;
-
-    /**
-     * @var null|bool
-     */
-    protected $ignorePassiveAddress = null;
-
-    /**
-     * @var bool
-     */
-    protected $recurseManually = false;
-
-    /**
-     * @var bool
-     */
-    protected $utf8 = false;
-
-    /**
-     * @var array
-     */
-    protected $configurable = [
-        'host',
-        'port',
-        'username',
-        'password',
-        'ssl',
-        'timeout',
-        'root',
-        'permPrivate',
-        'permPublic',
-        'passive',
-        'transferMode',
-        'systemType',
-        'ignorePassiveAddress',
-        'recurseManually',
-        'utf8',
-        'enableTimestampsOnUnixListings',
-    ];
-
-    /**
-     * @var bool
-     */
-    protected $isPureFtpd;
-
-    /**
-     * Set the transfer mode.
-     *
-     * @param int $mode
-     *
-     * @return $this
-     */
-    public function setTransferMode($mode)
-    {
-        $this->transferMode = $mode;
-
-        return $this;
-    }
-
-    /**
-     * Set if Ssl is enabled.
-     *
-     * @param bool $ssl
-     *
-     * @return $this
-     */
-    public function setSsl($ssl)
-    {
-        $this->ssl = (bool) $ssl;
-
-        return $this;
-    }
-
-    /**
-     * Set if passive mode should be used.
-     *
-     * @param bool $passive
-     */
-    public function setPassive($passive = true)
-    {
-        $this->passive = $passive;
-    }
-
-    /**
-     * @param bool $ignorePassiveAddress
-     */
-    public function setIgnorePassiveAddress($ignorePassiveAddress)
-    {
-        $this->ignorePassiveAddress = $ignorePassiveAddress;
-    }
-
-    /**
-     * @param bool $recurseManually
-     */
-    public function setRecurseManually($recurseManually)
-    {
-        $this->recurseManually = $recurseManually;
-    }
-
-    /**
-     * @param bool $utf8
-     */
-    public function setUtf8($utf8)
-    {
-        $this->utf8 = (bool) $utf8;
-    }
-
-    /**
-     * Connect to the FTP server.
-     */
-    public function connect()
-    {
-        $tries = 3;
-        start_connecting:
-
-        if ($this->ssl) {
-            $this->connection = @ftp_ssl_connect($this->getHost(), $this->getPort(), $this->getTimeout());
-        } else {
-            $this->connection = @ftp_connect($this->getHost(), $this->getPort(), $this->getTimeout());
-        }
-
-        if ( ! $this->connection) {
-            $tries--;
-
-            if ($tries > 0) goto start_connecting;
-
-            throw new ConnectionRuntimeException('Could not connect to host: ' . $this->getHost() . ', port:' . $this->getPort());
-        }
-
-        $this->login();
-        $this->setUtf8Mode();
-        $this->setConnectionPassiveMode();
-        $this->setConnectionRoot();
-        $this->isPureFtpd = $this->isPureFtpdServer();
-    }
-
-    /**
-     * Set the connection to UTF-8 mode.
-     */
-    protected function setUtf8Mode()
-    {
-        if ($this->utf8) {
-            $response = ftp_raw($this->connection, "OPTS UTF8 ON");
-            if (!in_array(substr($response[0], 0, 3), ['200', '202'])) {
-                throw new ConnectionRuntimeException(
-                    'Could not set UTF-8 mode for connection: ' . $this->getHost() . '::' . $this->getPort()
-                );
-            }
-        }
-    }
-
-    /**
-     * Set the connections to passive mode.
-     *
-     * @throws ConnectionRuntimeException
-     */
-    protected function setConnectionPassiveMode()
-    {
-        if (is_bool($this->ignorePassiveAddress) && defined('FTP_USEPASVADDRESS')) {
-            ftp_set_option($this->connection, FTP_USEPASVADDRESS, ! $this->ignorePassiveAddress);
-        }
-
-        if ( ! ftp_pasv($this->connection, $this->passive)) {
-            throw new ConnectionRuntimeException(
-                'Could not set passive mode for connection: ' . $this->getHost() . '::' . $this->getPort()
-            );
-        }
-    }
-
-    /**
-     * Set the connection root.
-     */
-    protected function setConnectionRoot()
-    {
-        $root = $this->getRoot();
-        $connection = $this->connection;
-
-        if ($root && ! ftp_chdir($connection, $root)) {
-            throw new InvalidRootException('Root is invalid or does not exist: ' . $this->getRoot());
-        }
-
-        // Store absolute path for further reference.
-        // This is needed when creating directories and
-        // initial root was a relative path, else the root
-        // would be relative to the chdir'd path.
-        $this->root = ftp_pwd($connection);
-    }
-
-    /**
-     * Login.
-     *
-     * @throws ConnectionRuntimeException
-     */
-    protected function login()
-    {
-        set_error_handler(function () {
-        });
-        $isLoggedIn = ftp_login(
-            $this->connection,
-            $this->getUsername(),
-            $this->getPassword()
-        );
-        restore_error_handler();
-
-        if ( ! $isLoggedIn) {
-            $this->disconnect();
-            throw new ConnectionRuntimeException(
-                'Could not login with connection: ' . $this->getHost() . '::' . $this->getPort(
-                ) . ', username: ' . $this->getUsername()
-            );
-        }
-    }
-
-    /**
-     * Disconnect from the FTP server.
-     */
-    public function disconnect()
-    {
-        if ($this->hasFtpConnection()) {
-            @ftp_close($this->connection);
-        }
-
-        $this->connection = null;
-    }
-
-    /**
-     * @inheritdoc
-     */
-    public function write($path, $contents, Config $config)
-    {
-        $stream = fopen('php://temp', 'w+b');
-        fwrite($stream, $contents);
-        rewind($stream);
-        $result = $this->writeStream($path, $stream, $config);
-        fclose($stream);
-
-        if ($result === false) {
-            return false;
-        }
-
-        $result['contents'] = $contents;
-        $result['mimetype'] = $config->get('mimetype') ?: Util::guessMimeType($path, $contents);
-
-        return $result;
-    }
-
-    /**
-     * @inheritdoc
-     */
-    public function writeStream($path, $resource, Config $config)
-    {
-        $this->ensureDirectory(Util::dirname($path));
-
-        if ( ! ftp_fput($this->getConnection(), $path, $resource, $this->transferMode)) {
-            return false;
-        }
-
-        if ($visibility = $config->get('visibility')) {
-            $this->setVisibility($path, $visibility);
-        }
-
-        $type = 'file';
-
-        return compact('type', 'path', 'visibility');
-    }
-
-    /**
-     * @inheritdoc
-     */
-    public function update($path, $contents, Config $config)
-    {
-        return $this->write($path, $contents, $config);
-    }
-
-    /**
-     * @inheritdoc
-     */
-    public function updateStream($path, $resource, Config $config)
-    {
-        return $this->writeStream($path, $resource, $config);
-    }
-
-    /**
-     * @inheritdoc
-     */
-    public function rename($path, $newpath)
-    {
-        return ftp_rename($this->getConnection(), $path, $newpath);
-    }
-
-    /**
-     * @inheritdoc
-     */
-    public function delete($path)
-    {
-        return ftp_delete($this->getConnection(), $path);
-    }
-
-    /**
-     * @inheritdoc
-     */
-    public function deleteDir($dirname)
-    {
-        $connection = $this->getConnection();
-        $contents = array_reverse($this->listDirectoryContents($dirname, false));
-
-        foreach ($contents as $object) {
-            if ($object['type'] === 'file') {
-                if ( ! ftp_delete($connection, $object['path'])) {
-                    return false;
-                }
-            } elseif ( ! $this->deleteDir($object['path'])) {
-                return false;
-            }
-        }
-
-        return ftp_rmdir($connection, $dirname);
-    }
-
-    /**
-     * @inheritdoc
-     */
-    public function createDir($dirname, Config $config)
-    {
-        $connection = $this->getConnection();
-        $directories = explode('/', $dirname);
-
-        foreach ($directories as $directory) {
-            if (false === $this->createActualDirectory($directory, $connection)) {
-                $this->setConnectionRoot();
-
-                return false;
-            }
-
-            ftp_chdir($connection, $directory);
-        }
-
-        $this->setConnectionRoot();
-
-        return ['type' => 'dir', 'path' => $dirname];
-    }
-
-    /**
-     * Create a directory.
-     *
-     * @param string   $directory
-     * @param resource $connection
-     *
-     * @return bool
-     */
-    protected function createActualDirectory($directory, $connection)
-    {
-        // List the current directory
-        $listing = ftp_nlist($connection, '.') ?: [];
-
-        foreach ($listing as $key => $item) {
-            if (preg_match('~^\./.*~', $item)) {
-                $listing[$key] = substr($item, 2);
-            }
-        }
-
-        if (in_array($directory, $listing, true)) {
-            return true;
-        }
-
-        return (boolean) ftp_mkdir($connection, $directory);
-    }
-
-    /**
-     * @inheritdoc
-     */
-    public function getMetadata($path)
-    {
-        if ($path === '') {
-            return ['type' => 'dir', 'path' => ''];
-        }
-
-        if (@ftp_chdir($this->getConnection(), $path) === true) {
-            $this->setConnectionRoot();
-
-            return ['type' => 'dir', 'path' => $path];
-        }
-
-        $listing = $this->ftpRawlist('-A', $path);
-
-        if (empty($listing) || in_array('total 0', $listing, true)) {
-            return false;
-        }
-
-        if (preg_match('/.* not found/', $listing[0])) {
-            return false;
-        }
-
-        if (preg_match('/^total [0-9]*$/', $listing[0])) {
-            array_shift($listing);
-        }
-
-        return $this->normalizeObject($listing[0], '');
-    }
-
-    /**
-     * @inheritdoc
-     */
-    public function getMimetype($path)
-    {
-        if ( ! $metadata = $this->getMetadata($path)) {
-            return false;
-        }
-
-        $metadata['mimetype'] = MimeType::detectByFilename($path);
-
-        return $metadata;
-    }
-
-    /**
-     * @inheritdoc
-     */
-    public function getTimestamp($path)
-    {
-        $timestamp = ftp_mdtm($this->getConnection(), $path);
-
-        return ($timestamp !== -1) ? ['path' => $path, 'timestamp' => $timestamp] : false;
-    }
-
-    /**
-     * @inheritdoc
-     */
-    public function read($path)
-    {
-        if ( ! $object = $this->readStream($path)) {
-            return false;
-        }
-
-        $object['contents'] = stream_get_contents($object['stream']);
-        fclose($object['stream']);
-        unset($object['stream']);
-
-        return $object;
-    }
-
-    /**
-     * @inheritdoc
-     */
-    public function readStream($path)
-    {
-        $stream = fopen('php://temp', 'w+b');
-        $result = ftp_fget($this->getConnection(), $stream, $path, $this->transferMode);
-        rewind($stream);
-
-        if ( ! $result) {
-            fclose($stream);
-
-            return false;
-        }
-
-        return ['type' => 'file', 'path' => $path, 'stream' => $stream];
-    }
-
-    /**
-     * @inheritdoc
-     */
-    public function setVisibility($path, $visibility)
-    {
-        $mode = $visibility === AdapterInterface::VISIBILITY_PUBLIC ? $this->getPermPublic() : $this->getPermPrivate();
-
-        if ( ! ftp_chmod($this->getConnection(), $mode, $path)) {
-            return false;
-        }
-
-        return compact('path', 'visibility');
-    }
-
-    /**
-     * @inheritdoc
-     *
-     * @param string $directory
-     */
-    protected function listDirectoryContents($directory, $recursive = true)
-    {
-        if ($recursive && $this->recurseManually) {
-            return $this->listDirectoryContentsRecursive($directory);
-        }
-
-        $options = $recursive ? '-alnR' : '-aln';
-        $listing = $this->ftpRawlist($options, $directory);
-
-        return $listing ? $this->normalizeListing($listing, $directory) : [];
-    }
-
-    /**
-     * @inheritdoc
-     *
-     * @param string $directory
-     */
-    protected function listDirectoryContentsRecursive($directory)
-    {
-        $listing = $this->normalizeListing($this->ftpRawlist('-aln', $directory) ?: [], $directory);
-        $output = [];
-
-        foreach ($listing as $item) {
-            $output[] = $item;
-            if ($item['type'] !== 'dir') {
-                continue;
-            }
-            $output = array_merge($output, $this->listDirectoryContentsRecursive($item['path']));
-        }
-
-        return $output;
-    }
-
-    /**
-     * Check if the connection is open.
-     *
-     * @return bool
-     *
-     * @throws ConnectionErrorException
-     */
-    public function isConnected()
-    {
-        return $this->hasFtpConnection() && $this->getRawExecResponseCode('NOOP') === 200;
-    }
-
-    /**
-     * @return bool
-     */
-    protected function isPureFtpdServer()
-    {
-        $response = ftp_raw($this->connection, 'HELP');
-
-        return stripos(implode(' ', $response), 'Pure-FTPd') !== false;
-    }
-
-    /**
-     * The ftp_rawlist function with optional escaping.
-     *
-     * @param string $options
-     * @param string $path
-     *
-     * @return array
-     */
-    protected function ftpRawlist($options, $path)
-    {
-        $connection = $this->getConnection();
-
-        if ($this->isPureFtpd) {
-            $path = str_replace([' ', '[', ']'], ['\ ', '\\[', '\\]'], $path);
-        }
-
-        return ftp_rawlist($connection, $options . ' ' . $this->escapePath($path));
-    }
-
-    private function getRawExecResponseCode($command)
-    {
-        $response = @ftp_raw($this->connection, trim($command)) ?: [];
-
-        return (int) preg_replace('/\D/', '', implode(' ', (array) $response));
-    }
-
-    private function hasFtpConnection(): bool
-    {
-        return is_resource($this->connection) || $this->connection instanceof \FTP\Connection;
-    }
-}
\ No newline at end of file
diff --git a/src/Ported/Flysystem/Adapter/Local.php b/src/Ported/Flysystem/Adapter/Local.php
deleted file mode 100644
index 48b1d93..0000000
--- a/src/Ported/Flysystem/Adapter/Local.php
+++ /dev/null
@@ -1,537 +0,0 @@
-<?php
-
-namespace Drupal\flysystem\Ported\Flysystem\Adapter;
-
-use DirectoryIterator;
-use FilesystemIterator;
-use finfo as Finfo;
-use Drupal\flysystem\Ported\Flysystem\Config;
-use Drupal\flysystem\Ported\Flysystem\Exception;
-use Drupal\flysystem\Ported\Flysystem\NotSupportedException;
-use Drupal\flysystem\Ported\Flysystem\UnreadableFileException;
-use Drupal\flysystem\Ported\Flysystem\Util;
-use LogicException;
-use RecursiveDirectoryIterator;
-use RecursiveIteratorIterator;
-use SplFileInfo;
-
-/**
- * Ported from league/flysystem v1.
- * @see https://raw.githubusercontent.com/thephpleague/flysystem/1.x/src/Adapter/Local.php.
- */
-class Local extends AbstractAdapter
-{
-    /**
-     * @var int
-     */
-    const SKIP_LINKS = 0001;
-
-    /**
-     * @var int
-     */
-    const DISALLOW_LINKS = 0002;
-
-    /**
-     * @var array
-     */
-    protected static $permissions = [
-        'file' => [
-            'public' => 0644,
-            'private' => 0600,
-        ],
-        'dir' => [
-            'public' => 0755,
-            'private' => 0700,
-        ],
-    ];
-
-    /**
-     * @var string
-     */
-    protected $pathSeparator = DIRECTORY_SEPARATOR;
-
-    /**
-     * @var array
-     */
-    protected $permissionMap;
-
-    /**
-     * @var int
-     */
-    protected $writeFlags;
-
-    /**
-     * @var int
-     */
-    private $linkHandling;
-
-    /**
-     * Constructor.
-     *
-     * @param string $root
-     * @param int    $writeFlags
-     * @param int    $linkHandling
-     * @param array  $permissions
-     *
-     * @throws LogicException
-     */
-    public function __construct($root, $writeFlags = LOCK_EX, $linkHandling = self::DISALLOW_LINKS, array $permissions = [])
-    {
-        $root = is_link($root) ? realpath($root) : $root;
-        $this->permissionMap = array_replace_recursive(static::$permissions, $permissions);
-        $this->ensureDirectory($root);
-
-        if ( ! is_dir($root) || ! is_readable($root)) {
-            throw new LogicException('The root path ' . $root . ' is not readable.');
-        }
-
-        $this->setPathPrefix($root);
-        $this->writeFlags = $writeFlags;
-        $this->linkHandling = $linkHandling;
-    }
-
-    /**
-     * Ensure the root directory exists.
-     *
-     * @param string $root root directory path
-     *
-     * @return void
-     *
-     * @throws Exception in case the root directory can not be created
-     */
-    protected function ensureDirectory($root)
-    {
-        if ( ! is_dir($root)) {
-            $umask = umask(0);
-
-            if ( ! @mkdir($root, $this->permissionMap['dir']['public'], true)) {
-                $mkdirError = error_get_last();
-            }
-
-            umask($umask);
-            clearstatcache(false, $root);
-
-            if ( ! is_dir($root)) {
-                $errorMessage = isset($mkdirError['message']) ? $mkdirError['message'] : '';
-                throw new Exception(sprintf('Impossible to create the root directory "%s". %s', $root, $errorMessage));
-            }
-        }
-    }
-
-    /**
-     * @inheritdoc
-     */
-    public function has($path)
-    {
-        $location = $this->applyPathPrefix($path);
-
-        return file_exists($location);
-    }
-
-    /**
-     * @inheritdoc
-     */
-    public function write($path, $contents, Config $config)
-    {
-        $location = $this->applyPathPrefix($path);
-        $this->ensureDirectory(dirname($location));
-
-        if (($size = file_put_contents($location, $contents, $this->writeFlags)) === false) {
-            return false;
-        }
-
-        $type = 'file';
-        $result = compact('contents', 'type', 'size', 'path');
-
-        if ($visibility = $config->get('visibility')) {
-            $result['visibility'] = $visibility;
-            $this->setVisibility($path, $visibility);
-        }
-
-        return $result;
-    }
-
-    /**
-     * @inheritdoc
-     */
-    public function writeStream($path, $resource, Config $config)
-    {
-        $location = $this->applyPathPrefix($path);
-        $this->ensureDirectory(dirname($location));
-        $stream = fopen($location, 'w+b');
-
-        if ( ! $stream || stream_copy_to_stream($resource, $stream) === false || ! fclose($stream)) {
-            return false;
-        }
-
-        $type = 'file';
-        $result = compact('type', 'path');
-
-        if ($visibility = $config->get('visibility')) {
-            $this->setVisibility($path, $visibility);
-            $result['visibility'] = $visibility;
-        }
-
-        return $result;
-    }
-
-    /**
-     * @inheritdoc
-     */
-    public function readStream($path)
-    {
-        $location = $this->applyPathPrefix($path);
-        $stream = fopen($location, 'rb');
-
-        return ['type' => 'file', 'path' => $path, 'stream' => $stream];
-    }
-
-    /**
-     * @inheritdoc
-     */
-    public function updateStream($path, $resource, Config $config)
-    {
-        return $this->writeStream($path, $resource, $config);
-    }
-
-    /**
-     * @inheritdoc
-     */
-    public function update($path, $contents, Config $config)
-    {
-        $location = $this->applyPathPrefix($path);
-        $size = file_put_contents($location, $contents, $this->writeFlags);
-
-        if ($size === false) {
-            return false;
-        }
-
-        $type = 'file';
-
-        $result = compact('type', 'path', 'size', 'contents');
-
-        if ($visibility = $config->get('visibility')) {
-            $this->setVisibility($path, $visibility);
-            $result['visibility'] = $visibility;
-        }
-
-        return $result;
-    }
-
-    /**
-     * @inheritdoc
-     */
-    public function read($path)
-    {
-        $location = $this->applyPathPrefix($path);
-        $contents = @file_get_contents($location);
-
-        if ($contents === false) {
-            return false;
-        }
-
-        return ['type' => 'file', 'path' => $path, 'contents' => $contents];
-    }
-
-    /**
-     * @inheritdoc
-     */
-    public function rename($path, $newpath)
-    {
-        $location = $this->applyPathPrefix($path);
-        $destination = $this->applyPathPrefix($newpath);
-        $parentDirectory = $this->applyPathPrefix(Util::dirname($newpath));
-        $this->ensureDirectory($parentDirectory);
-
-        return rename($location, $destination);
-    }
-
-    /**
-     * @inheritdoc
-     */
-    public function copy($path, $newpath)
-    {
-        $location = $this->applyPathPrefix($path);
-        $destination = $this->applyPathPrefix($newpath);
-        $this->ensureDirectory(dirname($destination));
-
-        return copy($location, $destination);
-    }
-
-    /**
-     * @inheritdoc
-     */
-    public function delete($path)
-    {
-        $location = $this->applyPathPrefix($path);
-
-        return @unlink($location);
-    }
-
-    /**
-     * @inheritdoc
-     */
-    public function listContents($directory = '', $recursive = false)
-    {
-        $result = [];
-        $location = $this->applyPathPrefix($directory);
-
-        if ( ! is_dir($location)) {
-            return [];
-        }
-
-        $iterator = $recursive ? $this->getRecursiveDirectoryIterator($location) : $this->getDirectoryIterator($location);
-
-        foreach ($iterator as $file) {
-            $path = $this->getFilePath($file);
-
-            if (preg_match('#(^|/|\\\\)\.{1,2}$#', $path)) {
-                continue;
-            }
-
-            $result[] = $this->normalizeFileInfo($file);
-        }
-
-        unset($iterator);
-
-        return array_filter($result);
-    }
-
-    /**
-     * @inheritdoc
-     */
-    public function getMetadata($path)
-    {
-        $location = $this->applyPathPrefix($path);
-        clearstatcache(false, $location);
-        $info = new SplFileInfo($location);
-
-        return $this->normalizeFileInfo($info);
-    }
-
-    /**
-     * @inheritdoc
-     */
-    public function getSize($path)
-    {
-        return $this->getMetadata($path);
-    }
-
-    /**
-     * @inheritdoc
-     */
-    public function getMimetype($path)
-    {
-        $location = $this->applyPathPrefix($path);
-        $finfo = new Finfo(FILEINFO_MIME_TYPE);
-        $mimetype = $finfo->file($location);
-
-        if (in_array($mimetype, ['application/octet-stream', 'inode/x-empty', 'application/x-empty'])) {
-            $mimetype = Util\MimeType::detectByFilename($location);
-        }
-
-        return ['path' => $path, 'type' => 'file', 'mimetype' => $mimetype];
-    }
-
-    /**
-     * @inheritdoc
-     */
-    public function getTimestamp($path)
-    {
-        return $this->getMetadata($path);
-    }
-
-    /**
-     * @inheritdoc
-     */
-    public function getVisibility($path)
-    {
-        $location = $this->applyPathPrefix($path);
-        clearstatcache(false, $location);
-        $permissions = octdec(substr(sprintf('%o', fileperms($location)), -4));
-        $type = is_dir($location) ? 'dir' : 'file';
-
-        foreach ($this->permissionMap[$type] as $visibility => $visibilityPermissions) {
-            if ($visibilityPermissions == $permissions) {
-                return compact('path', 'visibility');
-            }
-        }
-
-        $visibility = substr(sprintf('%o', fileperms($location)), -4);
-
-        return compact('path', 'visibility');
-    }
-
-    /**
-     * @inheritdoc
-     */
-    public function setVisibility($path, $visibility)
-    {
-        $location = $this->applyPathPrefix($path);
-        $type = is_dir($location) ? 'dir' : 'file';
-        $success = chmod($location, $this->permissionMap[$type][$visibility]);
-
-        if ($success === false) {
-            return false;
-        }
-
-        return compact('path', 'visibility');
-    }
-
-    /**
-     * @inheritdoc
-     */
-    public function createDir($dirname, Config $config)
-    {
-        $location = $this->applyPathPrefix($dirname);
-        $umask = umask(0);
-        $visibility = $config->get('visibility', 'public');
-        $return = ['path' => $dirname, 'type' => 'dir'];
-
-        if ( ! is_dir($location)) {
-            if (false === @mkdir($location, $this->permissionMap['dir'][$visibility], true)
-                || false === is_dir($location)) {
-                $return = false;
-            }
-        }
-
-        umask($umask);
-
-        return $return;
-    }
-
-    /**
-     * @inheritdoc
-     */
-    public function deleteDir($dirname)
-    {
-        $location = $this->applyPathPrefix($dirname);
-
-        if ( ! is_dir($location)) {
-            return false;
-        }
-
-        $contents = $this->getRecursiveDirectoryIterator($location, RecursiveIteratorIterator::CHILD_FIRST);
-
-        /** @var SplFileInfo $file */
-        foreach ($contents as $file) {
-            $this->guardAgainstUnreadableFileInfo($file);
-            $this->deleteFileInfoObject($file);
-        }
-
-        unset($contents);
-
-        return rmdir($location);
-    }
-
-    /**
-     * @param SplFileInfo $file
-     */
-    protected function deleteFileInfoObject(SplFileInfo $file)
-    {
-        switch ($file->getType()) {
-            case 'dir':
-                rmdir($file->getRealPath());
-                break;
-            case 'link':
-                unlink($file->getPathname());
-                break;
-            default:
-                unlink($file->getRealPath());
-        }
-    }
-
-    /**
-     * Normalize the file info.
-     *
-     * @param SplFileInfo $file
-     *
-     * @return array|void
-     *
-     * @throws NotSupportedException
-     */
-    protected function normalizeFileInfo(SplFileInfo $file)
-    {
-        if ( ! $file->isLink()) {
-            return $this->mapFileInfo($file);
-        }
-
-        if ($this->linkHandling & self::DISALLOW_LINKS) {
-            throw NotSupportedException::forLink($file);
-        }
-    }
-
-    /**
-     * Get the normalized path from a SplFileInfo object.
-     *
-     * @param SplFileInfo $file
-     *
-     * @return string
-     */
-    protected function getFilePath(SplFileInfo $file)
-    {
-        $location = $file->getPathname();
-        $path = $this->removePathPrefix($location);
-
-        return trim(str_replace('\\', '/', $path), '/');
-    }
-
-    /**
-     * @param string $path
-     * @param int    $mode
-     *
-     * @return RecursiveIteratorIterator
-     */
-    protected function getRecursiveDirectoryIterator($path, $mode = RecursiveIteratorIterator::SELF_FIRST)
-    {
-        return new RecursiveIteratorIterator(
-            new RecursiveDirectoryIterator($path, FilesystemIterator::SKIP_DOTS),
-            $mode
-        );
-    }
-
-    /**
-     * @param string $path
-     *
-     * @return DirectoryIterator
-     */
-    protected function getDirectoryIterator($path)
-    {
-        $iterator = new DirectoryIterator($path);
-
-        return $iterator;
-    }
-
-    /**
-     * @param SplFileInfo $file
-     *
-     * @return array
-     */
-    protected function mapFileInfo(SplFileInfo $file)
-    {
-        $normalized = [
-            'type' => $file->getType(),
-            'path' => $this->getFilePath($file),
-        ];
-
-        $normalized['timestamp'] = $file->getMTime();
-
-        if ($normalized['type'] === 'file') {
-            $normalized['size'] = $file->getSize();
-        }
-
-        return $normalized;
-    }
-
-    /**
-     * @param SplFileInfo $file
-     *
-     * @throws UnreadableFileException
-     */
-    protected function guardAgainstUnreadableFileInfo(SplFileInfo $file)
-    {
-        if ( ! $file->isReadable()) {
-            throw UnreadableFileException::forFileInfo($file);
-        }
-    }
-}
diff --git a/src/Ported/Flysystem/Adapter/NullAdapter.php b/src/Ported/Flysystem/Adapter/NullAdapter.php
deleted file mode 100644
index d2f8f66..0000000
--- a/src/Ported/Flysystem/Adapter/NullAdapter.php
+++ /dev/null
@@ -1,148 +0,0 @@
-<?php
-
-namespace Drupal\flysystem\Ported\Flysystem\Adapter;
-
-use Drupal\flysystem\Ported\Flysystem\Adapter\Polyfill\StreamedCopyTrait;
-use Drupal\flysystem\Ported\Flysystem\Adapter\Polyfill\StreamedTrait;
-use Drupal\flysystem\Ported\Flysystem\Config;
-
-/**
- * Ported from league/flysystem v1.
- * @see https://raw.githubusercontent.com/thephpleague/flysystem/1.x/src/Adapter/NullAdapter.php.
- */
-class NullAdapter extends AbstractAdapter
-{
-    use StreamedTrait;
-    use StreamedCopyTrait;
-
-    /**
-     * Check whether a file is present.
-     *
-     * @param string $path
-     *
-     * @return bool
-     */
-    public function has($path)
-    {
-        return false;
-    }
-
-    /**
-     * @inheritdoc
-     */
-    public function write($path, $contents, Config $config)
-    {
-        $type = 'file';
-        $result = compact('contents', 'type', 'path');
-
-        if ($visibility = $config->get('visibility')) {
-            $result['visibility'] = $visibility;
-        }
-
-        return $result;
-    }
-
-    /**
-     * @inheritdoc
-     */
-    public function update($path, $contents, Config $config)
-    {
-        return false;
-    }
-
-    /**
-     * @inheritdoc
-     */
-    public function read($path)
-    {
-        return false;
-    }
-
-    /**
-     * @inheritdoc
-     */
-    public function rename($path, $newpath)
-    {
-        return false;
-    }
-
-    /**
-     * @inheritdoc
-     */
-    public function delete($path)
-    {
-        return false;
-    }
-
-    /**
-     * @inheritdoc
-     */
-    public function listContents($directory = '', $recursive = false)
-    {
-        return [];
-    }
-
-    /**
-     * @inheritdoc
-     */
-    public function getMetadata($path)
-    {
-        return false;
-    }
-
-    /**
-     * @inheritdoc
-     */
-    public function getSize($path)
-    {
-        return false;
-    }
-
-    /**
-     * @inheritdoc
-     */
-    public function getMimetype($path)
-    {
-        return false;
-    }
-
-    /**
-     * @inheritdoc
-     */
-    public function getTimestamp($path)
-    {
-        return false;
-    }
-
-    /**
-     * @inheritdoc
-     */
-    public function getVisibility($path)
-    {
-        return false;
-    }
-
-    /**
-     * @inheritdoc
-     */
-    public function setVisibility($path, $visibility)
-    {
-        return compact('visibility');
-    }
-
-    /**
-     * @inheritdoc
-     */
-    public function createDir($dirname, Config $config)
-    {
-        return ['path' => $dirname, 'type' => 'dir'];
-    }
-
-    /**
-     * @inheritdoc
-     */
-    public function deleteDir($dirname)
-    {
-        return false;
-    }
-}
diff --git a/src/Ported/Flysystem/Adapter/Polyfill/StreamedCopyTrait.php b/src/Ported/Flysystem/Adapter/Polyfill/StreamedCopyTrait.php
deleted file mode 100644
index af88528..0000000
--- a/src/Ported/Flysystem/Adapter/Polyfill/StreamedCopyTrait.php
+++ /dev/null
@@ -1,55 +0,0 @@
-<?php
-
-namespace Drupal\flysystem\Ported\Flysystem\Adapter\Polyfill;
-
-use Drupal\flysystem\Ported\Flysystem\Config;
-
-/**
- * Ported from league/flysystem v1.
- * @see https://raw.githubusercontent.com/thephpleague/flysystem/1.x/src/Adapter/Polyfill/StreamedCopyTrait.php.
- */
-trait StreamedCopyTrait
-{
-    /**
-     * Copy a file.
-     *
-     * @param string $path
-     * @param string $newpath
-     *
-     * @return bool
-     */
-    public function copy($path, $newpath)
-    {
-        $response = $this->readStream($path);
-
-        if ($response === false || ! is_resource($response['stream'])) {
-            return false;
-        }
-
-        $result = $this->writeStream($newpath, $response['stream'], new Config());
-
-        if ($result !== false && is_resource($response['stream'])) {
-            fclose($response['stream']);
-        }
-
-        return $result !== false;
-    }
-
-    // Required abstract method
-
-    /**
-     * @param string $path
-     *
-     * @return resource
-     */
-    abstract public function readStream($path);
-
-    /**
-     * @param string   $path
-     * @param resource $resource
-     * @param Config   $config
-     *
-     * @return resource
-     */
-    abstract public function writeStream($path, $resource, Config $config);
-}
\ No newline at end of file
diff --git a/src/Ported/Flysystem/Adapter/Polyfill/StreamedReadingTrait.php b/src/Ported/Flysystem/Adapter/Polyfill/StreamedReadingTrait.php
deleted file mode 100644
index 58220ee..0000000
--- a/src/Ported/Flysystem/Adapter/Polyfill/StreamedReadingTrait.php
+++ /dev/null
@@ -1,47 +0,0 @@
-<?php
-
-namespace Drupal\flysystem\Ported\Flysystem\Adapter\Polyfill;
-
-/**
- * Ported from league/flysystem v1.
- * @see https://raw.githubusercontent.com/thephpleague/flysystem/1.x/src/Adapter/Polyfill/StreamedReadingTrait.php.
- *
- * A helper for adapters that only handle strings to provide read streams.
- */
-trait StreamedReadingTrait
-{
-    /**
-     * Reads a file as a stream.
-     *
-     * @param string $path
-     *
-     * @return array|false
-     *
-     * @see Drupal\flysystem\Ported\Flysystem\ReadingInterface::readStream()
-     */
-    public function readStream($path)
-    {
-        if ( ! $data = $this->read($path)) {
-            return false;
-        }
-
-        $stream = fopen('php://temp', 'w+b');
-        fwrite($stream, $data['contents']);
-        rewind($stream);
-        $data['stream'] = $stream;
-        unset($data['contents']);
-
-        return $data;
-    }
-
-    /**
-     * Reads a file.
-     *
-     * @param string $path
-     *
-     * @return array|false
-     *
-     * @see Drupal\flysystem\Ported\Flysystem\ReadingInterface::read()
-     */
-    abstract public function read($path);
-}
\ No newline at end of file
diff --git a/src/Ported/Flysystem/Adapter/Polyfill/StreamedTrait.php b/src/Ported/Flysystem/Adapter/Polyfill/StreamedTrait.php
deleted file mode 100644
index bacbaf8..0000000
--- a/src/Ported/Flysystem/Adapter/Polyfill/StreamedTrait.php
+++ /dev/null
@@ -1,13 +0,0 @@
-<?php
-
-namespace Drupal\flysystem\Ported\Flysystem\Adapter\Polyfill;
-
-/**
- * Ported from league/flysystem v1.
- * @see https://raw.githubusercontent.com/thephpleague/flysystem/1.x/src/Adapter/Polyfill/StreamedTrait.php.
- */
-trait StreamedTrait
-{
-    use StreamedReadingTrait;
-    use StreamedWritingTrait;
-}
\ No newline at end of file
diff --git a/src/Ported/Flysystem/Adapter/Polyfill/StreamedWritingTrait.php b/src/Ported/Flysystem/Adapter/Polyfill/StreamedWritingTrait.php
deleted file mode 100644
index a9686a4..0000000
--- a/src/Ported/Flysystem/Adapter/Polyfill/StreamedWritingTrait.php
+++ /dev/null
@@ -1,64 +0,0 @@
-<?php
-
-namespace Drupal\flysystem\Ported\Flysystem\Adapter\Polyfill;
-
-use Drupal\flysystem\Ported\Flysystem\Config;
-use Drupal\flysystem\Ported\Flysystem\Util;
-
-/**
- * Ported from league/flysystem v1.
- * @see https://raw.githubusercontent.com/thephpleague/flysystem/1.x/src/Adapter/Polyfill/StreamedWritingTrait.php.
- */
-trait StreamedWritingTrait
-{
-    /**
-     * Stream fallback delegator.
-     *
-     * @param string   $path
-     * @param resource $resource
-     * @param Config   $config
-     * @param string   $fallback
-     *
-     * @return mixed fallback result
-     */
-    protected function stream($path, $resource, Config $config, $fallback)
-    {
-        Util::rewindStream($resource);
-        $contents = stream_get_contents($resource);
-        $fallbackCall = [$this, $fallback];
-
-        return call_user_func($fallbackCall, $path, $contents, $config);
-    }
-
-    /**
-     * Write using a stream.
-     *
-     * @param string   $path
-     * @param resource $resource
-     * @param Config   $config
-     *
-     * @return mixed false or file metadata
-     */
-    public function writeStream($path, $resource, Config $config)
-    {
-        return $this->stream($path, $resource, $config, 'write');
-    }
-
-    /**
-     * Update a file using a stream.
-     *
-     * @param string   $path
-     * @param resource $resource
-     * @param Config   $config   Config object or visibility setting
-     *
-     * @return mixed false of file metadata
-     */
-    public function updateStream($path, $resource, Config $config)
-    {
-        return $this->stream($path, $resource, $config, 'update');
-    }
-
-    // Required abstract methods
-    abstract public function write($pash, $contents, Config $config);
-    abstract public function update($pash, $contents, Config $config);
-}
\ No newline at end of file
diff --git a/src/Ported/Flysystem/AdapterInterface.php b/src/Ported/Flysystem/AdapterInterface.php
deleted file mode 100644
index 458399b..0000000
--- a/src/Ported/Flysystem/AdapterInterface.php
+++ /dev/null
@@ -1,122 +0,0 @@
-<?php
-
-namespace Drupal\flysystem\Ported\Flysystem;
-
-/**
- * Ported from league/flysystem v1
- * @see https://raw.githubusercontent.com/thephpleague/flysystem/1.x/src/AdapterInterface.php
- */
-interface AdapterInterface extends ReadInterface
-{
-    /**
-     * @const  VISIBILITY_PUBLIC  public visibility
-     */
-    const VISIBILITY_PUBLIC = 'public';
-
-    /**
-     * @const  VISIBILITY_PRIVATE  private visibility
-     */
-    const VISIBILITY_PRIVATE = 'private';
-
-    /**
-     * Write a new file.
-     *
-     * @param string $path
-     * @param string $contents
-     * @param Config $config   Config object
-     *
-     * @return array|false false on failure file meta data on success
-     */
-    public function write($path, $contents, Config $config);
-
-    /**
-     * Write a new file using a stream.
-     *
-     * @param string   $path
-     * @param resource $resource
-     * @param Config   $config   Config object
-     *
-     * @return array|false false on failure file meta data on success
-     */
-    public function writeStream($path, $resource, Config $config);
-
-    /**
-     * Update a file.
-     *
-     * @param string $path
-     * @param string $contents
-     * @param Config $config   Config object
-     *
-     * @return array|false false on failure file meta data on success
-     */
-    public function update($path, $contents, Config $config);
-
-    /**
-     * Update a file using a stream.
-     *
-     * @param string   $path
-     * @param resource $resource
-     * @param Config   $config   Config object
-     *
-     * @return array|false false on failure file meta data on success
-     */
-    public function updateStream($path, $resource, Config $config);
-
-    /**
-     * Rename a file.
-     *
-     * @param string $path
-     * @param string $newpath
-     *
-     * @return bool
-     */
-    public function rename($path, $newpath);
-
-    /**
-     * Copy a file.
-     *
-     * @param string $path
-     * @param string $newpath
-     *
-     * @return bool
-     */
-    public function copy($path, $newpath);
-
-    /**
-     * Delete a file.
-     *
-     * @param string $path
-     *
-     * @return bool
-     */
-    public function delete($path);
-
-    /**
-     * Delete a directory.
-     *
-     * @param string $dirname
-     *
-     * @return bool
-     */
-    public function deleteDir($dirname);
-
-    /**
-     * Create a directory.
-     *
-     * @param string $dirname directory name
-     * @param Config $config
-     *
-     * @return array|false
-     */
-    public function createDir($dirname, Config $config);
-
-    /**
-     * Set the visibility for a file.
-     *
-     * @param string $path
-     * @param string $visibility
-     *
-     * @return array|false file meta data
-     */
-    public function setVisibility($path, $visibility);
-}
\ No newline at end of file
diff --git a/src/Ported/Flysystem/Config.php b/src/Ported/Flysystem/Config.php
deleted file mode 100644
index 075d339..0000000
--- a/src/Ported/Flysystem/Config.php
+++ /dev/null
@@ -1,111 +0,0 @@
-<?php
-
-namespace Drupal\flysystem\Ported\Flysystem;
-
-/**
- * Ported from league/flysystem v1
- * @see https://raw.githubusercontent.com/thephpleague/flysystem/1.x/src/Config.php.
- */
-class Config
-{
-    /**
-     * @var array
-     */
-    protected $settings = [];
-
-    /**
-     * @var Config|null
-     */
-    protected $fallback;
-
-    /**
-     * Constructor.
-     *
-     * @param array $settings
-     */
-    public function __construct(array $settings = [])
-    {
-        $this->settings = $settings;
-    }
-
-    /**
-     * Get a setting.
-     *
-     * @param string $key
-     * @param mixed  $default
-     *
-     * @return mixed config setting or default when not found
-     */
-    public function get($key, $default = null)
-    {
-        if ( ! array_key_exists($key, $this->settings)) {
-            return $this->getDefault($key, $default);
-        }
-
-        return $this->settings[$key];
-    }
-
-    /**
-     * Check if an item exists by key.
-     *
-     * @param string $key
-     *
-     * @return bool
-     */
-    public function has($key)
-    {
-        if (array_key_exists($key, $this->settings)) {
-            return true;
-        }
-
-        return $this->fallback instanceof Config
-            ? $this->fallback->has($key)
-            : false;
-    }
-
-    /**
-     * Try to retrieve a default setting from a config fallback.
-     *
-     * @param string $key
-     * @param mixed  $default
-     *
-     * @return mixed config setting or default when not found
-     */
-    protected function getDefault($key, $default)
-    {
-        if ( ! $this->fallback) {
-            return $default;
-        }
-
-        return $this->fallback->get($key, $default);
-    }
-
-    /**
-     * Set a setting.
-     *
-     * @param string $key
-     * @param mixed  $value
-     *
-     * @return $this
-     */
-    public function set($key, $value)
-    {
-        $this->settings[$key] = $value;
-
-        return $this;
-    }
-
-    /**
-     * Set the fallback.
-     *
-     * @param Config $fallback
-     *
-     * @return $this
-     */
-    public function setFallback(Config $fallback)
-    {
-        $this->fallback = $fallback;
-
-        return $this;
-    }
-}
\ No newline at end of file
diff --git a/src/Ported/Flysystem/ConfigAwareTrait.php b/src/Ported/Flysystem/ConfigAwareTrait.php
deleted file mode 100644
index 8fdbf0c..0000000
--- a/src/Ported/Flysystem/ConfigAwareTrait.php
+++ /dev/null
@@ -1,51 +0,0 @@
-<?php
-
-namespace Drupal\flysystem\Ported\Flysystem;
-
-use Drupal\flysystem\Ported\Flysystem\Config;
-/**
- * Ported from league/flysystem v1
- * @see https://raw.githubusercontent.com/thephpleague/flysystem/1.x/src/ConfigAwareTrait.php.
- */
-trait ConfigAwareTrait
-{
-    /**
-     * @var \Drupal\flysystem\Ported\Flysystem\Config
-     */
-    protected $config;
-
-    /**
-     * Set the config.
-     *
-     * @param Config|array|null $config
-     */
-    protected function setConfig($config)
-    {
-        $this->config = $config ? Util::ensureConfig($config) : new Config;
-    }
-
-    /**
-     * Get the Config.
-     *
-     * @return Config config object
-     */
-    public function getConfig()
-    {
-        return $this->config;
-    }
-
-    /**
-     * Convert a config array to a Config object with the correct fallback.
-     *
-     * @param array $config
-     *
-     * @return \Drupal\flysystem\Ported\Flysystem\Config
-     */
-    protected function prepareConfig(array $config)
-    {
-        $config = new Config($config);
-        $config->setFallback($this->getConfig());
-
-        return $config;
-    }
-}
\ No newline at end of file
diff --git a/src/Ported/Flysystem/ConnectionErrorException.php b/src/Ported/Flysystem/ConnectionErrorException.php
deleted file mode 100644
index c3dd0ce..0000000
--- a/src/Ported/Flysystem/ConnectionErrorException.php
+++ /dev/null
@@ -1,13 +0,0 @@
-<?php
-
-namespace Drupal\flysystem\Ported\Flysystem;
-
-use ErrorException;
-
-/**
- * Ported from league/flysystem v1
- * @see https://raw.githubusercontent.com/thephpleague/flysystem/1.x/src/ConnectionErrorException.php.
- */
-class ConnectionErrorException extends ErrorException implements FilesystemException
-{
-}
\ No newline at end of file
diff --git a/src/Ported/Flysystem/ConnectionRuntimeException.php b/src/Ported/Flysystem/ConnectionRuntimeException.php
deleted file mode 100644
index 5aa7be4..0000000
--- a/src/Ported/Flysystem/ConnectionRuntimeException.php
+++ /dev/null
@@ -1,13 +0,0 @@
-<?php
-
-namespace Drupal\flysystem\Ported\Flysystem;
-
-use RuntimeException;
-
-/**
- * Ported from league/flysystem v1
- * @see https://raw.githubusercontent.com/thephpleague/flysystem/1.x/src/ConnectionRuntimeException.php.
- */
-class ConnectionRuntimeException extends RuntimeException implements FilesystemException
-{
-}
\ No newline at end of file
diff --git a/src/Ported/Flysystem/Exception.php b/src/Ported/Flysystem/Exception.php
deleted file mode 100644
index 6c22a8a..0000000
--- a/src/Ported/Flysystem/Exception.php
+++ /dev/null
@@ -1,12 +0,0 @@
-<?php
-
-namespace Drupal\flysystem\Ported\Flysystem;
-
-/**
- * Ported from league/flysystem v1.
- * @see https://raw.githubusercontent.com/thephpleague/flysystem/1.x/src/Exception.php.
- */
-class Exception extends \Exception implements FilesystemException
-{
-    //
-}
\ No newline at end of file
diff --git a/src/Ported/Flysystem/FileNotFoundException.php b/src/Ported/Flysystem/FileNotFoundException.php
deleted file mode 100644
index c78d1ac..0000000
--- a/src/Ported/Flysystem/FileNotFoundException.php
+++ /dev/null
@@ -1,41 +0,0 @@
-<?php
-
-namespace Drupal\flysystem\Ported\Flysystem;
-
-use Exception as BaseException;
-
-/**
- * Ported from league/flysystem v1.
- * @see https://raw.githubusercontent.com/thephpleague/flysystem/1.x/src/FileNotFoundException.php.
- */
-class FileNotFoundException extends Exception
-{
-    /**
-     * @var string
-     */
-    protected $path;
-
-    /**
-     * Constructor.
-     *
-     * @param string     $path
-     * @param int        $code
-     * @param \Exception $previous
-     */
-    public function __construct($path, $code = 0, BaseException $previous = null)
-    {
-        $this->path = $path;
-
-        parent::__construct('File not found at path: ' . $this->getPath(), $code, $previous);
-    }
-
-    /**
-     * Get the path which was not found.
-     *
-     * @return string
-     */
-    public function getPath()
-    {
-        return $this->path;
-    }
-}
\ No newline at end of file
diff --git a/src/Ported/Flysystem/Filesystem.php b/src/Ported/Flysystem/Filesystem.php
deleted file mode 100644
index de24410..0000000
--- a/src/Ported/Flysystem/Filesystem.php
+++ /dev/null
@@ -1,413 +0,0 @@
-<?php
-
-namespace Drupal\flysystem\Ported\Flysystem;
-
-#use InvalidArgumentException;
-use Drupal\flysystem\Ported\Flysystem\Adapter\CanOverwriteFiles;
-use Drupal\flysystem\Ported\Flysystem\Plugin\PluggableTrait;
-use Drupal\flysystem\Ported\Flysystem\Util\ContentListingFormatter;
-use Drupal\flysystem\Ported\Flysystem\ConfigAwareTrait;
-
-/**
- * Ported from league/flysystem v1.
- * @see https://raw.githubusercontent.com/thephpleague/flysystem/1.x/src/Filesystem.php.
- *
- * @method void        emptyDir(string $dirname)
- * @method array|false getWithMetadata(string $path, string[] $metadata)
- * @method bool        forceCopy(string $path, string $newpath)
- * @method bool        forceRename(string $path, string $newpath)
- * @method array       listFiles(string $path = '', boolean $recursive = false)
- * @method string[]    listPaths(string $path = '', boolean $recursive = false)
- * @method array       listWith(string[] $keys = [], $directory = '', $recursive = false)
- */
-class Filesystem implements FilesystemInterface
-{
-    use PluggableTrait;
-    use ConfigAwareTrait;
-
-    /**
-     * @var AdapterInterface
-     */
-    protected $adapter;
-
-    /**
-     * Constructor.
-     *
-     * @param AdapterInterface $adapter
-     * @param Config|array     $config
-     */
-    public function __construct(AdapterInterface $adapter, $config = null)
-    {
-        $this->adapter = $adapter;
-        $this->setConfig($config);
-    }
-
-    /**
-     * Get the Adapter.
-     *
-     * @return AdapterInterface adapter
-     */
-    public function getAdapter()
-    {
-        return $this->adapter;
-    }
-
-    /**
-     * @inheritdoc
-     */
-    public function has($path)
-    {
-        $path = Util::normalizePath($path);
-
-        return strlen($path) === 0 ? false : (bool) $this->getAdapter()->has($path);
-    }
-
-    /**
-     * @inheritdoc
-     */
-    public function write($path, $contents, array $config = [])
-    {
-        $path = Util::normalizePath($path);
-        $this->assertAbsent($path);
-        $config = $this->prepareConfig($config);
-
-        return (bool) $this->getAdapter()->write($path, $contents, $config);
-    }
-
-    /**
-     * @inheritdoc
-     */
-    public function writeStream($path, $resource, array $config = [])
-    {
-        if ( ! is_resource($resource) || get_resource_type($resource) !== 'stream') {
-            throw new \InvalidArgumentException(__METHOD__ . ' expects argument #2 to be a valid resource.');
-        }
-
-        $path = Util::normalizePath($path);
-        $this->assertAbsent($path);
-        $config = $this->prepareConfig($config);
-
-        Util::rewindStream($resource);
-
-        return (bool) $this->getAdapter()->writeStream($path, $resource, $config);
-    }
-
-    /**
-     * @inheritdoc
-     */
-    public function put($path, $contents, array $config = [])
-    {
-        $path = Util::normalizePath($path);
-        $config = $this->prepareConfig($config);
-
-        if ( ! $this->getAdapter() instanceof CanOverwriteFiles && $this->has($path)) {
-            return (bool) $this->getAdapter()->update($path, $contents, $config);
-        }
-
-        return (bool) $this->getAdapter()->write($path, $contents, $config);
-    }
-
-    /**
-     * @inheritdoc
-     */
-    public function putStream($path, $resource, array $config = [])
-    {
-        if ( ! is_resource($resource) || get_resource_type($resource) !== 'stream') {
-            throw new \InvalidArgumentException(__METHOD__ . ' expects argument #2 to be a valid resource.');
-        }
-
-        $path = Util::normalizePath($path);
-        $config = $this->prepareConfig($config);
-        Util::rewindStream($resource);
-
-        if ( ! $this->getAdapter() instanceof CanOverwriteFiles && $this->has($path)) {
-            return (bool) $this->getAdapter()->updateStream($path, $resource, $config);
-        }
-
-        return (bool) $this->getAdapter()->writeStream($path, $resource, $config);
-    }
-
-    /**
-     * @inheritdoc
-     */
-    public function readAndDelete($path)
-    {
-        $path = Util::normalizePath($path);
-        $this->assertPresent($path);
-        $contents = $this->read($path);
-
-        if ($contents === false) {
-            return false;
-        }
-
-        $this->delete($path);
-
-        return $contents;
-    }
-
-    /**
-     * @inheritdoc
-     */
-    public function update($path, $contents, array $config = [])
-    {
-        $path = Util::normalizePath($path);
-        $config = $this->prepareConfig($config);
-
-        $this->assertPresent($path);
-
-        return (bool) $this->getAdapter()->update($path, $contents, $config);
-    }
-
-    /**
-     * @inheritdoc
-     */
-    public function updateStream($path, $resource, array $config = [])
-    {
-        if ( ! is_resource($resource) || get_resource_type($resource) !== 'stream') {
-            throw new \InvalidArgumentException(__METHOD__ . ' expects argument #2 to be a valid resource.');
-        }
-
-        $path = Util::normalizePath($path);
-        $config = $this->prepareConfig($config);
-        $this->assertPresent($path);
-        Util::rewindStream($resource);
-
-        return (bool) $this->getAdapter()->updateStream($path, $resource, $config);
-    }
-
-    /**
-     * @inheritdoc
-     */
-    public function read($path)
-    {
-        $path = Util::normalizePath($path);
-        $this->assertPresent($path);
-
-        if ( ! ($object = $this->getAdapter()->read($path))) {
-            return false;
-        }
-
-        return $object['contents'];
-    }
-
-    /**
-     * @inheritdoc
-     */
-    public function readStream($path)
-    {
-        $path = Util::normalizePath($path);
-        $this->assertPresent($path);
-
-        if ( ! $object = $this->getAdapter()->readStream($path)) {
-            return false;
-        }
-
-        return $object['stream'];
-    }
-
-    /**
-     * @inheritdoc
-     */
-    public function rename($path, $newpath)
-    {
-        $path = Util::normalizePath($path);
-        $newpath = Util::normalizePath($newpath);
-        $this->assertPresent($path);
-        $this->assertAbsent($newpath);
-
-        return (bool) $this->getAdapter()->rename($path, $newpath);
-    }
-
-    /**
-     * @inheritdoc
-     */
-    public function copy($path, $newpath)
-    {
-        $path = Util::normalizePath($path);
-        $newpath = Util::normalizePath($newpath);
-        $this->assertPresent($path);
-        $this->assertAbsent($newpath);
-
-        return $this->getAdapter()->copy($path, $newpath);
-    }
-
-    /**
-     * @inheritdoc
-     */
-    public function delete($path)
-    {
-        $path = Util::normalizePath($path);
-        $this->assertPresent($path);
-
-        return $this->getAdapter()->delete($path);
-    }
-
-    /**
-     * @inheritdoc
-     */
-    public function deleteDir($dirname)
-    {
-        $dirname = Util::normalizePath($dirname);
-
-        if ($dirname === '') {
-            throw new RootViolationException('Root directories can not be deleted.');
-        }
-
-        return (bool) $this->getAdapter()->deleteDir($dirname);
-    }
-
-    /**
-     * @inheritdoc
-     */
-    public function createDir($dirname, array $config = [])
-    {
-        $dirname = Util::normalizePath($dirname);
-        $config = $this->prepareConfig($config);
-
-        return (bool) $this->getAdapter()->createDir($dirname, $config);
-    }
-
-    /**
-     * @inheritdoc
-     */
-    public function listContents($directory = '', $recursive = false)
-    {
-        $directory = Util::normalizePath($directory);
-        $contents = $this->getAdapter()->listContents($directory, $recursive);
-
-        return (new ContentListingFormatter($directory, $recursive, $this->config->get('case_sensitive', true)))
-            ->formatListing($contents);
-    }
-
-    /**
-     * @inheritdoc
-     */
-    public function getMimetype($path)
-    {
-        $path = Util::normalizePath($path);
-        $this->assertPresent($path);
-
-        if (( ! $object = $this->getAdapter()->getMimetype($path)) || ! array_key_exists('mimetype', $object)) {
-            return false;
-        }
-
-        return $object['mimetype'];
-    }
-
-    /**
-     * @inheritdoc
-     */
-    public function getTimestamp($path)
-    {
-        $path = Util::normalizePath($path);
-        $this->assertPresent($path);
-
-        if (( ! $object = $this->getAdapter()->getTimestamp($path)) || ! array_key_exists('timestamp', $object)) {
-            return false;
-        }
-
-        return (int) $object['timestamp'];
-    }
-
-    /**
-     * @inheritdoc
-     */
-    public function getVisibility($path)
-    {
-        $path = Util::normalizePath($path);
-        $this->assertPresent($path);
-
-        if (( ! $object = $this->getAdapter()->getVisibility($path)) || ! array_key_exists('visibility', $object)) {
-            return false;
-        }
-
-        return $object['visibility'];
-    }
-
-    /**
-     * @inheritdoc
-     */
-    public function getSize($path)
-    {
-        $path = Util::normalizePath($path);
-        $this->assertPresent($path);
-
-        if (( ! $object = $this->getAdapter()->getSize($path)) || ! array_key_exists('size', $object)) {
-            return false;
-        }
-
-        return (int) $object['size'];
-    }
-
-    /**
-     * @inheritdoc
-     */
-    public function setVisibility($path, $visibility)
-    {
-        $path = Util::normalizePath($path);
-        $this->assertPresent($path);
-
-        return (bool) $this->getAdapter()->setVisibility($path, $visibility);
-    }
-
-    /**
-     * @inheritdoc
-     */
-    public function getMetadata($path)
-    {
-        $path = Util::normalizePath($path);
-        $this->assertPresent($path);
-
-        return $this->getAdapter()->getMetadata($path);
-    }
-
-    /**
-     * @inheritdoc
-     */
-    public function get($path, Handler $handler = null)
-    {
-        $path = Util::normalizePath($path);
-
-        if ( ! $handler) {
-            $metadata = $this->getMetadata($path);
-            $handler = ($metadata && $metadata['type'] === 'file') ? new File($this, $path) : new Directory($this, $path);
-        }
-
-        $handler->setPath($path);
-        $handler->setFilesystem($this);
-
-        return $handler;
-    }
-
-    /**
-     * Assert a file is present.
-     *
-     * @param string $path path to file
-     *
-     * @throws FileNotFoundException
-     *
-     * @return void
-     */
-    public function assertPresent($path)
-    {
-        if ($this->config->get('disable_asserts', false) === false && ! $this->has($path)) {
-            throw new FileNotFoundException($path);
-        }
-    }
-
-    /**
-     * Assert a file is absent.
-     *
-     * @param string $path path to file
-     *
-     * @throws FileExistsException
-     *
-     * @return void
-     */
-    public function assertAbsent($path)
-    {
-        if ($this->config->get('disable_asserts', false) === false && $this->has($path)) {
-            throw new FileExistsException($path);
-        }
-    }
-}
diff --git a/src/Ported/Flysystem/FilesystemException.php b/src/Ported/Flysystem/FilesystemException.php
deleted file mode 100644
index 4fe5ebb..0000000
--- a/src/Ported/Flysystem/FilesystemException.php
+++ /dev/null
@@ -1,11 +0,0 @@
-<?php
-
-namespace Drupal\flysystem\Ported\Flysystem;
-
-/**
- * Ported from league/flysystem v1.
- * @see https://raw.githubusercontent.com/thephpleague/flysystem/1.x/src/FilesystemException.php.
- */
-interface FilesystemException
-{
-}
\ No newline at end of file
diff --git a/src/Ported/Flysystem/FilesystemInterface.php b/src/Ported/Flysystem/FilesystemInterface.php
deleted file mode 100644
index c32c4de..0000000
--- a/src/Ported/Flysystem/FilesystemInterface.php
+++ /dev/null
@@ -1,288 +0,0 @@
-<?php
-
-namespace Drupal\flysystem\Ported\Flysystem;
-
-use InvalidArgumentException;
-
-/**
- * Ported from league/flysystem v1.
- * @see https://raw.githubusercontent.com/thephpleague/flysystem/1.x/src/FilesystemInterface.php.
- */
-interface FilesystemInterface
-{
-    /**
-     * Check whether a file exists.
-     *
-     * @param string $path
-     *
-     * @return bool
-     */
-    public function has($path);
-
-    /**
-     * Read a file.
-     *
-     * @param string $path The path to the file.
-     *
-     * @throws FileNotFoundException
-     *
-     * @return string|false The file contents or false on failure.
-     */
-    public function read($path);
-
-    /**
-     * Retrieves a read-stream for a path.
-     *
-     * @param string $path The path to the file.
-     *
-     * @throws FileNotFoundException
-     *
-     * @return resource|false The path resource or false on failure.
-     */
-    public function readStream($path);
-
-    /**
-     * List contents of a directory.
-     *
-     * @param string $directory The directory to list.
-     * @param bool   $recursive Whether to list recursively.
-     *
-     * @return array A list of file metadata.
-     */
-    public function listContents($directory = '', $recursive = false);
-
-    /**
-     * Get a file's metadata.
-     *
-     * @param string $path The path to the file.
-     *
-     * @throws FileNotFoundException
-     *
-     * @return array|false The file metadata or false on failure.
-     */
-    public function getMetadata($path);
-
-    /**
-     * Get a file's size.
-     *
-     * @param string $path The path to the file.
-     *
-     * @throws FileNotFoundException
-     *
-     * @return int|false The file size or false on failure.
-     */
-    public function getSize($path);
-
-    /**
-     * Get a file's mime-type.
-     *
-     * @param string $path The path to the file.
-     *
-     * @throws FileNotFoundException
-     *
-     * @return string|false The file mime-type or false on failure.
-     */
-    public function getMimetype($path);
-
-    /**
-     * Get a file's timestamp.
-     *
-     * @param string $path The path to the file.
-     *
-     * @throws FileNotFoundException
-     *
-     * @return int|false The timestamp or false on failure.
-     */
-    public function getTimestamp($path);
-
-    /**
-     * Get a file's visibility.
-     *
-     * @param string $path The path to the file.
-     *
-     * @throws FileNotFoundException
-     *
-     * @return string|false The visibility (public|private) or false on failure.
-     */
-    public function getVisibility($path);
-
-    /**
-     * Write a new file.
-     *
-     * @param string $path     The path of the new file.
-     * @param string $contents The file contents.
-     * @param array  $config   An optional configuration array.
-     *
-     * @throws FileExistsException
-     *
-     * @return bool True on success, false on failure.
-     */
-    public function write($path, $contents, array $config = []);
-
-    /**
-     * Write a new file using a stream.
-     *
-     * @param string   $path     The path of the new file.
-     * @param resource $resource The file handle.
-     * @param array    $config   An optional configuration array.
-     *
-     * @throws InvalidArgumentException If $resource is not a file handle.
-     * @throws FileExistsException
-     *
-     * @return bool True on success, false on failure.
-     */
-    public function writeStream($path, $resource, array $config = []);
-
-    /**
-     * Update an existing file.
-     *
-     * @param string $path     The path of the existing file.
-     * @param string $contents The file contents.
-     * @param array  $config   An optional configuration array.
-     *
-     * @throws FileNotFoundException
-     *
-     * @return bool True on success, false on failure.
-     */
-    public function update($path, $contents, array $config = []);
-
-    /**
-     * Update an existing file using a stream.
-     *
-     * @param string   $path     The path of the existing file.
-     * @param resource $resource The file handle.
-     * @param array    $config   An optional configuration array.
-     *
-     * @throws InvalidArgumentException If $resource is not a file handle.
-     * @throws FileNotFoundException
-     *
-     * @return bool True on success, false on failure.
-     */
-    public function updateStream($path, $resource, array $config = []);
-
-    /**
-     * Rename a file.
-     *
-     * @param string $path    Path to the existing file.
-     * @param string $newpath The new path of the file.
-     *
-     * @throws FileExistsException   Thrown if $newpath exists.
-     * @throws FileNotFoundException Thrown if $path does not exist.
-     *
-     * @return bool True on success, false on failure.
-     */
-    public function rename($path, $newpath);
-
-    /**
-     * Copy a file.
-     *
-     * @param string $path    Path to the existing file.
-     * @param string $newpath The new path of the file.
-     *
-     * @throws FileExistsException   Thrown if $newpath exists.
-     * @throws FileNotFoundException Thrown if $path does not exist.
-     *
-     * @return bool True on success, false on failure.
-     */
-    public function copy($path, $newpath);
-
-    /**
-     * Delete a file.
-     *
-     * @param string $path
-     *
-     * @throws FileNotFoundException
-     *
-     * @return bool True on success, false on failure.
-     */
-    public function delete($path);
-
-    /**
-     * Delete a directory.
-     *
-     * @param string $dirname
-     *
-     * @throws RootViolationException Thrown if $dirname is empty.
-     *
-     * @return bool True on success, false on failure.
-     */
-    public function deleteDir($dirname);
-
-    /**
-     * Create a directory.
-     *
-     * @param string $dirname The name of the new directory.
-     * @param array  $config  An optional configuration array.
-     *
-     * @return bool True on success, false on failure.
-     */
-    public function createDir($dirname, array $config = []);
-
-    /**
-     * Set the visibility for a file.
-     *
-     * @param string $path       The path to the file.
-     * @param string $visibility One of 'public' or 'private'.
-     *
-     * @throws FileNotFoundException
-     *
-     * @return bool True on success, false on failure.
-     */
-    public function setVisibility($path, $visibility);
-
-    /**
-     * Create a file or update if exists.
-     *
-     * @param string $path     The path to the file.
-     * @param string $contents The file contents.
-     * @param array  $config   An optional configuration array.
-     *
-     * @return bool True on success, false on failure.
-     */
-    public function put($path, $contents, array $config = []);
-
-    /**
-     * Create a file or update if exists.
-     *
-     * @param string   $path     The path to the file.
-     * @param resource $resource The file handle.
-     * @param array    $config   An optional configuration array.
-     *
-     * @throws InvalidArgumentException Thrown if $resource is not a resource.
-     *
-     * @return bool True on success, false on failure.
-     */
-    public function putStream($path, $resource, array $config = []);
-
-    /**
-     * Read and delete a file.
-     *
-     * @param string $path The path to the file.
-     *
-     * @throws FileNotFoundException
-     *
-     * @return string|false The file contents, or false on failure.
-     */
-    public function readAndDelete($path);
-
-    /**
-     * Get a file/directory handler.
-     *
-     * @deprecated
-     *
-     * @param string  $path    The path to the file.
-     * @param Handler $handler An optional existing handler to populate.
-     *
-     * @return Handler Either a file or directory handler.
-     */
-    public function get($path, Handler $handler = null);
-
-    /**
-     * Register a plugin.
-     *
-     * @param PluginInterface $plugin The plugin to register.
-     *
-     * @return $this
-     */
-    public function addPlugin(PluginInterface $plugin);
-}
\ No newline at end of file
diff --git a/src/Ported/Flysystem/InvalidRootException.php b/src/Ported/Flysystem/InvalidRootException.php
deleted file mode 100644
index b4da830..0000000
--- a/src/Ported/Flysystem/InvalidRootException.php
+++ /dev/null
@@ -1,13 +0,0 @@
-<?php
-
-namespace Drupal\flysystem\Ported\Flysystem;
-
-use RuntimeException;
-
-/**
- * Ported from league/flysystem v1.
- * @see https://raw.githubusercontent.com/thephpleague/flysystem/1.x/src/InvalidRootException.php.
- */
-class InvalidRootException extends RuntimeException implements FilesystemException
-{
-}
\ No newline at end of file
diff --git a/src/Ported/Flysystem/Memory/MemoryAdapter.php b/src/Ported/Flysystem/Memory/MemoryAdapter.php
deleted file mode 100644
index c5a5b0a..0000000
--- a/src/Ported/Flysystem/Memory/MemoryAdapter.php
+++ /dev/null
@@ -1,344 +0,0 @@
-<?php
-
-namespace Drupal\flysystem\Ported\Flysystem\Memory;
-
-use Drupal\flysystem\Ported\Flysystem\Adapter\Polyfill\StreamedWritingTrait;
-use Drupal\flysystem\Ported\Flysystem\AdapterInterface;
-use Drupal\flysystem\Ported\Flysystem\Config;
-use Drupal\flysystem\Ported\Flysystem\Util;
-
-/**
- * Ported from league/flysystem-memory v1.0.2.
- * @see https://raw.githubusercontent.com/thephpleague/flysystem-memory/1.0.2/src/MemoryAdapter.php
- *
- * An adapter that keeps the filesystem in memory.
- */
-class MemoryAdapter implements AdapterInterface
-{
-    use StreamedWritingTrait;
-
-    /**
-     * The emulated filesystem.
-     *
-     * Start with the root directory initialized.
-     *
-     * @var array
-     */
-    protected $storage = ['' => ['type' => 'dir']];
-
-    public function __construct(Config $config = null)
-    {
-        $config = $config ?: new Config();
-
-        $this->storage['']['timestamp'] = $config->get('timestamp', time());
-    }
-
-    /**
-     * @inheritdoc
-     */
-    public function copy($path, $newpath)
-    {
-        // Make sure all the destination sub-directories exist.
-        if ( ! $this->doCreateDir(Util::dirname($newpath), new Config())) {
-            return false;
-        }
-
-        $this->storage[$newpath] = $this->storage[$path];
-
-        return true;
-    }
-
-    /**
-     * @inheritdoc
-     */
-    public function createDir($dirname, Config $config)
-    {
-        if ( ! $this->doCreateDir($dirname, $config)) {
-            return false;
-        }
-
-        return $this->getMetadata($dirname);
-    }
-
-    /**
-     * @inheritdoc
-     */
-    public function delete($path)
-    {
-        if ( ! $this->hasFile($path)) {
-            return false;
-        }
-
-        unset($this->storage[$path]);
-
-        return true;
-    }
-
-    /**
-     * @inheritdoc
-     */
-    public function deleteDir($dirname)
-    {
-        if ( ! $this->hasDirectory($dirname)) {
-            return false;
-        }
-
-        foreach ($this->doListContents($dirname, true) as $path) {
-            unset($this->storage[$path]);
-        }
-
-        unset($this->storage[$dirname]);
-
-        return true;
-    }
-
-    /**
-     * @inheritdoc
-     */
-    public function getMetadata($path)
-    {
-        $metadata = $this->storage[$path] + ['path' => $path];
-        unset($metadata['contents']);
-
-        return $metadata;
-    }
-
-    /**
-     * @inheritdoc
-     */
-    public function getMimetype($path)
-    {
-        $mimetype = isset($this->storage[$path]['mimetype']) ? $this->storage[$path]['mimetype'] :
-            Util::guessMimeType($path, $this->storage[$path]['contents']);
-
-        return [
-            'mimetype' => $mimetype,
-            'path' => $path,
-        ];
-    }
-
-    /**
-     * @inheritdoc
-     */
-    public function getSize($path)
-    {
-        return $this->getMetadata($path);
-    }
-
-    /**
-     * @inheritdoc
-     */
-    public function getTimestamp($path)
-    {
-        return $this->getMetadata($path);
-    }
-
-    /**
-     * @inheritdoc
-     */
-    public function getVisibility($path)
-    {
-        return $this->getMetadata($path);
-    }
-
-    /**
-     * @inheritdoc
-     */
-    public function has($path)
-    {
-        return isset($this->storage[$path]);
-    }
-
-    /**
-     * @inheritdoc
-     */
-    public function listContents($directory = '', $recursive = false)
-    {
-        $contents = $this->doListContents($directory, $recursive);
-
-        return array_map([$this, 'getMetadata'], array_values($contents));
-    }
-
-    /**
-     * @inheritdoc
-     */
-    public function read($path)
-    {
-        return [
-            'path' => $path,
-            'contents' => $this->storage[$path]['contents'],
-        ];
-    }
-
-    /**
-     * @inheritdoc
-     */
-    public function readStream($path)
-    {
-        $stream = fopen('php://memory', 'w+b');
-
-        if ( ! is_resource($stream)) {
-            throw new \RuntimeException('Unable to create memory stream.'); // @codeCoverageIgnore
-        }
-
-        fwrite($stream, $this->storage[$path]['contents']);
-        rewind($stream);
-
-        return compact('path', 'stream');
-    }
-
-    /**
-     * @inheritdoc
-     */
-    public function rename($path, $newpath)
-    {
-        if ( ! $this->copy($path, $newpath)) {
-            return false;
-        }
-        unset($this->storage[$path]);
-
-        return true;
-    }
-
-    /**
-     * @inheritdoc
-     */
-    public function setVisibility($path, $visibility)
-    {
-        if ( ! $this->hasFile($path)) {
-            return false;
-        }
-
-        $this->storage[$path]['visibility'] = $visibility;
-
-        return $this->getVisibility($path);
-    }
-
-    /**
-     * @inheritdoc
-     */
-    public function update($path, $contents, Config $config)
-    {
-        if ( ! $this->hasFile($path)) {
-            return false;
-        }
-
-        $this->storage[$path]['contents'] = $contents;
-        $this->storage[$path]['timestamp'] = $config->get('timestamp', time());
-        $this->storage[$path]['size'] = Util::contentSize($contents);
-        $this->storage[$path]['visibility'] = $config->get('visibility', $this->storage[$path]['visibility']);
-        if ($config->has('mimetype')) {
-            $this->storage[$path]['mimetype'] = $config->get('mimetype');
-        }
-
-        return $this->getMetadata($path);
-    }
-
-    /**
-     * @inheritdoc
-     */
-    public function write($path, $contents, Config $config)
-    {
-        // Make sure all the destination sub-directories exist.
-        if ( ! $this->doCreateDir(Util::dirname($path), $config)) {
-            return false;
-        }
-
-        $this->storage[$path]['type'] = 'file';
-        $this->storage[$path]['visibility'] = AdapterInterface::VISIBILITY_PUBLIC;
-
-        return $this->update($path, $contents, $config);
-    }
-
-    /**
-     * Creates a directory.
-     *
-     * @param string $dirname
-     * @param Config $config
-     *
-     * @return bool
-     */
-    protected function doCreateDir($dirname, Config $config)
-    {
-        if ($this->hasDirectory($dirname)) {
-            return true;
-        }
-
-        if ($this->hasFile($dirname)) {
-            return false;
-        }
-
-        // Make sure all the sub-directories exist.
-        if ( ! $this->doCreateDir(Util::dirname($dirname), $config)) {
-            return false;
-        }
-
-        $this->storage[$dirname]['type'] = 'dir';
-        $this->storage[$dirname]['timestamp'] = $config->get('timestamp', time());
-
-        return true;
-    }
-
-    /**
-     * Filters the file system returning paths inside the directory.
-     *
-     *  @param string $directory
-     *  @param bool   $recursive
-     *
-     * @return string[]
-     */
-    protected function doListContents($directory, $recursive)
-    {
-        $filter = function ($path) use ($directory, $recursive) {
-            // Remove the root directory from any listing.
-            if ($path === '') {
-                return false;
-            }
-
-            if (Util::dirname($path) === $directory) {
-                return true;
-            }
-
-            return $recursive && $this->pathIsInDirectory($path, $directory);
-        };
-
-        return array_filter(array_keys($this->storage), $filter);
-    }
-
-    /**
-     * Checks whether a directory exists.
-     *
-     * @param string $path The directory.
-     *
-     * @return bool True if it exists, and is a directory, false if not.
-     */
-    protected function hasDirectory($path)
-    {
-        return $this->has($path) && $this->storage[$path]['type'] === 'dir';
-    }
-
-    /**
-     * Checks whether a file exists.
-     *
-     * @param string $path The file.
-     *
-     * @return bool True if it exists, and is a file, false if not.
-     */
-    protected function hasFile($path)
-    {
-        return $this->has($path) && $this->storage[$path]['type'] === 'file';
-    }
-
-    /**
-     * Determines if the path is inside the directory.
-     *
-     * @param string $path
-     * @param string $directory
-     *
-     * @return bool
-     */
-    protected function pathIsInDirectory($path, $directory)
-    {
-        return $directory === '' || strpos($path, $directory . '/') === 0;
-    }
-}
diff --git a/src/Ported/Flysystem/NotSupportedException.php b/src/Ported/Flysystem/NotSupportedException.php
deleted file mode 100644
index 5378341..0000000
--- a/src/Ported/Flysystem/NotSupportedException.php
+++ /dev/null
@@ -1,41 +0,0 @@
-<?php
-
-namespace Drupal\flysystem\Ported\Flysystem;
-
-use RuntimeException;
-use SplFileInfo;
-
-/**
- * Ported from league/flysystem v1.
- * @see https://raw.githubusercontent.com/thephpleague/flysystem/1.x/src/NotSupportedException.php.
- */
-class NotSupportedException extends RuntimeException implements FilesystemException
-{
-    /**
-     * Create a new exception for a link.
-     *
-     * @param SplFileInfo $file
-     *
-     * @return static
-     */
-    public static function forLink(SplFileInfo $file)
-    {
-        $message = 'Links are not supported, encountered link at ';
-
-        return new static($message . $file->getPathname());
-    }
-
-    /**
-     * Create a new exception for a link.
-     *
-     * @param string $systemType
-     *
-     * @return static
-     */
-    public static function forFtpSystemType($systemType)
-    {
-        $message = "The FTP system type '$systemType' is currently not supported.";
-
-        return new static($message);
-    }
-}
\ No newline at end of file
diff --git a/src/Ported/Flysystem/Plugin/AbstractPlugin.php b/src/Ported/Flysystem/Plugin/AbstractPlugin.php
deleted file mode 100644
index 2e175fc..0000000
--- a/src/Ported/Flysystem/Plugin/AbstractPlugin.php
+++ /dev/null
@@ -1,28 +0,0 @@
-<?php
-
-namespace Drupal\flysystem\Ported\Flysystem\Plugin;
-
-use Drupal\flysystem\Ported\Flysystem\FilesystemInterface;
-use Drupal\flysystem\Ported\Flysystem\PluginInterface;
-
-/**
- * Ported from league/flysystem v1.
- * @see https://raw.githubusercontent.com/thephpleague/flysystem/1.x/src/Plugin/AbstractPlugin.php
- */
-abstract class AbstractPlugin implements PluginInterface
-{
-    /**
-     * @var FilesystemInterface
-     */
-    protected $filesystem;
-
-    /**
-     * Set the Filesystem object.
-     *
-     * @param FilesystemInterface $filesystem
-     */
-    public function setFilesystem(FilesystemInterface $filesystem)
-    {
-        $this->filesystem = $filesystem;
-    }
-}
\ No newline at end of file
diff --git a/src/Ported/Flysystem/Plugin/PluggableTrait.php b/src/Ported/Flysystem/Plugin/PluggableTrait.php
deleted file mode 100644
index 3b0f153..0000000
--- a/src/Ported/Flysystem/Plugin/PluggableTrait.php
+++ /dev/null
@@ -1,97 +0,0 @@
-<?php
-
-namespace Drupal\flysystem\Ported\Flysystem\Plugin;
-
-use BadMethodCallException;
-use Drupal\flysystem\Ported\Flysystem\FilesystemInterface;
-use Drupal\flysystem\Ported\Flysystem\PluginInterface;
-use LogicException;
-
-trait PluggableTrait
-{
-    /**
-     * @var array
-     */
-    protected $plugins = [];
-
-    /**
-     * Register a plugin.
-     *
-     * @param PluginInterface $plugin
-     *
-     * @throws LogicException
-     *
-     * @return $this
-     */
-    public function addPlugin(PluginInterface $plugin)
-    {
-        if ( ! method_exists($plugin, 'handle')) {
-            throw new LogicException(get_class($plugin) . ' does not have a handle method.');
-        }
-
-        $this->plugins[$plugin->getMethod()] = $plugin;
-
-        return $this;
-    }
-
-    /**
-     * Find a specific plugin.
-     *
-     * @param string $method
-     *
-     * @throws PluginNotFoundException
-     *
-     * @return PluginInterface
-     */
-    protected function findPlugin($method)
-    {
-        if ( ! isset($this->plugins[$method])) {
-            throw new PluginNotFoundException('Plugin not found for method: ' . $method);
-        }
-
-        return $this->plugins[$method];
-    }
-
-    /**
-     * Invoke a plugin by method name.
-     *
-     * @param string              $method
-     * @param array               $arguments
-     * @param FilesystemInterface $filesystem
-     *
-     * @throws PluginNotFoundException
-     *
-     * @return mixed
-     */
-    protected function invokePlugin($method, array $arguments, FilesystemInterface $filesystem)
-    {
-        $plugin = $this->findPlugin($method);
-        $plugin->setFilesystem($filesystem);
-        $callback = [$plugin, 'handle'];
-
-        return call_user_func_array($callback, $arguments);
-    }
-
-    /**
-     * Plugins pass-through.
-     *
-     * @param string $method
-     * @param array  $arguments
-     *
-     * @throws BadMethodCallException
-     *
-     * @return mixed
-     */
-    public function __call($method, array $arguments)
-    {
-        try {
-            return $this->invokePlugin($method, $arguments, $this);
-        } catch (PluginNotFoundException $e) {
-            throw new BadMethodCallException(
-                'Call to undefined method '
-                . get_class($this)
-                . '::' . $method
-            );
-        }
-    }
-}
diff --git a/src/Ported/Flysystem/PluginInterface.php b/src/Ported/Flysystem/PluginInterface.php
deleted file mode 100644
index b225f6a..0000000
--- a/src/Ported/Flysystem/PluginInterface.php
+++ /dev/null
@@ -1,24 +0,0 @@
-<?php
-
-namespace Drupal\flysystem\Ported\Flysystem;
-
-/**
- * Ported from league/flysystem v1.
- * @see https://raw.githubusercontent.com/thephpleague/flysystem/1.x/src/PluginInterface.php.
- */
-interface PluginInterface
-{
-    /**
-     * Get the method name.
-     *
-     * @return string
-     */
-    public function getMethod();
-
-    /**
-     * Set the Filesystem object.
-     *
-     * @param FilesystemInterface $filesystem
-     */
-    public function setFilesystem(FilesystemInterface $filesystem);
-}
\ No newline at end of file
diff --git a/src/Ported/Flysystem/ReadInterface.php b/src/Ported/Flysystem/ReadInterface.php
deleted file mode 100644
index 89705ec..0000000
--- a/src/Ported/Flysystem/ReadInterface.php
+++ /dev/null
@@ -1,88 +0,0 @@
-<?php
-
-namespace Drupal\flysystem\Ported\Flysystem;
-
-interface ReadInterface
-{
-    /**
-     * Check whether a file exists.
-     *
-     * @param string $path
-     *
-     * @return array|bool|null
-     */
-    public function has($path);
-
-    /**
-     * Read a file.
-     *
-     * @param string $path
-     *
-     * @return array|false
-     */
-    public function read($path);
-
-    /**
-     * Read a file as a stream.
-     *
-     * @param string $path
-     *
-     * @return array|false
-     */
-    public function readStream($path);
-
-    /**
-     * List contents of a directory.
-     *
-     * @param string $directory
-     * @param bool   $recursive
-     *
-     * @return array
-     */
-    public function listContents($directory = '', $recursive = false);
-
-    /**
-     * Get all the meta data of a file or directory.
-     *
-     * @param string $path
-     *
-     * @return array|false
-     */
-    public function getMetadata($path);
-
-    /**
-     * Get the size of a file.
-     *
-     * @param string $path
-     *
-     * @return array|false
-     */
-    public function getSize($path);
-
-    /**
-     * Get the mimetype of a file.
-     *
-     * @param string $path
-     *
-     * @return array|false
-     */
-    public function getMimetype($path);
-
-    /**
-     * Get the last modified time of a file as a timestamp.
-     *
-     * @param string $path
-     *
-     * @return array|false
-     */
-    public function getTimestamp($path);
-
-    /**
-     * Get the visibility of a file.
-     *
-     * @param string $path
-     *
-     * @return array|false
-     */
-    public function getVisibility($path);
-}
\ No newline at end of file
diff --git a/src/Ported/Flysystem/RootViolationException.php b/src/Ported/Flysystem/RootViolationException.php
deleted file mode 100644
index 61e7cd2..0000000
--- a/src/Ported/Flysystem/RootViolationException.php
+++ /dev/null
@@ -1,10 +0,0 @@
-<?php
-
-namespace Drupal\flysystem\Ported\Flysystem;
-
-use LogicException;
-
-class RootViolationException extends LogicException implements FilesystemException
-{
-    //
-}
diff --git a/src/Ported/Flysystem/SafeStorage.php b/src/Ported/Flysystem/SafeStorage.php
deleted file mode 100644
index 20fdd0b..0000000
--- a/src/Ported/Flysystem/SafeStorage.php
+++ /dev/null
@@ -1,39 +0,0 @@
-<?php
-
-namespace Drupal\flysystem\Ported\Flysystem;
-
-final class SafeStorage
-{
-    /**
-     * @var string
-     */
-    private $hash;
-
-    /**
-     * @var array
-     */
-    protected static $safeStorage = [];
-
-    public function __construct()
-    {
-        $this->hash = spl_object_hash($this);
-        static::$safeStorage[$this->hash] = [];
-    }
-
-    public function storeSafely($key, $value)
-    {
-        static::$safeStorage[$this->hash][$key] = $value;
-    }
-
-    public function retrieveSafely($key)
-    {
-        if (array_key_exists($key, static::$safeStorage[$this->hash])) {
-            return static::$safeStorage[$this->hash][$key];
-        }
-    }
-
-    public function __destruct()
-    {
-        unset(static::$safeStorage[$this->hash]);
-    }
-}
diff --git a/src/Ported/Flysystem/UnreadableFileException.php b/src/Ported/Flysystem/UnreadableFileException.php
deleted file mode 100644
index e650982..0000000
--- a/src/Ported/Flysystem/UnreadableFileException.php
+++ /dev/null
@@ -1,22 +0,0 @@
-<?php
-
-namespace Drupal\flysystem\Ported\Flysystem;
-
-use SplFileInfo;
-
-/**
- * Ported from league/flysystem v1.
- * @see https://raw.githubusercontent.com/thephpleague/flysystem/1.x/src/UnreadableFileException.php.
- */
-class UnreadableFileException extends Exception
-{
-    public static function forFileInfo(SplFileInfo $fileInfo)
-    {
-        return new static(
-            sprintf(
-                'Unreadable file encountered: %s',
-                $fileInfo->getRealPath()
-            )
-        );
-    }
-}
\ No newline at end of file
diff --git a/src/Ported/Flysystem/Util.php b/src/Ported/Flysystem/Util.php
deleted file mode 100644
index 24c8e9e..0000000
--- a/src/Ported/Flysystem/Util.php
+++ /dev/null
@@ -1,358 +0,0 @@
-<?php
-
-namespace Drupal\flysystem\Ported\Flysystem;
-
-use Drupal\flysystem\Ported\Flysystem\Util\MimeType;
-use LogicException;
-
-use function strcmp;
-
-/**
- * Ported from league/flysystem v1.
- * @see https://raw.githubusercontent.com/thephpleague/flysystem/1.x/src/Util.php.
- */
-class Util
-{
-    /**
-     * Get normalized pathinfo.
-     *
-     * @param string $path
-     *
-     * @return array pathinfo
-     */
-    public static function pathinfo($path)
-    {
-        $pathinfo = compact('path');
-
-        if ('' !== $dirname = dirname($path)) {
-            $pathinfo['dirname'] = static::normalizeDirname($dirname);
-        }
-
-        $pathinfo['basename'] = static::basename($path);
-
-        $pathinfo += pathinfo($pathinfo['basename']);
-
-        return $pathinfo + ['dirname' => ''];
-    }
-
-    /**
-     * Normalize a dirname return value.
-     *
-     * @param string $dirname
-     *
-     * @return string normalized dirname
-     */
-    public static function normalizeDirname($dirname)
-    {
-        return $dirname === '.' ? '' : $dirname;
-    }
-
-    /**
-     * Get a normalized dirname from a path.
-     *
-     * @param string $path
-     *
-     * @return string dirname
-     */
-    public static function dirname($path)
-    {
-        return static::normalizeDirname(dirname($path));
-    }
-
-    /**
-     * Map result arrays.
-     *
-     * @param array $object
-     * @param array $map
-     *
-     * @return array mapped result
-     */
-    public static function map(array $object, array $map)
-    {
-        $result = [];
-
-        foreach ($map as $from => $to) {
-            if ( ! isset($object[$from])) {
-                continue;
-            }
-
-            $result[$to] = $object[$from];
-        }
-
-        return $result;
-    }
-
-    /**
-     * Normalize path.
-     *
-     * @param string $path
-     *
-     * @throws LogicException
-     *
-     * @return string
-     */
-    public static function normalizePath($path)
-    {
-        return static::normalizeRelativePath($path);
-    }
-
-    /**
-     * Normalize relative directories in a path.
-     *
-     * @param string $path
-     *
-     * @throws LogicException
-     *
-     * @return string
-     */
-    public static function normalizeRelativePath($path)
-    {
-        $path = str_replace('\\', '/', $path);
-        $path =  static::removeFunkyWhiteSpace($path);
-        $parts = [];
-
-        foreach (explode('/', $path) as $part) {
-            switch ($part) {
-                case '':
-                case '.':
-                break;
-
-            case '..':
-                if (empty($parts)) {
-                    throw new LogicException(
-                        'Path is outside of the defined root, path: [' . $path . ']'
-                    );
-                }
-                array_pop($parts);
-                break;
-
-            default:
-                $parts[] = $part;
-                break;
-            }
-        }
-
-        $path = implode('/', $parts);
-
-        return $path;
-    }
-
-    /**
-     * Rejects unprintable characters and invalid unicode characters.
-     *
-     * @param string $path
-     *
-     * @return string $path
-     */
-    protected static function removeFunkyWhiteSpace($path)
-    {
-        if (preg_match('#\p{C}+#u', $path)) {
-            throw CorruptedPathDetected::forPath($path);
-        }
-
-        return $path;
-    }
-
-    /**
-     * Normalize prefix.
-     *
-     * @param string $prefix
-     * @param string $separator
-     *
-     * @return string normalized path
-     */
-    public static function normalizePrefix($prefix, $separator)
-    {
-        return rtrim($prefix, $separator) . $separator;
-    }
-
-    /**
-     * Get content size.
-     *
-     * @param string $contents
-     *
-     * @return int content size
-     */
-    public static function contentSize($contents)
-    {
-        return defined('MB_OVERLOAD_STRING') ? mb_strlen($contents, '8bit') : strlen($contents);
-    }
-
-    /**
-     * Guess MIME Type based on the path of the file and it's content.
-     *
-     * @param string          $path
-     * @param string|resource $content
-     *
-     * @return string|null MIME Type or NULL if no extension detected
-     */
-    public static function guessMimeType($path, $content)
-    {
-        $mimeType = MimeType::detectByContent($content);
-
-        if ( ! (empty($mimeType) || in_array($mimeType, ['application/x-empty', 'text/plain', 'text/x-asm']))) {
-            return $mimeType;
-        }
-
-        return MimeType::detectByFilename($path);
-    }
-
-    /**
-     * Emulate directories.
-     *
-     * @param array $listing
-     *
-     * @return array listing with emulated directories
-     */
-    public static function emulateDirectories(array $listing)
-    {
-        $directories = [];
-        $listedDirectories = [];
-
-        foreach ($listing as $object) {
-            [$directories, $listedDirectories] = static::emulateObjectDirectories($object, $directories, $listedDirectories);
-        }
-
-        $directories = array_diff(array_unique($directories), array_unique($listedDirectories));
-
-        foreach ($directories as $directory) {
-            $listing[] = static::pathinfo($directory) + ['type' => 'dir'];
-        }
-
-        return $listing;
-    }
-
-    /**
-     * Ensure a Config instance.
-     *
-     * @param null|array|Config $config
-     *
-     * @return Config config instance
-     *
-     * @throw  LogicException
-     */
-    public static function ensureConfig($config)
-    {
-        if ($config === null) {
-            return new Config();
-        }
-
-        if ($config instanceof Config) {
-            return $config;
-        }
-
-        if (is_array($config)) {
-            return new Config($config);
-        }
-
-        throw new LogicException('A config should either be an array or a Flysystem\Config object.');
-    }
-
-    /**
-     * Rewind a stream.
-     *
-     * @param resource $resource
-     */
-    public static function rewindStream($resource)
-    {
-        if (ftell($resource) !== 0 && static::isSeekableStream($resource)) {
-            rewind($resource);
-        }
-    }
-
-    public static function isSeekableStream($resource)
-    {
-        $metadata = stream_get_meta_data($resource);
-
-        return $metadata['seekable'];
-    }
-
-    /**
-     * Get the size of a stream.
-     *
-     * @param resource $resource
-     *
-     * @return int|null stream size
-     */
-    public static function getStreamSize($resource)
-    {
-        $stat = fstat($resource);
-
-        if ( ! is_array($stat) || ! isset($stat['size'])) {
-            return null;
-        }
-
-        return $stat['size'];
-    }
-
-    /**
-     * Emulate the directories of a single object.
-     *
-     * @param array $object
-     * @param array $directories
-     * @param array $listedDirectories
-     *
-     * @return array
-     */
-    protected static function emulateObjectDirectories(array $object, array $directories, array $listedDirectories)
-    {
-        if ($object['type'] === 'dir') {
-            $listedDirectories[] = $object['path'];
-        }
-
-        if ( ! isset($object['dirname']) || trim($object['dirname']) === '') {
-            return [$directories, $listedDirectories];
-        }
-
-        $parent = $object['dirname'];
-
-        while (isset($parent) && trim($parent) !== '' && ! in_array($parent, $directories)) {
-            $directories[] = $parent;
-            $parent = static::dirname($parent);
-        }
-
-        if (isset($object['type']) && $object['type'] === 'dir') {
-            $listedDirectories[] = $object['path'];
-
-            return [$directories, $listedDirectories];
-        }
-
-        return [$directories, $listedDirectories];
-    }
-
-    /**
-     * Returns the trailing name component of the path.
-     *
-     * @param string $path
-     *
-     * @return string
-     */
-    private static function basename($path)
-    {
-        $separators = DIRECTORY_SEPARATOR === '/' ? '/' : '\/';
-
-        $path = rtrim($path, $separators);
-
-        $basename = preg_replace('#.*?([^' . preg_quote($separators, '#') . ']+$)#', '$1', $path);
-
-        if (DIRECTORY_SEPARATOR === '/') {
-            return $basename;
-        }
-        // @codeCoverageIgnoreStart
-        // Extra Windows path munging. This is tested via AppVeyor, but code
-        // coverage is not reported.
-
-        // Handle relative paths with drive letters. c:file.txt.
-        while (preg_match('#^[a-zA-Z]{1}:[^\\\/]#', $basename)) {
-            $basename = substr($basename, 2);
-        }
-
-        // Remove colon for standalone drive letter names.
-        if (preg_match('#^[a-zA-Z]{1}:$#', $basename)) {
-            $basename = rtrim($basename, ':');
-        }
-
-        return $basename;
-        // @codeCoverageIgnoreEnd
-    }
-}
\ No newline at end of file
diff --git a/src/Ported/Flysystem/Util/ContentListingFormatter.php b/src/Ported/Flysystem/Util/ContentListingFormatter.php
deleted file mode 100644
index 3b08876..0000000
--- a/src/Ported/Flysystem/Util/ContentListingFormatter.php
+++ /dev/null
@@ -1,123 +0,0 @@
-<?php
-
-namespace Drupal\flysystem\Ported\Flysystem\Util;
-
-use Drupal\flysystem\Ported\Flysystem\Util;
-
-/**
- * Ported from league/flysystem v1.
- * @see https://raw.githubusercontent.com/thephpleague/flysystem/1.x/src/Util/ContentListingFormatter.php.
- */
-class ContentListingFormatter
-{
-    /**
-     * @var string
-     */
-    private $directory;
-
-    /**
-     * @var bool
-     */
-    private $recursive;
-
-    /**
-     * @var bool
-     */
-    private $caseSensitive;
-
-    /**
-     * @param string $directory
-     * @param bool   $recursive
-     */
-    public function __construct($directory, $recursive, $caseSensitive = true)
-    {
-        $this->directory = rtrim($directory, '/');
-        $this->recursive = $recursive;
-        $this->caseSensitive = $caseSensitive;
-    }
-
-    /**
-     * Format contents listing.
-     *
-     * @param array $listing
-     *
-     * @return array
-     */
-    public function formatListing(array $listing)
-    {
-        $listing = array_filter(array_map([$this, 'addPathInfo'], $listing), [$this, 'isEntryOutOfScope']);
-
-        return $this->sortListing(array_values($listing));
-    }
-
-    private function addPathInfo(array $entry)
-    {
-        return $entry + Util::pathinfo($entry['path']);
-    }
-
-    /**
-     * Determine if the entry is out of scope.
-     *
-     * @param array $entry
-     *
-     * @return bool
-     */
-    private function isEntryOutOfScope(array $entry)
-    {
-        if (empty($entry['path']) && $entry['path'] !== '0') {
-            return false;
-        }
-
-        if ($this->recursive) {
-            return $this->residesInDirectory($entry);
-        }
-
-        return $this->isDirectChild($entry);
-    }
-
-    /**
-     * Check if the entry resides within the parent directory.
-     *
-     * @param array $entry
-     *
-     * @return bool
-     */
-    private function residesInDirectory(array $entry)
-    {
-        if ($this->directory === '') {
-            return true;
-        }
-
-        return $this->caseSensitive
-            ? strpos($entry['path'], $this->directory . '/') === 0
-            : stripos($entry['path'], $this->directory . '/') === 0;
-    }
-
-    /**
-     * Check if the entry is a direct child of the directory.
-     *
-     * @param array $entry
-     *
-     * @return bool
-     */
-    private function isDirectChild(array $entry)
-    {
-        return $this->caseSensitive
-            ? $entry['dirname'] === $this->directory
-            : strcasecmp($this->directory, $entry['dirname']) === 0;
-    }
-
-    /**
-     * @param array $listing
-     *
-     * @return array
-     */
-    private function sortListing(array $listing)
-    {
-        usort($listing, function ($a, $b) {
-            return strcasecmp($a['path'], $b['path']);
-        });
-
-        return $listing;
-    }
-}
diff --git a/src/Ported/Flysystem/Util/MimeType.php b/src/Ported/Flysystem/Util/MimeType.php
deleted file mode 100644
index 3e395d3..0000000
--- a/src/Ported/Flysystem/Util/MimeType.php
+++ /dev/null
@@ -1,81 +0,0 @@
-<?php
-
-namespace Drupal\flysystem\Ported\Flysystem\Util;
-
-use League\MimeTypeDetection\FinfoMimeTypeDetector;
-use League\MimeTypeDetection\GeneratedExtensionToMimeTypeMap;
-use League\MimeTypeDetection\MimeTypeDetector;
-
-/**
- * Ported from league/flysystem v1.
- * @see https://raw.githubusercontent.com/thephpleague/flysystem/1.x/src/Util/MimeType.php.
- */
-class MimeType
-{
-    protected static $extensionToMimeTypeMap = GeneratedExtensionToMimeTypeMap::MIME_TYPES_FOR_EXTENSIONS;
-    protected static $detector;
-
-    public static function useDetector(MimeTypeDetector $detector)
-    {
-        static::$detector = $detector;
-    }
-
-    /**
-     * @return MimeTypeDetector
-     */
-    protected static function detector()
-    {
-        if ( ! static::$detector instanceof MimeTypeDetector) {
-            static::$detector = new FinfoMimeTypeDetector();
-        }
-
-        return static::$detector;
-    }
-
-
-    /**
-     * Detects MIME Type based on given content.
-     *
-     * @param mixed $content
-     *
-     * @return string MIME Type
-     */
-    public static function detectByContent($content)
-    {
-        if (is_string($content)) {
-            return static::detector()->detectMimeTypeFromBuffer($content);
-        }
-
-        return 'text/plain';
-    }
-
-    /**
-     * Detects MIME Type based on file extension.
-     *
-     * @param string $extension
-     *
-     * @return string MIME Type
-     */
-    public static function detectByFileExtension($extension)
-    {
-        return static::detector()->detectMimeTypeFromPath('artificial.' . $extension) ?: 'text/plain';
-    }
-
-    /**
-     * @param string $filename
-     *
-     * @return string MIME Type
-     */
-    public static function detectByFilename($filename)
-    {
-        return static::detector()->detectMimeTypeFromPath($filename) ?: 'text/plain';
-    }
-
-    /**
-     * @return array Map of file extension to MIME Type
-     */
-    public static function getExtensionToMimeTypeMap()
-    {
-        return static::$extensionToMimeTypeMap;
-    }
-}
\ No newline at end of file
diff --git a/src/Ported/PosixUid.php b/src/Ported/PosixUid.php
deleted file mode 100644
index cfdd4eb..0000000
--- a/src/Ported/PosixUid.php
+++ /dev/null
@@ -1,20 +0,0 @@
-<?php
-
-namespace Drupal\flysystem\Ported;
-
-/**
- * Ported from twistor/flysystem-stream-wrapper. 
- * @see https://raw.githubusercontent.com/twistor/flysystem-stream-wrapper/master/src/PosixUid.php.
- */
-class PosixUid extends Uid
-{
-    public function getUid()
-    {
-        return (int) posix_getuid();
-    }
-
-    public function getGid()
-    {
-        return (int) posix_getuid();
-    }
-}
diff --git a/src/Ported/Replicate/ReplicateAdapter.php b/src/Ported/Replicate/ReplicateAdapter.php
deleted file mode 100644
index 7832b58..0000000
--- a/src/Ported/Replicate/ReplicateAdapter.php
+++ /dev/null
@@ -1,287 +0,0 @@
-<?php
-
-namespace Drupal\flysystem\Ported\Replicate;
-
-use Drupal\flysystem\Ported\Flysystem\AdapterInterface;
-use Drupal\flysystem\Ported\Flysystem\Config;
-use Drupal\flysystem\Ported\Flysystem\Util;
-
-/**
- * Ported from league/flysystem-replicate-adapter.
- * @see https://raw.githubusercontent.com/thephpleague/flysystem-replicate-adapter/master/src/ReplicateAdapter.php.
- */
-class ReplicateAdapter implements AdapterInterface
-{
-    /**
-     * @var AdapterInterface
-     */
-    protected $replica;
-
-    /**
-     * @var AdapterInterface
-     */
-    protected $source;
-
-    /**
-     * Constructor.
-     *
-     * @param AdapterInterface $source
-     * @param AdapterInterface $replica
-     */
-    public function __construct(AdapterInterface $source, AdapterInterface $replica)
-    {
-        $this->source = $source;
-        $this->replica = $replica;
-    }
-
-    /**
-     * Returns the replica adapter.
-     *
-     * @return AdapterInterface
-     */
-    public function getReplicaAdapter()
-    {
-        return $this->replica;
-    }
-
-    /**
-     * Returns the source adapter.
-     *
-     * @return AdapterInterface
-     */
-    public function getSourceAdapter()
-    {
-        return $this->source;
-    }
-
-    /**
-     * {@inheritdoc}
-     */
-    public function write($path, $contents, Config $config)
-    {
-        if (! $this->source->write($path, $contents, $config)) {
-            return false;
-        }
-
-        return $this->replica->write($path, $contents, $config);
-    }
-
-    /**
-     * {@inheritdoc}
-     */
-    public function writeStream($path, $resource, Config $config)
-    {
-        if (! $this->source->writeStream($path, $resource, $config)) {
-            return false;
-        }
-
-        if (! $resource = $this->ensureSeekable($resource, $path)) {
-            return false;
-        }
-
-        return $this->replica->writeStream($path, $resource, $config);
-    }
-
-    /**
-     * {@inheritdoc}
-     */
-    public function update($path, $contents, Config $config)
-    {
-        if (! $this->source->update($path, $contents, $config)) {
-            return false;
-        }
-
-        if ($this->replica->has($path)) {
-            return $this->replica->update($path, $contents, $config);
-        } else {
-            return $this->replica->write($path, $contents, $config);
-        }
-    }
-
-    /**
-     * {@inheritdoc}
-     */
-    public function updateStream($path, $resource, Config $config)
-    {
-        if (! $this->source->updateStream($path, $resource, $config)) {
-            return false;
-        }
-
-        if (! $resource = $this->ensureSeekable($resource, $path)) {
-            return false;
-        }
-
-        if ($this->replica->has($path)) {
-            return $this->replica->updateStream($path, $resource, $config);
-        } else {
-            return $this->replica->writeStream($path, $resource, $config);
-        }
-    }
-
-    /**
-     * {@inheritdoc}
-     */
-    public function rename($path, $newpath)
-    {
-        if (! $this->source->rename($path, $newpath)) {
-            return false;
-        }
-
-        return $this->replica->rename($path, $newpath);
-    }
-
-    /**
-     * {@inheritdoc}
-     */
-    public function copy($path, $newpath)
-    {
-        if (! $this->source->copy($path, $newpath)) {
-            return false;
-        }
-
-        return $this->replica->copy($path, $newpath);
-    }
-
-    /**
-     * {@inheritdoc}
-     */
-    public function delete($path)
-    {
-        if (! $this->source->delete($path)) {
-            return false;
-        }
-
-        if ($this->replica->has($path)) {
-            return $this->replica->delete($path);
-        }
-
-        return true;
-    }
-
-    /**
-     * {@inheritdoc}
-     */
-    public function deleteDir($dirname)
-    {
-        if (! $this->source->deleteDir($dirname)) {
-            return false;
-        }
-
-        return $this->replica->deleteDir($dirname);
-    }
-
-    /**
-     * {@inheritdoc}
-     */
-    public function createDir($dirname, Config $config)
-    {
-        if (! $this->source->createDir($dirname, $config)) {
-            return false;
-        }
-
-        return $this->replica->createDir($dirname, $config);
-    }
-
-    /**
-     * {@inheritdoc}
-     */
-    public function has($path)
-    {
-        return $this->source->has($path);
-    }
-
-    /**
-     * {@inheritdoc}
-     */
-    public function read($path)
-    {
-        return $this->source->read($path);
-    }
-
-    /**
-     * {@inheritdoc}
-     */
-    public function readStream($path)
-    {
-        return $this->source->readStream($path);
-    }
-
-    /**
-     * {@inheritdoc}
-     */
-    public function listContents($directory = '', $recursive = false)
-    {
-        return $this->source->listContents($directory, $recursive);
-    }
-
-    /**
-     * {@inheritdoc}
-     */
-    public function getMetadata($path)
-    {
-        return $this->source->getMetadata($path);
-    }
-
-    /**
-     * {@inheritdoc}
-     */
-    public function getSize($path)
-    {
-        return $this->source->getSize($path);
-    }
-
-    /**
-     * {@inheritdoc}
-     */
-    public function getMimetype($path)
-    {
-        return $this->source->getMimetype($path);
-    }
-
-    /**
-     * {@inheritdoc}
-     */
-    public function getTimestamp($path)
-    {
-        return $this->source->getTimestamp($path);
-    }
-
-    /**
-     * {@inheritdoc}
-     */
-    public function getVisibility($path)
-    {
-        return $this->source->getVisibility($path);
-    }
-
-    /**
-     * {@inheritdoc}
-     */
-    public function setVisibility($path, $visibility)
-    {
-        if (! $this->source->setVisibility($path, $visibility)) {
-            return false;
-        }
-
-        return $this->replica->setVisibility($path, $visibility);
-    }
-
-    /**
-     * Rewinds the stream, or returns the source stream if not seekable.
-     *
-     * @param resource $resource The resource to rewind.
-     * @param string   $path     The path where the resource exists.
-     *
-     * @return resource A stream set to position zero.
-     */
-    protected function ensureSeekable($resource, $path)
-    {
-        if (Util::isSeekableStream($resource) && rewind($resource)) {
-            return $resource;
-        }
-
-        $stream = $this->source->readStream($path);
-
-        return $stream ? $stream['stream'] : false;
-    }
-}
diff --git a/src/Ported/Uid.php b/src/Ported/Uid.php
deleted file mode 100644
index 4c6981c..0000000
--- a/src/Ported/Uid.php
+++ /dev/null
@@ -1,20 +0,0 @@
-<?php
-
-namespace Drupal\flysystem\Ported;
-
-/**
- * Ported from twistor/flysystem-stream-wrapper. 
- * @see https://raw.githubusercontent.com/twistor/flysystem-stream-wrapper/master/src/Uid.php.
- */
-class Uid
-{
-    public function getUid()
-    {
-        return (int) getmyuid();
-    }
-
-    public function getGid()
-    {
-        return (int) getmygid();
-    }
-}
\ No newline at end of file
diff --git a/src/PortedPlugin/AbstractPlugin.php b/src/PortedPlugin/AbstractPlugin.php
deleted file mode 100644
index 0463e98..0000000
--- a/src/PortedPlugin/AbstractPlugin.php
+++ /dev/null
@@ -1,26 +0,0 @@
-<?php
-
-namespace Drupal\flysystem\PortedPlugin;
-
-use Drupal\flysystem\Ported\Flysystem\Config;
-use Drupal\flysystem\Ported\Flysystem\Plugin\AbstractPlugin as FlysystemPlugin;
-
-/**
- * Ported from twistor/flysystem-stream-wrapper. 
- * @see https://raw.githubusercontent.com/twistor/flysystem-stream-wrapper/master/src/Flysystem/Plugin/AbstractPlugin.php.
- */
-abstract class AbstractPlugin extends FlysystemPlugin
-{
-    /**
-     * @var \Drupal\flysystem\Ported\Flysystem
-     */
-    protected $filesystem;
-
-    protected function defaultConfig()
-    {
-        $config = new Config();
-        $config->setFallback($this->filesystem->getConfig());
-
-        return $config;
-    }
-}
\ No newline at end of file
diff --git a/src/PortedPlugin/ForcedRename.php b/src/PortedPlugin/ForcedRename.php
deleted file mode 100644
index dea5fad..0000000
--- a/src/PortedPlugin/ForcedRename.php
+++ /dev/null
@@ -1,135 +0,0 @@
-<?php
-
-namespace Drupal\flysystem\PortedPlugin;
-
-use Drupal\flysystem\Ported\Flysystem\FileNotFoundException;
-use Drupal\flysystem\Ported\Flysystem\Util;
-use Drupal\flysystem\Exception\DirectoryExistsException;
-use Drupal\flysystem\Exception\DirectoryNotEmptyException;
-use Drupal\flysystem\Exception\NotADirectoryException;
-use Drupal\flysystem\PortedPlugin\AbstractPlugin;
-
-/**
- * Ported Plugin from twistor/flysystem-stream-wrapper.
- * @see https://raw.githubusercontent.com/twistor/flysystem-stream-wrapper/master/src/Flysystem/Plugin/ForcedRename.php.
- */
-class ForcedRename extends AbstractPlugin
-{
-    /**
-     * @inheritdoc
-     */
-    public function getMethod()
-    {
-        return 'forcedRename';
-    }
-
-    /**
-     * Renames a file.
-     *
-     * @param string $path    path to file
-     * @param string $newpath new path
-     *
-     * @return bool
-     *
-     * @throws \Drupal\flysystem\Ported\Flysystem\FileNotFoundException
-     * @throws \Drupal\flysystem\Exception\DirectoryExistsException
-     * @throws \Drupal\flysystem\Exception\DirectoryNotEmptyException
-     * @throws \Drupal\flysystem\Exception\NotADirectoryException
-     */
-    public function handle($path, $newpath)
-    {
-        $path = Util::normalizePath($path);
-        $newpath = Util::normalizePath($newpath);
-
-        // Ignore useless renames.
-        if ($path === $newpath) {
-            return true;
-        }
-
-        if ( ! $this->isValidRename($path, $newpath)) {
-            // Returns false if a Flysystem call fails.
-            return false;
-        }
-
-        return (bool) $this->filesystem->getAdapter()->rename($path, $newpath);
-    }
-
-    /**
-     * Checks that a rename is valid.
-     *
-     * @param string $source
-     * @param string $dest
-     *
-     * @return bool
-     *
-     * @throws \Drupal\flysystem\Ported\Flysystem\FileNotFoundException
-     * @throws \Drupal\flysystem\Exception\DirectoryExistsException
-     * @throws \Drupal\flysystem\Exception\DirectoryNotEmptyException
-     * @throws \Drupal\flysystem\Exception\NotADirectoryException
-     */
-    protected function isValidRename($source, $dest)
-    {
-        $adapter = $this->filesystem->getAdapter();
-
-        if ( ! $adapter->has($source)) {
-            throw new FileNotFoundException($source);
-        }
-
-        $subdir = Util::dirname($dest);
-
-        if (strlen($subdir) && ! $adapter->has($subdir)) {
-            throw new FileNotFoundException($source);
-        }
-
-        if ( ! $adapter->has($dest)) {
-            return true;
-        }
-
-        return $this->compareTypes($source, $dest);
-    }
-
-    /**
-     * Compares the file/dir for the source and dest.
-     *
-     * @param string $source
-     * @param string $dest
-     *
-     * @return bool
-     *
-     * @throws \Drupal\flysystem\Exception\DirectoryExistsException
-     * @throws \Drupal\flysystem\Exception\DirectoryNotEmptyException
-     * @throws \Drupal\flysystem\Exception\NotADirectoryException
-     */
-    protected function compareTypes($source, $dest)
-    {
-        $adapter = $this->filesystem->getAdapter();
-
-        $source_type = $adapter->getMetadata($source)['type'];
-        $dest_type = $adapter->getMetadata($dest)['type'];
-
-        // These three checks are done in order of cost to minimize Flysystem
-        // calls.
-
-        // Don't allow overwriting different types.
-        if ($source_type !== $dest_type) {
-            if ($dest_type === 'dir') {
-                throw new DirectoryExistsException();
-            }
-
-            throw new NotADirectoryException();
-        }
-
-        // Allow overwriting destination file.
-        if ($source_type === 'file') {
-            return $adapter->delete($dest);
-        }
-
-        // Allow overwriting destination directory if not empty.
-        $contents = $this->filesystem->listContents($dest);
-        if ( ! empty($contents)) {
-            throw new DirectoryNotEmptyException();
-        }
-
-        return $adapter->deleteDir($dest);
-    }
-}
\ No newline at end of file
diff --git a/src/PortedPlugin/Mkdir.php b/src/PortedPlugin/Mkdir.php
deleted file mode 100644
index 85ef8ca..0000000
--- a/src/PortedPlugin/Mkdir.php
+++ /dev/null
@@ -1,51 +0,0 @@
-<?php
-
-namespace Drupal\flysystem\PortedPlugin;
-
-use Drupal\flysystem\Ported\Flysystem\FileNotFoundException;
-use Drupal\flysystem\Ported\Flysystem\Util;
-use Drupal\flysystem\PortedPlugin\AbstractPlugin;
-
-/**
- * Ported from twistor/flysystem-stream-wrapper.
- * @see https://raw.githubusercontent.com/twistor/flysystem-stream-wrapper/master/src/Flysystem/Plugin/Mkdir.php.
- */
-class Mkdir extends AbstractPlugin
-{
-    /**
-     * @inheritdoc
-     */
-    public function getMethod()
-    {
-        return 'mkdir';
-    }
-
-    /**
-     * Creates a directory.
-     *
-     * @param string $dirname
-     * @param int $mode
-     * @param int $options
-     *
-     * @return bool True on success, false on failure.
-     *
-     * @throws \Drupal\flysystem\Ported\Flysystem\FileNotFoundException
-     */
-    public function handle($dirname, $mode, $options)
-    {
-        $dirname = Util::normalizePath($dirname);
-
-        $adapter = $this->filesystem->getAdapter();
-
-        // If recursive, or a single level directory, just create it.
-        if (($options & STREAM_MKDIR_RECURSIVE) || strpos($dirname, '/') === false) {
-            return (bool) $adapter->createDir($dirname, $this->defaultConfig());
-        }
-
-        if ( ! $adapter->has(dirname($dirname))) {
-            throw new FileNotFoundException($dirname);
-        }
-
-        return (bool) $adapter->createDir($dirname, $this->defaultConfig());
-    }
-}
\ No newline at end of file
diff --git a/src/PortedPlugin/Rmdir.php b/src/PortedPlugin/Rmdir.php
deleted file mode 100644
index a271eaf..0000000
--- a/src/PortedPlugin/Rmdir.php
+++ /dev/null
@@ -1,57 +0,0 @@
-<?php
-
-namespace Drupal\flysystem\PortedPlugin;
-
-use Drupal\flysystem\Ported\Flysystem\RootViolationException;
-use Drupal\flysystem\Ported\Flysystem\Util;
-use Drupal\flysystem\Exception\DirectoryNotEmptyException;
-use Drupal\flysystem\PortedPlugin\AbstractPlugin;
-
-/**
- * Ported from twistor/flysystem-stream-wrapper. 
- * @see https://raw.githubusercontent.com/twistor/flysystem-stream-wrapper/master/src/Flysystem/Plugin/Rmdir.php.
- */
-class Rmdir extends AbstractPlugin
-{
-    /**
-     * @inheritdoc
-     */
-    public function getMethod()
-    {
-        return 'rmdir';
-    }
-
-    /**
-     * Delete a directory.
-     *
-     * @param string $dirname path to directory
-     * @param int $options
-     *
-     * @return bool
-     *
-     * @throws \Drupal\flysystem\Exception\DirectoryNotEmptyException
-     */
-    public function handle($dirname, $options)
-    {
-        $dirname = Util::normalizePath($dirname);
-
-        if ($dirname === '') {
-            throw new RootViolationException('Root directories can not be deleted.');
-        }
-
-        $adapter = $this->filesystem->getAdapter();
-
-        if ($options & STREAM_MKDIR_RECURSIVE) {
-            // I don't know how this gets triggered.
-            return (bool) $adapter->deleteDir($dirname);
-        }
-
-        $contents = $this->filesystem->listContents($dirname);
-
-        if ( ! empty($contents)) {
-            throw new DirectoryNotEmptyException();
-        }
-
-        return (bool) $adapter->deleteDir($dirname);
-    }
-}
\ No newline at end of file
diff --git a/src/PortedPlugin/Stat.php b/src/PortedPlugin/Stat.php
deleted file mode 100644
index 44d9720..0000000
--- a/src/PortedPlugin/Stat.php
+++ /dev/null
@@ -1,176 +0,0 @@
-<?php
-
-namespace Drupal\flysystem\PortedPlugin;
-
-use Drupal\flysystem\Ported\Flysystem\AdapterInterface;
-use Drupal\flysystem\FlysystemStreamWrapper;
-use Drupal\flysystem\Ported\PosixUid;
-use Drupal\flysystem\Ported\Uid;
-use Drupal\flysystem\PortedPlugin\AbstractPlugin;
-
-/**
- * Ported from twistor/flysystem-stream-wrapper. 
- * @see https://raw.githubusercontent.com/twistor/flysystem-stream-wrapper/master/src/Flysystem/Plugin/Stat.php.
- */
-class Stat extends AbstractPlugin
-{
-    /**
-     * Default return value of url_stat().
-     *
-     * @var array
-     */
-    protected static $defaultMeta = [
-        'dev' => 0,
-        'ino' => 0,
-        'mode' => 0,
-        'nlink' => 0,
-        'uid' => 0,
-        'gid' => 0,
-        'rdev' => 0,
-        'size' => 0,
-        'atime' => 0,
-        'mtime' => 0,
-        'ctime' => 0,
-        'blksize' => -1,
-        'blocks' => -1,
-    ];
-
-    /**
-     * Permission map.
-     *
-     * @var array
-     */
-    protected $permissions;
-
-    /**
-     * Required metadata.
-     *
-     * @var array
-     */
-    protected $required;
-
-    /**
-     * @var \Drupal\flysystem\Ported\Uid
-     */
-    protected $uid;
-
-    /**
-     * Constructs a Stat object.
-     *
-     * @param array $permissions An array of permissions.
-     * @param array $metadata    The default required metadata.
-     */
-    public function __construct(array $permissions, array $metadata)
-    {
-        $this->permissions = $permissions;
-        $this->required = array_combine($metadata, $metadata);
-        $this->uid = \extension_loaded('posix') ? new PosixUid() : new Uid();
-    }
-
-    /**
-     * @inheritdoc
-     */
-    public function getMethod()
-    {
-        return 'stat';
-    }
-
-    /**
-     * Emulates stat().
-     *
-     * @param string $path
-     * @param int $flags
-     *
-     * @return array Output similar to stat().
-     *
-     * @throws \Drupal\flysystem\Ported\Flysystem\FileNotFoundException
-     *
-     * @see stat()
-     */
-    public function handle($path, $flags)
-    {
-        if ($path === '') {
-            return $this->mergeMeta(['type' => 'dir', 'visibility' => AdapterInterface::VISIBILITY_PUBLIC]);
-        }
-
-        $ignore = $flags & FlysystemStreamWrapper::STREAM_URL_IGNORE_SIZE ? ['size'] : [];
-
-        $metadata = $this->getWithMetadata($path, $ignore);
-
-        // It's possible for getMetadata() to fail even if a file exists.
-        if (empty($metadata)) {
-            return static::$defaultMeta;
-        }
-
-        return $this->mergeMeta($metadata + ['visibility' => AdapterInterface::VISIBILITY_PUBLIC]);
-    }
-
-    /**
-     * Returns metadata.
-     *
-     * @param string $path The path to get metadata for.
-     * @param array $ignore Metadata to ignore.
-     *
-     * @return array The metadata as returned by Filesystem::getMetadata().
-     *
-     * @throws \Drupal\flysystem\Ported\Flysystem\FileNotFoundException
-     *
-     * @see \Drupal\flysystem\Ported\Flysystem\Filesystem::getMetadata()
-     */
-    protected function getWithMetadata($path, array $ignore)
-    {
-        $metadata = $this->filesystem->getMetadata($path);
-
-        if (empty($metadata)) {
-            return [];
-        }
-
-        $keys = array_diff($this->required, array_keys($metadata), $ignore);
-
-        foreach ($keys as $key) {
-            $method = 'get' . ucfirst($key);
-
-            try {
-                $metadata[$key] = $this->filesystem->$method($path);
-            } catch (\LogicException $e) {
-                // Some adapters don't support certain metadata. For instance,
-                // the Dropbox adapter throws exceptions when calling
-                // getVisibility(). Remove the required key so we don't keep
-                // calling it.
-                unset($this->required[$key]);
-            }
-        }
-
-        return $metadata;
-    }
-
-    /**
-     * Merges the available metadata from Filesystem::getMetadata().
-     *
-     * @param array $metadata The metadata.
-     *
-     * @return array All metadata with default values filled in.
-     */
-    protected function mergeMeta(array $metadata)
-    {
-        $ret = static::$defaultMeta;
-
-        $ret['uid'] = $this->uid->getUid();
-        $ret['gid'] = $this->uid->getGid();
-
-        $ret['mode'] = $metadata['type'] === 'dir' ? 040000 : 0100000;
-        $ret['mode'] += $this->permissions[$metadata['type']][$metadata['visibility']];
-
-        if (isset($metadata['size'])) {
-            $ret['size'] = (int) $metadata['size'];
-        }
-        if (isset($metadata['timestamp'])) {
-            $ret['mtime'] = (int) $metadata['timestamp'];
-            $ret['ctime'] = (int) $metadata['timestamp'];
-        }
-
-        $ret['atime'] = time();
-
-        return array_merge(array_values($ret), $ret);
-    }
-}
\ No newline at end of file
diff --git a/src/PortedPlugin/Touch.php b/src/PortedPlugin/Touch.php
deleted file mode 100644
index 1ca25e8..0000000
--- a/src/PortedPlugin/Touch.php
+++ /dev/null
@@ -1,41 +0,0 @@
-<?php
-
-namespace Drupal\flysystem\PortedPlugin;
-
-use Drupal\flysystem\Ported\Flysystem\Util;
-use Drupal\flysystem\PortedPlugin\AbstractPlugin;
-
-/**
- * Ported from twistor/flysystem-stream-wrapper. 
- * @see https://raw.githubusercontent.com/twistor/flysystem-stream-wrapper/master/src/Flysystem/Plugin/Touch.php.
- */
-class Touch extends AbstractPlugin
-{
-    /**
-     * @inheritdoc
-     */
-    public function getMethod()
-    {
-        return 'touch';
-    }
-
-    /**
-     * Emulates touch().
-     *
-     * @param string $path
-     *
-     * @return bool True on success, false on failure.
-     */
-    public function handle($path)
-    {
-        $path = Util::normalizePath($path);
-
-        $adapter = $this->filesystem->getAdapter();
-
-        if ($adapter->has($path)) {
-            return true;
-        }
-
-        return (bool) $adapter->write($path, '', $this->defaultConfig());
-    }
-}
\ No newline at end of file
diff --git a/src/ReadInterface.php b/src/ReadInterface.php
deleted file mode 100644
index a936d92..0000000
--- a/src/ReadInterface.php
+++ /dev/null
@@ -1,92 +0,0 @@
-<?php
-
-namespace Drupal\flysystem;
-
-/**
- * Port of Interfaces from League\Flysystem v1, factored out in later versions.
- * @see https://github.com/thephpleague/flysystem/blob/1.x/src/ReadInterface.php.
- */
-interface ReadInterface
-{
-    /**
-     * Check whether a file exists.
-     *
-     * @param string $path
-     *
-     * @return array|bool|null
-     */
-    public function has($path);
-
-    /**
-     * Read a file.
-     *
-     * @param string $path
-     *
-     * @return array|false
-     */
-    public function read($path);
-
-    /**
-     * Read a file as a stream.
-     *
-     * @param string $path
-     *
-     * @return array|false
-     */
-    public function readStream($path);
-
-    /**
-     * List contents of a directory.
-     *
-     * @param string $directory
-     * @param bool   $recursive
-     *
-     * @return array
-     */
-    public function listContents($directory = '', $recursive = false);
-
-    /**
-     * Get all the meta data of a file or directory.
-     *
-     * @param string $path
-     *
-     * @return array|false
-     */
-    public function getMetadata($path);
-
-    /**
-     * Get the size of a file.
-     *
-     * @param string $path
-     *
-     * @return array|false
-     */
-    public function getSize($path);
-
-    /**
-     * Get the mimetype of a file.
-     *
-     * @param string $path
-     *
-     * @return array|false
-     */
-    public function getMimetype($path);
-
-    /**
-     * Get the last modified time of a file as a timestamp.
-     *
-     * @param string $path
-     *
-     * @return array|false
-     */
-    public function getTimestamp($path);
-
-    /**
-     * Get the visibility of a file.
-     *
-     * @param string $path
-     *
-     * @return array|false
-     */
-    public function getVisibility($path);
-}
diff --git a/tests/src/Ported/ReplicateAdapterTests.php b/tests/src/Ported/ReplicateAdapterTests.php
deleted file mode 100644
index e812449..0000000
--- a/tests/src/Ported/ReplicateAdapterTests.php
+++ /dev/null
@@ -1,207 +0,0 @@
-<?php
-
-use Drupal\flysystem\Ported\Flysystem\Config;
-use Drupal\flysystem\Ported\Replicate\ReplicateAdapter;
-
-/**
- * Ported from league/flysystem-replicate-adapter.
- * @see https://raw.githubusercontent.com/thephpleague/flysystem-replicate-adapter/master/tests/ReplicateAdapterTests.php.
- */
-class ReplicateAdapterTests extends \PHPUnit_Framework_TestCase
-{
-    protected $adapter;
-    protected $source;
-    protected $replica;
-
-    public function setup()
-    {
-        $this->source = Mockery::mock('Drupal\\flysystem\\Ported\\Flysystem\\AdapterInterface');
-        $this->replica = Mockery::mock('Drupal\\flysystem\\Ported\\Flysystem\\AdapterInterface');
-        $this->adapter = new ReplicateAdapter($this->source, $this->replica);
-    }
-
-    public function callProvider()
-    {
-        return [
-            'write'         => ['write', true, 3],
-            'read'          => ['read', false, 1],
-            'readStream'    => ['readStream', false, 1],
-            'getVisibility' => ['getVisibility', false, 1],
-            'setVisibility' => ['setVisibility', true, 2],
-            'getSize'       => ['getSize', false, 1],
-            'getMimetype'   => ['getMimetype', false, 1],
-            'getMetadata'   => ['getMetadata', false, 1],
-            'getTimestamp'  => ['getTimestamp', false, 1],
-            'rename'        => ['rename', true, 2],
-            'copy'          => ['copy', true, 2],
-            'deleteDir'     => ['deleteDir', true, 1],
-            'createDir'     => ['createDir', true, 2],
-            'has'           => ['has', false, 1],
-            'listContents'  => ['listContents', false, 2],
-        ];
-    }
-
-    /**
-     * @dataProvider callProvider
-     */
-    public function testMethodDeligation($method, $useReplica, $arguments)
-    {
-        $expected = 'result';
-        $parameters = array_pad([], $arguments - 1, 'value');
-        $parameters[] = new Config();
-
-        $call = $this->source->shouldReceive($method)->twice();
-        $call = call_user_func_array([$call, 'with'], $parameters);
-        $call->andReturn(false, $expected);
-
-        if ($useReplica === true) {
-            $replicaCall = $this->replica->shouldReceive($method)->once();
-            $replicaCall = call_user_func_array([$replicaCall, 'with'], $parameters);
-            $replicaCall->andReturn($expected);
-        }
-
-        $this->assertFalse(call_user_func_array([$this->adapter, $method], $parameters));
-        $this->assertEquals($expected, call_user_func_array([$this->adapter, $method], $parameters));
-    }
-
-    public function testGetSourceAdapter()
-    {
-        $this->assertEquals($this->source, $this->adapter->getSourceAdapter());
-    }
-
-    public function testGetReplicaAdapter()
-    {
-        $this->assertEquals($this->source, $this->adapter->getReplicaAdapter());
-    }
-
-    public function testMethodUpdateSourceWillNotUpdate()
-    {
-        $this->source->shouldReceive('update')->once()->andReturn(false);
-
-        $this->assertFalse(call_user_func_array([$this->adapter, 'update'], ['value', 'value', new Config()]));
-    }
-
-    public function testMethodUpdateSourceWillUpdateAndReplicaWillUpdate()
-    {
-        $this->source->shouldReceive('update')->once()->andReturn(true);
-        $this->replica->shouldReceive('has')->once()->andReturn(true);
-        $this->replica->shouldReceive('update')->once()->andReturn(true);
-
-        $this->assertTrue(call_user_func_array([$this->adapter, 'update'], ['value', 'value', new Config()]));
-    }
-
-    public function testMethodUpdateSourceWillUpdateAndReplicaWillWrite()
-    {
-        $this->source->shouldReceive('update')->once()->andReturn(true);
-        $this->replica->shouldReceive('has')->once()->andReturn(false);
-        $this->replica->shouldReceive('write')->once()->andReturn(true);
-
-        $this->assertTrue(call_user_func_array([$this->adapter, 'update'], ['value', 'value', new Config()]));
-    }
-
-    public function testMethodUpdateStreamSourceWillNotUpdate()
-    {
-        $this->source->shouldReceive('updateStream')->once()->andReturn(false);
-
-        $this->assertFalse(call_user_func_array([$this->adapter, 'updateStream'], ['value', 'value', new Config()]));
-    }
-
-    public function testMethodUpdateStreamSourceWillUpdateAndReplicaWillUpdate()
-    {
-        $this->source->shouldReceive('updateStream')->once()->andReturn(true);
-        $this->replica->shouldReceive('has')->once()->andReturn(true);
-        $this->replica->shouldReceive('updateStream')->once()->andReturn(true);
-
-        $this->assertTrue($this->adapter->updateStream('value', fopen('data:text/plain,value', 'r+'), new Config()));
-    }
-
-    public function testMethodUpdateStreamSourceWillUpdateAndReplicaWillWrite()
-    {
-        $this->source->shouldReceive('updateStream')->once()->andReturn(true);
-        $this->replica->shouldReceive('has')->once()->andReturn(false);
-        $this->replica->shouldReceive('writeStream')->once()->andReturn(true);
-
-        $this->assertTrue($this->adapter->updateStream('value', fopen('data:text/plain,value', 'r+'), new Config()));
-    }
-
-    public function testMethodUpdateStreamSourceWillWriteAndEnsureSeekableWillFail()
-    {
-        stream_wrapper_register('test', 'NonSeekableStream');
-
-        $this->source->shouldReceive('updateStream')->once()->andReturn(true);
-        $this->source->shouldReceive('readStream')->once()->andReturn(fopen('data:text/plain,value', 'r+'));
-
-        $this->assertFalse($this->adapter->updateStream('value', fopen('test://value', 'r+'), new Config()));
-
-        stream_wrapper_unregister('test');
-    }
-
-    public function testMethodWriteStreamSourceWillWriteAndReplicaWillWrite()
-    {
-        $this->source->shouldReceive('writeStream')->once()->andReturn(true);
-        $this->replica->shouldReceive('writeStream')->once()->andReturn(true);
-
-        $this->assertTrue($this->adapter->writeStream('value', fopen('data:text/plain,value', 'r+'), new Config()));
-    }
-
-    public function testMethodWriteStreamSourceWillNotWrite()
-    {
-        $this->source->shouldReceive('writeStream')->once()->andReturn(false);
-
-        $this->assertFalse($this->adapter->writeStream('value', fopen('data:text/plain,value', 'r+'), new Config()));
-    }
-
-    public function testMethodWriteStreamSourceWillWriteAndEnsureSeekableWillFail()
-    {
-        stream_wrapper_register('test', 'NonSeekableStream');
-
-        $this->source->shouldReceive('writeStream')->once()->andReturn(true);
-        $this->source->shouldReceive('readStream')->once()->andReturn(fopen('data:text/plain,value', 'r+'));
-
-        $this->assertFalse($this->adapter->writeStream('value', fopen('test://value', 'r+'), new Config()));
-
-        stream_wrapper_unregister('test');
-    }
-
-    public function testMethodDeleteSourceWillNotDelete()
-    {
-        $this->source->shouldReceive('delete')->once()->andReturn(false);
-
-        $this->assertFalse(call_user_func_array([$this->adapter, 'delete'], ['value']));
-    }
-
-    public function testMethodDeleteSourceWillDeleteAndReplicaWillDelete()
-    {
-        $this->source->shouldReceive('delete')->once()->andReturn(true);
-        $this->replica->shouldReceive('has')->once()->andReturn(true);
-        $this->replica->shouldReceive('delete')->once()->andReturn(true);
-
-        $this->assertTrue(call_user_func_array([$this->adapter, 'delete'], ['value']));
-    }
-
-    public function testMethodDeleteSourceWillDeleteAndReplicaWillNotDelete()
-    {
-        $this->source->shouldReceive('delete')->once()->andReturn(true);
-        $this->replica->shouldReceive('has')->once()->andReturn(false);
-
-        $this->assertTrue(call_user_func_array([$this->adapter, 'delete'], ['value']));
-    }
-}
-
-class NonSeekableStream
-{
-    public function stream_open($uri, $mode, $options, &$opened_path)
-    {
-        return true;
-    }
-
-    public function stream_seek($offset, $whence = SEEK_SET)
-    {
-        return false;
-    }
-
-    public function stream_eof()
-    {
-        return false;
-    }
-}
diff --git a/tests/src/Unit/Flysystem/Adapter/DrupalCacheAdapterTest.php b/tests/src/Unit/Flysystem/Adapter/DrupalCacheAdapterTest.php
index 9355940..0b6d04e 100644
--- a/tests/src/Unit/Flysystem/Adapter/DrupalCacheAdapterTest.php
+++ b/tests/src/Unit/Flysystem/Adapter/DrupalCacheAdapterTest.php
@@ -6,8 +6,8 @@ use Drupal\Core\Cache\MemoryBackend;
 use Drupal\flysystem\Flysystem\Adapter\CacheItemBackend;
 use Drupal\flysystem\Flysystem\Adapter\DrupalCacheAdapter;
 use Drupal\Tests\UnitTestCase;
-use Drupal\flysystem\Ported\Flysystem\AdapterInterface;
-use Drupal\flysystem\Ported\Flysystem\Config;
+use League\Flysystem\AdapterInterface;
+use League\Flysystem\Config;
 
 /**
  * Test the Drupal Cache Adapter.
@@ -36,7 +36,7 @@ class DrupalCacheAdapterTest extends UnitTestCase {
   /**
    * The wrapped Flysytem adaper.
    *
-   * @var \Drupal\flysystem\Ported\Flysystem\AdapterInterface|\PHPUnit_Framework_MockObject_MockObject
+   * @var \League\Flysystem\AdapterInterface|\PHPUnit_Framework_MockObject_MockObject
    */
   protected $adapter;
 
diff --git a/tests/src/Unit/Flysystem/Adapter/MissingAdapterTest.php b/tests/src/Unit/Flysystem/Adapter/MissingAdapterTest.php
index e0c132d..7bae52f 100644
--- a/tests/src/Unit/Flysystem/Adapter/MissingAdapterTest.php
+++ b/tests/src/Unit/Flysystem/Adapter/MissingAdapterTest.php
@@ -4,7 +4,7 @@ namespace Drupal\Tests\flysystem\Unit\Flysystem\Adapter;
 
 use Drupal\flysystem\Flysystem\Adapter\MissingAdapter;
 use Drupal\Tests\UnitTestCase;
-use Drupal\flysystem\Ported\Flysystem\Config;
+use League\Flysystem\Config;
 
 /**
  * @coversDefaultClass \Drupal\flysystem\Flysystem\Adapter\MissingAdapter
diff --git a/tests/src/Unit/Flysystem/FtpTest.php b/tests/src/Unit/Flysystem/FtpTest.php
index 78d25f6..a4063b4 100644
--- a/tests/src/Unit/Flysystem/FtpTest.php
+++ b/tests/src/Unit/Flysystem/FtpTest.php
@@ -6,7 +6,7 @@ namespace Drupal\Tests\flysystem\Unit\Flysystem {
   use Drupal\flysystem\Flysystem\Adapter\MissingAdapter;
   use Drupal\flysystem\Flysystem\Ftp;
   use Drupal\Tests\UnitTestCase;
-  use Drupal\flysystem\Ported\Flysystem\Adapter\Ftp as LeagueFtp;
+  use League\Flysystem\Adapter\Ftp as LeagueFtp;
 
   /**
    * @coversDefaultClass \Drupal\flysystem\Flysystem\Ftp
@@ -65,7 +65,7 @@ namespace Drupal\Tests\flysystem\Unit\Flysystem {
   }
 }
 
-namespace Drupal\flysystem\Ported\Flysystem\Adapter {
+namespace League\Flysystem\Adapter {
 
   /**
    * Stubs ftp_chdir().
diff --git a/tests/src/Unit/Flysystem/LocalTest.php b/tests/src/Unit/Flysystem/LocalTest.php
index 85b8c90..233f8b3 100644
--- a/tests/src/Unit/Flysystem/LocalTest.php
+++ b/tests/src/Unit/Flysystem/LocalTest.php
@@ -9,7 +9,7 @@ use Drupal\Core\Site\Settings;
 use Drupal\flysystem\Flysystem\Adapter\MissingAdapter;
 use Drupal\flysystem\Flysystem\Local;
 use Drupal\Tests\UnitTestCase;
-use Drupal\flysystem\Ported\Flysystem\Adapter\Local as LocalAdapter;
+use League\Flysystem\Adapter\Local as LocalAdapter;
 use Prophecy\Argument;
 
 /**
diff --git a/tests/src/Unit/FlysystemBridgeTest.php b/tests/src/Unit/FlysystemBridgeTest.php
index e15b597..7f50bd6 100644
--- a/tests/src/Unit/FlysystemBridgeTest.php
+++ b/tests/src/Unit/FlysystemBridgeTest.php
@@ -8,7 +8,7 @@ use Drupal\flysystem\Flysystem\Missing;
 use Drupal\flysystem\FlysystemBridge;
 use Drupal\flysystem\FlysystemFactory;
 use Drupal\Tests\UnitTestCase;
-use Drupal\flysystem\Ported\Flysystem\Filesystem;
+use League\Flysystem\Filesystem;
 use Symfony\Component\DependencyInjection\ContainerBuilder;
 
 /**
@@ -27,7 +27,7 @@ class FlysystemBridgeTest extends UnitTestCase {
   /**
    * File system.
    *
-   * @var \Drupal\flysystem\Ported\Flysystem\FilesystemInterface
+   * @var \League\Flysystem\FilesystemInterface
    */
   protected $filesystem;
 
diff --git a/tests/src/Unit/FlysystemFactoryTest.php b/tests/src/Unit/FlysystemFactoryTest.php
index 853c3bd..5f1d73a 100644
--- a/tests/src/Unit/FlysystemFactoryTest.php
+++ b/tests/src/Unit/FlysystemFactoryTest.php
@@ -12,9 +12,9 @@ use Drupal\flysystem\Flysystem\Missing;
 use Drupal\flysystem\FlysystemFactory;
 use Drupal\flysystem\Plugin\FlysystemPluginInterface;
 use Drupal\Tests\UnitTestCase;
-use Drupal\flysystem\Ported\Flysystem\Adapter\NullAdapter;
-use Drupal\flysystem\Ported\Flysystem\FilesystemInterface;
-use Drupal\flysystem\Ported\Replicate\ReplicateAdapter;
+use League\Flysystem\Adapter\NullAdapter;
+use League\Flysystem\FilesystemInterface;
+use League\Flysystem\Replicate\ReplicateAdapter;
 use Prophecy\Argument;
 use Symfony\Contracts\EventDispatcher\EventDispatcherInterface;
 
diff --git a/tests/src/Unit/Form/ConfigFormTest.php b/tests/src/Unit/Form/ConfigFormTest.php
index e0fb359..54f77fe 100644
--- a/tests/src/Unit/Form/ConfigFormTest.php
+++ b/tests/src/Unit/Form/ConfigFormTest.php
@@ -8,9 +8,9 @@ namespace Drupal\Tests\flysystem\Unit\Form {
   use Drupal\flysystem\FlysystemFactory;
   use Drupal\flysystem\Form\ConfigForm;
   use Drupal\Tests\UnitTestCase;
-  use Drupal\flysystem\Ported\Flysystem\Filesystem;
-  use Drupal\flysystem\Ported\Flysystem\FilesystemInterface;
-  use Drupal\flysystem\Ported\Flysystem\Memory\MemoryAdapter;
+  use League\Flysystem\Filesystem;
+  use League\Flysystem\FilesystemInterface;
+  use League\Flysystem\Memory\MemoryAdapter;
   use Prophecy\Argument;
   use Psr\Log\LoggerInterface;
   use Symfony\Component\DependencyInjection\ContainerBuilder;
diff --git a/tests/src/Unit/InstallFunctionsTest.php b/tests/src/Unit/InstallFunctionsTest.php
index f304260..cdbe926 100644
--- a/tests/src/Unit/InstallFunctionsTest.php
+++ b/tests/src/Unit/InstallFunctionsTest.php
@@ -7,7 +7,7 @@ use Drupal\Core\Site\Settings;
 use Drupal\flysystem\FlysystemFactory;
 use Drupal\Tests\UnitTestCase;
 use Symfony\Component\DependencyInjection\ContainerBuilder;
-use Drupal\flysystem\FlysystemStreamWrapper;
+use Twistor\FlysystemStreamWrapper;
 
 /**
  * Tests flysystem.install functions.
