diff --git a/flysystem.module b/flysystem.module
index d6a1589..e9fb943 100644
--- a/flysystem.module
+++ b/flysystem.module
@@ -49,33 +49,34 @@ function flysystem_file_download($uri) {
 
 /**
  * Implements hook_entity_access().
+ *
  * @see Drupal\file\FileAccessControlHandler
  */
 function flysystem_entity_access(EntityInterface $entity, $operation, AccountInterface $account) {
-    if (!$entity instanceof FileInterface) {
-        return AccessResult::neutral();
-    }
+  if (!$entity instanceof FileInterface) {
+    return AccessResult::neutral();
+  }
 
-    if (!in_array($operation, ['download', 'view'])) {
-        return AccessResult::neutral();
-    }
+  if (!in_array($operation, ['download', 'view'])) {
+    return AccessResult::neutral();
+  }
 
-    $schemes = Drupal::service('flysystem_factory')->getSchemes();
-    $scheme = StreamWrapperManager::getScheme($entity->getFileUri());
+  $schemes = Drupal::service('flysystem_factory')->getSchemes();
+  $scheme = StreamWrapperManager::getScheme($entity->getFileUri());
 
-    if (!$scheme || !in_array($scheme, $schemes, TRUE)) {
-        return AccessResult::neutral();
-    }
+  if (!$scheme || !in_array($scheme, $schemes, TRUE)) {
+    return AccessResult::neutral();
+  }
 
-    $settings = Settings::get('flysystem', []);
+  $settings = Settings::get('flysystem', []);
 
-    if (empty($settings[$scheme]['config']['public'])) {
-        return AccessResult::neutral();
-    }
+  if (empty($settings[$scheme]['config']['public'])) {
+    return AccessResult::neutral();
+  }
 
-    if ($operation === 'download') {
-        return AccessResult::allowed();
-    }
+  if ($operation === 'download') {
+    return AccessResult::allowed();
+  }
 
-    return AccessResult::allowedIfHasPermission($account, 'access content');
+  return AccessResult::allowedIfHasPermission($account, 'access content');
 }
diff --git a/src/Asset/AssetDumper.php b/src/Asset/AssetDumper.php
index 8cb8294..28677e5 100644
--- a/src/Asset/AssetDumper.php
+++ b/src/Asset/AssetDumper.php
@@ -4,7 +4,9 @@ namespace Drupal\flysystem\Asset;
 
 use Drupal\Component\Utility\Crypt;
 use Drupal\Core\Asset\AssetDumper as DrupalAssetDumper;
+use Drupal\Core\ConfigFactory;
 use Drupal\Core\File\FileSystemInterface;
+use Drupal\Core\File\FileExists;
 
 /**
  * Flysystem dependency injection container.
@@ -15,6 +17,26 @@ class AssetDumper extends DrupalAssetDumper {
 
   use SchemeExtensionTrait;
 
+  /**
+   * Drupal Core Config Factory service.
+   *
+   * @var \Dryupal\Core\ConfigFactory
+   */
+  protected $configFactory;
+
+  /**
+   * AssetDumper constructor.
+   *
+   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   *   The file handler.
+   * @param \Drupal\Core\Config\ConfigFactory $config_factory
+   *   Drupal Config Factory service.
+   */
+  public function __construct(FileSystemInterface $file_system, ConfigFactory $config_factory) {
+    parent::__construct($file_system);
+    $this->configFactory = $config_factory;
+  }
+
   /**
    * {@inheritdoc}
    */
@@ -27,7 +49,7 @@ class AssetDumper extends DrupalAssetDumper {
     $uri = $path . '/' . $filename;
     // Create the CSS or JS file.
     $this->fileSystem->prepareDirectory($path, FileSystemInterface::CREATE_DIRECTORY);
-    if (!file_exists($uri) && !$this->fileSystem->saveData($data, $uri, FileSystemInterface::EXISTS_REPLACE)) {
+    if (!file_exists($uri) && !$this->fileSystem->saveData($data, $uri, FileExists::Replace)) {
       return FALSE;
     }
     // If CSS/JS gzip compression is enabled and the zlib extension is available
@@ -38,8 +60,8 @@ class AssetDumper extends DrupalAssetDumper {
     // file) in generating the file anyway. Sites on servers where rewrite rules
     // aren't working can set css.gzip to FALSE in order to skip
     // generating a file that won't be used.
-    if (extension_loaded('zlib') && \Drupal::config('system.performance')->get($file_extension . '.gzip')) {
-      if (!file_exists($uri . '.gz') && !$this->fileSystem->saveData(gzencode($data, 9, FORCE_GZIP), $uri . '.gz', FileSystemInterface::EXISTS_REPLACE)) {
+    if (extension_loaded('zlib') && $this->configFactory->get('system.performance')->get($file_extension . '.gzip')) {
+      if (!file_exists($uri . '.gz') && !$this->fileSystem->saveData(gzencode($data, 9, FORCE_GZIP), $uri . '.gz', FileExists::Replace)) {
         return FALSE;
       }
     }
diff --git a/src/Asset/CssCollectionOptimizer.php b/src/Asset/CssCollectionOptimizer.php
index 4ab1679..3bd04f0 100644
--- a/src/Asset/CssCollectionOptimizer.php
+++ b/src/Asset/CssCollectionOptimizer.php
@@ -3,7 +3,9 @@
 namespace Drupal\flysystem\Asset;
 
 use Drupal\Core\Asset\CssCollectionOptimizer as DrupalCssCollectionOptimizer;
+use Drupal\Core\ConfigFactory;
 use Drupal\Core\Logger\LoggerChannelTrait;
+use Drupal\Core\Logger\LoggerChannelFactoryInterface;
 
 /**
  * Optimizes CSS assets.
@@ -13,6 +15,54 @@ class CssCollectionOptimizer extends DrupalCssCollectionOptimizer {
   use SchemeExtensionTrait;
   use LoggerChannelTrait;
 
+  /**
+   * Drupal Core Config Factory service.
+   *
+   * @var \Drupal\Core\ConfigFactory
+   */
+  protected $configFactory;
+
+  /**
+   * Drupal DateTime service.
+   *
+   * @var \Drupal\Component\Datetime\TimeInterface
+   */
+  protected $dateTime;
+
+  /**
+   * Drupal LoggerChannel Factory service.
+   *
+   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface
+   */
+  protected $loggerChannelFactory;
+
+  /**
+   * Constructs a CssCollectionOptimizer.
+   *
+   * @param \Drupal\Core\Asset\AssetCollectionGrouperInterface $grouper
+   *   The grouper for CSS assets.
+   * @param \Drupal\Core\Asset\AssetOptimizerInterface $optimizer
+   *   The optimizer for a single CSS asset.
+   * @param \Drupal\Core\Asset\AssetDumperInterface $dumper
+   *   The dumper for optimized CSS assets.
+   * @param \Drupal\Core\State\StateInterface $state
+   *   The state key/value store.
+   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   *   The file system service.
+   * @param \Drupal\Core\ConfigFactory $config_factory
+   *   Drupal Core ConfigFactory service.
+   * @param \Drupal\Component\Datetime\TimeInterface $date_time
+   *   Drupal DateTime service.
+   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
+   *   Drupal Logger Factory service.
+   */
+  public function __construct(AssetCollectionGrouperInterface $grouper, AssetOptimizerInterface $optimizer, AssetDumperInterface $dumper, StateInterface $state, FileSystemInterface $file_system, ConfigFactory $config_factory, DateTime $date_time, LoggerChannelFactoryInterface $logger_factory) {
+    parent::__construct($grouper, $optimizer, $dumper, $state, $file_system);
+    $this->configFactory = $config_factory;
+    $this->dateTime = $date_time;
+    $this->loggerChannelFactory = $logger_factory;
+  }
+
   /**
    * {@inheritdoc}
    */
@@ -22,13 +72,13 @@ class CssCollectionOptimizer extends DrupalCssCollectionOptimizer {
     $file_system = $this->fileSystem;
     $delete_stale = static function ($uri) use ($file_system) {
       // Default stale file threshold is 30 days (2592000 seconds).
-      $stale_file_threshold = \Drupal::config('system.performance')->get('stale_file_threshold') ?? 2592000;
-      if (\Drupal::time()->getRequestTime() - filemtime($uri) > $stale_file_threshold) {
+      $stale_file_threshold = self::$configFactory->get('system.performance')->get('stale_file_threshold') ?? 2592000;
+      if (self::$dateTime->getRequestTime() - filemtime($uri) > $stale_file_threshold) {
         try {
           $file_system->delete($uri);
         }
         catch (\Exception $e) {
-          \Drupal::service('logger.factory')->get('flysystem')->error($e->getMessage());
+          self::$loggerChannelFactory->get('flysystem')->error($e->getMessage());
         }
       }
     };
diff --git a/src/Asset/CssCollectionOptimizerLazy.php b/src/Asset/CssCollectionOptimizerLazy.php
index ace03d0..9cceb13 100644
--- a/src/Asset/CssCollectionOptimizerLazy.php
+++ b/src/Asset/CssCollectionOptimizerLazy.php
@@ -4,6 +4,7 @@ namespace Drupal\flysystem\Asset;
 
 use Drupal\Core\Asset\CssCollectionOptimizerLazy as DrupalCssCollectionOptimizerLazy;
 use Drupal\Core\File\Exception\FileException;
+use Drupal\Core\Logger\LoggerChannelFactoryInterface;
 
 /**
  * Optimizes CSS assets.
@@ -12,14 +13,65 @@ class CssCollectionOptimizerLazy extends DrupalCssCollectionOptimizerLazy {
 
   use SchemeExtensionTrait;
 
+  /**
+   * Drupal LoggerChannel Factory service.
+   *
+   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface
+   */
+  protected $loggerChannelFactory;
+
+  /**
+   * Constructs a CssCollectionOptimizerLazy.
+   *
+   * @param \Drupal\Core\Asset\AssetCollectionGrouperInterface $grouper
+   *   The grouper for CSS assets.
+   * @param \Drupal\Core\Asset\AssetOptimizerInterface $optimizer
+   *   The asset optimizer.
+   * @param \Drupal\Core\Theme\ThemeManagerInterface $themeManager
+   *   The theme manager.
+   * @param \Drupal\Core\Asset\LibraryDependencyResolverInterface $dependencyResolver
+   *   The library dependency resolver.
+   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
+   *   The request stack.
+   * @param \Drupal\Core\File\FileSystemInterface $fileSystem
+   *   The file system service.
+   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   *   The config factory.
+   * @param \Drupal\Core\File\FileUrlGeneratorInterface $fileUrlGenerator
+   *   The file URL generator.
+   * @param \Drupal\Component\Datetime\TimeInterface $time
+   *   The time service.
+   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
+   *   The language manager.
+   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
+   *   Drupal Core LoggerChannel Factory service.
+   */
+  public function __construct(
+    protected readonly AssetCollectionGrouperInterface $grouper,
+    protected readonly AssetOptimizerInterface $optimizer,
+    protected readonly ThemeManagerInterface $themeManager,
+    protected readonly LibraryDependencyResolverInterface $dependencyResolver,
+    protected readonly RequestStack $requestStack,
+    protected readonly FileSystemInterface $fileSystem,
+    protected readonly ConfigFactoryInterface $configFactory,
+    protected readonly FileUrlGeneratorInterface $fileUrlGenerator,
+    protected readonly TimeInterface $time,
+    protected readonly LanguageManagerInterface $languageManager,
+    LoggerChannelFactoryInterface $logger_factory,
+  ) {
+    parent::__construct($grouper, $ptimizer, $themeManager, $dependencyResolver, $requestStack, $fileSystem, $configFactory, $fileUrlGenerator, $time, $languageManager, $logger_factory);
+    $this->loggerChannelFactory = $logger_factory;
+  }
+
   /**
    * {@inheritdoc}
    */
   public function deleteAll() {
     try {
       $this->fileSystem->deleteRecursive($this->getSchemeForExtension('css') . '://css');
-    } catch (FileException $fileException) {
-      \Drupal::logger('flysystem')->error($fileException->getMessage());
+    }
+    catch (FileException $fileException) {
+      $this->loggerChannelFactory->get('flysystem')->error($fileException->getMessage());
     }
   }
 
diff --git a/src/Asset/CssOptimizer.php b/src/Asset/CssOptimizer.php
index 6ff4dec..4aa464d 100644
--- a/src/Asset/CssOptimizer.php
+++ b/src/Asset/CssOptimizer.php
@@ -14,7 +14,7 @@ class CssOptimizer extends DrupalCssOptimizer {
   /**
    * {@inheritdoc}
    */
-  public function rewriteFileURI($matches): string {
+  public function rewriteFileURI($matches): string { // phpcs:ignore
     // Prefix with base and remove '../' segments where possible.
     $path = $this->rewriteFileURIBasePath . $matches[1];
     $last = '';
diff --git a/src/Asset/JsCollectionOptimizer.php b/src/Asset/JsCollectionOptimizer.php
index ca61254..de879e3 100644
--- a/src/Asset/JsCollectionOptimizer.php
+++ b/src/Asset/JsCollectionOptimizer.php
@@ -13,6 +13,54 @@ class JsCollectionOptimizer extends DrupalJsCollectionOptimizer {
   use SchemeExtensionTrait;
   use LoggerChannelTrait;
 
+  /**
+   * Drupal Core Config Factory service.
+   *
+   * @var \Drupal\Core\ConfigFactory
+   */
+  protected $configFactory;
+
+  /**
+   * Drupal DateTime service.
+   *
+   * @var \Drupal\Component\Datetime\TimeInterface
+   */
+  protected $dateTime;
+
+  /**
+   * Drupal LoggerChannel Factory service.
+   *
+   * @var \Drupal\Core\Logger\LoggerChannelFactoryInterface
+   */
+  protected $loggerChannelFactory;
+
+  /**
+   * Constructs a JsCollectionOptimizer.
+   *
+   * @param \Drupal\Core\Asset\AssetCollectionGrouperInterface $grouper
+   *   The grouper for JS assets.
+   * @param \Drupal\Core\Asset\AssetOptimizerInterface $optimizer
+   *   The optimizer for a single JS asset.
+   * @param \Drupal\Core\Asset\AssetDumperInterface $dumper
+   *   The dumper for optimized JS assets.
+   * @param \Drupal\Core\State\StateInterface $state
+   *   The state key/value store.
+   * @param \Drupal\Core\File\FileSystemInterface $file_system
+   *   The file system service.
+   * @param \Drupal\Core\ConfigFactory $config_factory
+   *   Drupal Core ConfigFactory service.
+   * @param \Drupal\Component\Datetime\TimeInterface $date_time
+   *   Drupal DateTime service.
+   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
+   *   Drupal Logger Factory service.
+   */
+  public function __construct(AssetCollectionGrouperInterface $grouper, AssetOptimizerInterface $optimizer, AssetDumperInterface $dumper, StateInterface $state, FileSystemInterface $file_system, ConfigFactory $config_factory, TimeInterface $date_time, LoggerChannelFactoryInterface $logger_factory) {
+    parent::__construct($grouper, $optimizer, $dumper, $state, $file_system);
+    $this->configFactory = $config_factory;
+    $this->dateTime = $date_time;
+    $this->loggerChannelFactory = $logger_factory;
+  }
+
   /**
    * {@inheritdoc}
    */
@@ -22,13 +70,13 @@ class JsCollectionOptimizer extends DrupalJsCollectionOptimizer {
     $file_system = $this->fileSystem;
     $delete_stale = static function ($uri) use ($file_system) {
       // Default stale file threshold is 30 days (2592000 seconds).
-      $stale_file_threshold = \Drupal::config('system.performance')->get('stale_file_threshold') ?? 2592000;
-      if (\Drupal::time()->getRequestTime() - filemtime($uri) > $stale_file_threshold) {
+      $stale_file_threshold = self::$configFactory->get('system.performance')->get('stale_file_threshold') ?? 2592000;
+      if (self::$dateTime->getRequestTime() - filemtime($uri) > $stale_file_threshold) {
         try {
           $file_system->delete($uri);
         }
         catch (\Exception $e) {
-          \Drupal::service('logger.factory')->get('flysystem')->error($e->getMessage());
+          self::$loggerChannelFactory->get('flysystem')->error($e->getMessage());
         }
       }
     };
diff --git a/src/Asset/JsCollectionOptimizerLazy.php b/src/Asset/JsCollectionOptimizerLazy.php
index 33ed3c4..8c9232d 100644
--- a/src/Asset/JsCollectionOptimizerLazy.php
+++ b/src/Asset/JsCollectionOptimizerLazy.php
@@ -12,14 +12,58 @@ class JsCollectionOptimizerLazy extends DrupalJsCollectionOptimizerLazy {
 
   use SchemeExtensionTrait;
 
+  /**
+   * Constructs a JsCollectionOptimizerLazy.
+   *
+   * @param \Drupal\Core\Asset\AssetCollectionGrouperInterface $grouper
+   *   The grouper for JS assets.
+   * @param \Drupal\Core\Asset\AssetOptimizerInterface $optimizer
+   *   The asset optimizer.
+   * @param \Drupal\Core\Theme\ThemeManagerInterface $themeManager
+   *   The theme manager.
+   * @param \Drupal\Core\Asset\LibraryDependencyResolverInterface $dependencyResolver
+   *   The library dependency resolver.
+   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
+   *   The request stack.
+   * @param \Drupal\Core\File\FileSystemInterface $fileSystem
+   *   The file system service.
+   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   *   The config factory.
+   * @param \Drupal\Core\File\FileUrlGeneratorInterface $fileUrlGenerator
+   *   The file URL generator.
+   * @param \Drupal\Component\Datetime\TimeInterface $time
+   *   The time service.
+   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
+   *   The language manager.
+   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $logger_factory
+   *   Drupal Core LoggerChannel Factory service.
+   */
+  public function __construct(
+    protected readonly AssetCollectionGrouperInterface $grouper,
+    protected readonly AssetOptimizerInterface $optimizer,
+    protected readonly ThemeManagerInterface $themeManager,
+    protected readonly LibraryDependencyResolverInterface $dependencyResolver,
+    protected readonly RequestStack $requestStack,
+    protected readonly FileSystemInterface $fileSystem,
+    protected readonly ConfigFactoryInterface $configFactory,
+    protected readonly FileUrlGeneratorInterface $fileUrlGenerator,
+    protected readonly TimeInterface $time,
+    protected readonly LanguageManagerInterface $languageManager,
+    LoggerChannelFactoryInterface $logger_factory,
+  ) {
+    parent::__construct($grouper, $ptimizer, $themeManager, $dependencyResolver, $requestStack, $fileSystem, $configFactory, $fileUrlGenerator, $time, $languageManager, $logger_factory);
+    $this->loggerChannelFactory = $logger_factory;
+  }
+
   /**
    * {@inheritdoc}
    */
   public function deleteAll() {
     try {
       $this->fileSystem->deleteRecursive($this->getSchemeForExtension('js') . '://js');
-    } catch (FileException $fileException) {
-      \Drupal::logger('flysystem')->error($fileException->getMessage());
+    }
+    catch (FileException $fileException) {
+      $this->loggerChannelFactory->get('flysystem')->error($fileException->getMessage());
     }
   }
 
diff --git a/src/FlysystemServiceProvider.php b/src/FlysystemServiceProvider.php
index 1c2590d..0562d58 100644
--- a/src/FlysystemServiceProvider.php
+++ b/src/FlysystemServiceProvider.php
@@ -70,17 +70,29 @@ class FlysystemServiceProvider implements ServiceProviderInterface {
       ->setClass('Drupal\flysystem\Asset\AssetDumper');
 
     $optimizer = $container->getDefinition('asset.' . $extension . '.collection_optimizer');
+
     if ($optimizer->getClass() === 'Drupal\Core\Asset\\' . ucfirst($extension) . 'CollectionOptimizer') {
-      $optimizer->setClass('Drupal\flysystem\Asset\\' . ucfirst($extension) . 'CollectionOptimizer');
+      $optimizer
+        ->setClass('Drupal\flysystem\Asset\\' . ucfirst($extension) . 'CollectionOptimizer')
+        ->addArgument('@config.factory')
+        ->addArgument('@datetime.time')
+        ->addArgument('@logger.factory');
+
     }
     if ($optimizer->getClass() === 'Drupal\Core\Asset\\' . ucfirst($extension) . 'CollectionOptimizerLazy') {
-      $optimizer->setClass('Drupal\flysystem\Asset\\' . ucfirst($extension) . 'CollectionOptimizerLazy');
+      $optimizer
+        ->setClass('Drupal\flysystem\Asset\\' . ucfirst($extension) . 'CollectionOptimizerLazy')
+        ->addArgument('@logger.factory');
     }
 
     if ($extension === 'css') {
       $container
         ->getDefinition('asset.css.optimizer')
-        ->setClass('Drupal\flysystem\Asset\CssOptimizer');
+        ->setClass('Drupal\flysystem\Asset\CssOptimizer')
+        ->addArgument('@config.factory')
+        ->addArgument('@datetime.time')
+        ->addArgument('@logger.factory');
+
     }
   }
 
diff --git a/src/Routing/FlysystemRoutes.php b/src/Routing/FlysystemRoutes.php
index d1ad705..d483812 100644
--- a/src/Routing/FlysystemRoutes.php
+++ b/src/Routing/FlysystemRoutes.php
@@ -99,7 +99,7 @@ class FlysystemRoutes implements ContainerInjectionInterface {
           '_access' => 'TRUE',
         ],
         [
-          '_maintenance_access' => 'TRUE'
+          '_maintenance_access' => 'TRUE',
         ]
       );
 
@@ -116,7 +116,7 @@ class FlysystemRoutes implements ContainerInjectionInterface {
             '_access' => 'TRUE',
           ],
           [
-            '_maintenance_access' => 'TRUE'
+            '_maintenance_access' => 'TRUE',
           ]
         );
       }
@@ -135,7 +135,7 @@ class FlysystemRoutes implements ContainerInjectionInterface {
           'scheme' => '^[a-zA-Z0-9+.-]+$',
         ],
         [
-          '_maintenance_access' => 'TRUE'
+          '_maintenance_access' => 'TRUE',
         ]
       );
     }
diff --git a/tests/src/Unit/Plugin/FlysystemPluginManagerTest.php b/tests/src/Unit/Plugin/FlysystemPluginManagerTest.php
index ef9f683..8b33809 100644
--- a/tests/src/Unit/Plugin/FlysystemPluginManagerTest.php
+++ b/tests/src/Unit/Plugin/FlysystemPluginManagerTest.php
@@ -35,7 +35,7 @@ class FlysystemPluginManagerTest extends UnitTestCase {
       'test3' => ['extensions' => ['missing_extension']],
     ];
 
-    $method->invokeArgs($manager, [&$definitions]);
+    $method->invokeArgs($manager, [$definitions]);
     $this->assertCount(2, $definitions);
     $this->assertArrayHasKey('test1', $definitions);
     $this->assertArrayHasKey('test2', $definitions);
