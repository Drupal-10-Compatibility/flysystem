diff --git a/PATCHES.txt b/PATCHES.txt
deleted file mode 100644
index 11d2d12..0000000
--- a/PATCHES.txt
+++ /dev/null
@@ -1,3 +0,0 @@
-This file was automatically generated by Composer Patches (https://github.com/cweagans/composer-patches)
-Patches applied to this directory:
-
diff --git a/phpunit.xml.dist b/phpunit.xml.dist
index 3d0865d..429dcf7 100644
--- a/phpunit.xml.dist
+++ b/phpunit.xml.dist
@@ -8,9 +8,6 @@
   <testsuites>
     <testsuite name="Flysystem Unit Test Suite">
       <directory>./tests</directory>
-      <exclude>
-        ./tests/src/Kernel/CollectionOptimizerTest.php
-      </exclude>
     </testsuite>
   </testsuites>
   <listeners>
@@ -24,8 +21,6 @@
       <directory suffix=".module">./</directory>
       <directory suffix=".install">./</directory>
       <exclude>
-        <file>src/Asset/CssCollectionOptimizer.php</file>
-        <file>src/Asset/JsCollectionOptimizer.php</file>
         <directory suffix="Test.php">./</directory>
         <directory suffix="TestBase.php">./</directory>
         <directory suffix="bootstrap.php">./</directory>
diff --git a/src/Asset/AssetDumper.php b/src/Asset/AssetDumper.php
deleted file mode 100644
index 9fe2473..0000000
--- a/src/Asset/AssetDumper.php
+++ /dev/null
@@ -1,71 +0,0 @@
-<?php
-
-namespace Drupal\flysystem\Asset;
-
-use Drupal\Component\Utility\Crypt;
-use Drupal\Core\Asset\AssetDumper as DrupalAssetDumper;
-use Drupal\Core\Config\ConfigFactoryInterface;
-use Drupal\Core\File\FileSystemInterface;
-use Drupal\Core\File\FileExists;
-
-/**
- * Flysystem dependency injection container.
- *
- * @codeCoverageIgnore
- */
-class AssetDumper extends DrupalAssetDumper {
-
-  use SchemeExtensionTrait;
-
-  /**
-   * Drupal Config factory service.
-   *
-   * @var \Drupal\Core\Config\ConfigFactoryInterface
-   */
-  protected $configFactory;
-
-  /**
-   * AssetDumper constructor.
-   *
-   * @param \Drupal\Core\File\FileSystemInterface $file_system
-   *   The file handler.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
-   *   Drupal Config factory service.
-   */
-  public function __construct(FileSystemInterface $file_system, ConfigFactoryInterface $config_factory) {
-    $this->fileSystem = $file_system;
-    $this->configFactory = $config_factory;
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  public function dump($data, $file_extension) {
-    // Prefix filename to prevent blocking by firewalls which reject files
-    // starting with "ad*".
-    $filename = $file_extension . '_' . Crypt::hashBase64($data) . '.' . $file_extension;
-    // Create the css/ or js/ path within the files folder.
-    $path = $this->getSchemeForExtension($file_extension) . '://' . $file_extension;
-    $uri = $path . '/' . $filename;
-    // Create the CSS or JS file.
-    $this->fileSystem->prepareDirectory($path, FileSystemInterface::CREATE_DIRECTORY);
-    if (!file_exists($uri) && !$this->fileSystem->saveData($data, $uri, FileExists::Replace)) {
-      return FALSE;
-    }
-    // If CSS/JS gzip compression is enabled and the zlib extension is available
-    // then create a gzipped version of this file. This file is served
-    // conditionally to browsers that accept gzip using .htaccess rules.
-    // It's possible that the rewrite rules in .htaccess aren't working on this
-    // server, but there's no harm (other than the time spent generating the
-    // file) in generating the file anyway. Sites on servers where rewrite rules
-    // aren't working can set css.gzip to FALSE in order to skip
-    // generating a file that won't be used.
-    if (extension_loaded('zlib') && $this->configFactory->get('system.performance')->get($file_extension . '.gzip')) {
-      if (!file_exists($uri . '.gz') && !$this->fileSystem->saveData(gzencode($data, 9, FORCE_GZIP), $uri . '.gz', FileExists::Replace)) {
-        return FALSE;
-      }
-    }
-    return $uri;
-  }
-
-}
diff --git a/src/Asset/CssCollectionOptimizerLazy.php b/src/Asset/CssCollectionOptimizerLazy.php
deleted file mode 100644
index 2200e9f..0000000
--- a/src/Asset/CssCollectionOptimizerLazy.php
+++ /dev/null
@@ -1,68 +0,0 @@
-<?php
-
-namespace Drupal\flysystem\Asset;
-
-use Drupal\Core\Asset\CssCollectionOptimizerLazy as DrupalCssCollectionOptimizerLazy;
-use Drupal\Core\File\Exception\FileException;
-use Drupal\Core\Logger\LoggerChannelFactoryInterface;
-
-/**
- * Optimizes CSS assets.
- */
-class CssCollectionOptimizerLazy extends DrupalCssCollectionOptimizerLazy {
-
-  use SchemeExtensionTrait;
-
-  /**
-   * Constructs a CssCollectionOptimizerLazy.
-   *
-   * @param \Drupal\Core\Asset\AssetCollectionGrouperInterface $grouper
-   *   The grouper for CSS assets.
-   * @param \Drupal\Core\Asset\AssetOptimizerInterface $optimizer
-   *   The asset optimizer.
-   * @param \Drupal\Core\Theme\ThemeManagerInterface $themeManager
-   *   The theme manager.
-   * @param \Drupal\Core\Asset\LibraryDependencyResolverInterface $dependencyResolver
-   *   The library dependency resolver.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
-   *   The request stack.
-   * @param \Drupal\Core\File\FileSystemInterface $fileSystem
-   *   The file system service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
-   *   The config factory.
-   * @param \Drupal\Core\File\FileUrlGeneratorInterface $fileUrlGenerator
-   *   The file URL generator.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
-   *   The time service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
-   *   The language manager.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $loggerFactory
-   *   The logger factory service.
-   */
-  public function __construct(
-    protected readonly AssetCollectionGrouperInterface $grouper,
-    protected readonly AssetOptimizerInterface $optimizer,
-    protected readonly ThemeManagerInterface $themeManager,
-    protected readonly LibraryDependencyResolverInterface $dependencyResolver,
-    protected readonly RequestStack $requestStack,
-    protected readonly FileSystemInterface $fileSystem,
-    protected readonly ConfigFactoryInterface $configFactory,
-    protected readonly FileUrlGeneratorInterface $fileUrlGenerator,
-    protected readonly TimeInterface $time,
-    protected readonly LanguageManagerInterface $languageManager,
-    protected readonly LoggerChannelFactoryInterface $loggerFactory,
-  ) {}
-
-  /**
-   * {@inheritdoc}
-   */
-  public function deleteAll() {
-    try {
-      $this->fileSystem->deleteRecursive($this->getSchemeForExtension('css') . '://css');
-    }
-    catch (FileException $fileException) {
-      $this->loggerFactory->get('flysystem')->error($fileException->getMessage());
-    }
-  }
-
-}
diff --git a/src/Asset/CssOptimizer.php b/src/Asset/CssOptimizer.php
deleted file mode 100644
index 4aa464d..0000000
--- a/src/Asset/CssOptimizer.php
+++ /dev/null
@@ -1,29 +0,0 @@
-<?php
-
-namespace Drupal\flysystem\Asset;
-
-use Drupal\Core\Asset\CssOptimizer as DrupalCssOptimizer;
-
-/**
- * Changes Drupal\Core\Asset\CssOptimizer to not remove absolute URLs.
- *
- * @codeCoverageIgnore
- */
-class CssOptimizer extends DrupalCssOptimizer {
-
-  /**
-   * {@inheritdoc}
-   */
-  public function rewriteFileURI($matches): string { // phpcs:ignore
-    // Prefix with base and remove '../' segments where possible.
-    $path = $this->rewriteFileURIBasePath . $matches[1];
-    $last = '';
-    while ($path != $last) {
-      $last = $path;
-      $path = preg_replace('`(^|/)(?!\.\./)([^/]+)/\.\./`', '$1', $path);
-    }
-    // file_url_transform_relative() was removed here.
-    return 'url(' . $this->fileUrlGenerator->generate($path)?->toString() . ')';
-  }
-
-}
diff --git a/src/Asset/JsCollectionOptimizerLazy.php b/src/Asset/JsCollectionOptimizerLazy.php
deleted file mode 100644
index 133b11d..0000000
--- a/src/Asset/JsCollectionOptimizerLazy.php
+++ /dev/null
@@ -1,68 +0,0 @@
-<?php
-
-namespace Drupal\flysystem\Asset;
-
-use Drupal\Core\Asset\JsCollectionOptimizerLazy as DrupalJsCollectionOptimizerLazy;
-use Drupal\Core\File\Exception\FileException;
-use Drupal\Core\Logger\LoggerChannelFactoryInterface;
-
-/**
- * Optimizes JavaScript assets.
- */
-class JsCollectionOptimizerLazy extends DrupalJsCollectionOptimizerLazy {
-
-  use SchemeExtensionTrait;
-
-  /**
-   * Constructs a JsCollectionOptimizerLazy.
-   *
-   * @param \Drupal\Core\Asset\AssetCollectionGrouperInterface $grouper
-   *   The grouper for JS assets.
-   * @param \Drupal\Core\Asset\AssetOptimizerInterface $optimizer
-   *   The asset optimizer.
-   * @param \Drupal\Core\Theme\ThemeManagerInterface $themeManager
-   *   The theme manager.
-   * @param \Drupal\Core\Asset\LibraryDependencyResolverInterface $dependencyResolver
-   *   The library dependency resolver.
-   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
-   *   The request stack.
-   * @param \Drupal\Core\File\FileSystemInterface $fileSystem
-   *   The file system service.
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
-   *   The config factory.
-   * @param \Drupal\Core\File\FileUrlGeneratorInterface $fileUrlGenerator
-   *   The file URL generator.
-   * @param \Drupal\Component\Datetime\TimeInterface $time
-   *   The time service.
-   * @param \Drupal\Core\Language\LanguageManagerInterface $languageManager
-   *   The language manager.
-   * @param \Drupal\Core\Logger\LoggerChannelFactoryInterface $loggerFactory
-   *   The logger factory service.
-   */
-  public function __construct(
-    protected readonly AssetCollectionGrouperInterface $grouper,
-    protected readonly AssetOptimizerInterface $optimizer,
-    protected readonly ThemeManagerInterface $themeManager,
-    protected readonly LibraryDependencyResolverInterface $dependencyResolver,
-    protected readonly RequestStack $requestStack,
-    protected readonly FileSystemInterface $fileSystem,
-    protected readonly ConfigFactoryInterface $configFactory,
-    protected readonly FileUrlGeneratorInterface $fileUrlGenerator,
-    protected readonly TimeInterface $time,
-    protected readonly LanguageManagerInterface $languageManager,
-    protected readonly LoggerChannelFactoryInterface $loggerFactory,
-  ) {}
-
-  /**
-   * {@inheritdoc}
-   */
-  public function deleteAll() {
-    try {
-      $this->fileSystem->deleteRecursive($this->getSchemeForExtension('js') . '://js');
-    }
-    catch (FileException $fileException) {
-      $this->loggerFactory->get('flysystem')->error($fileException->getMessage());
-    }
-  }
-
-}
diff --git a/src/Asset/SchemeExtensionTrait.php b/src/Asset/SchemeExtensionTrait.php
deleted file mode 100644
index 45f3a90..0000000
--- a/src/Asset/SchemeExtensionTrait.php
+++ /dev/null
@@ -1,46 +0,0 @@
-<?php
-
-namespace Drupal\flysystem\Asset;
-
-use Drupal\Core\Site\Settings;
-use Drupal\Core\StreamWrapper\AssetsStream;
-
-/**
- * Flysystem dependency injection container.
- */
-trait SchemeExtensionTrait {
-
-  /**
-   * Returns the scheme that should serve an extension.
-   *
-   * @param string $extension
-   *   The extension.
-   *
-   * @return string
-   *   The scheme that should serve the extension.
-   */
-  public function getSchemeForExtension($extension) {
-    $extension_scheme = 'public';
-    $has_assets_scheme = class_exists(AssetsStream::class);
-
-    foreach (Settings::get('flysystem', []) as $scheme => $configuration) {
-      if (!empty($configuration['driver'])) {
-        if (!empty($configuration['serve_' . $extension])) {
-          if ($has_assets_scheme) {
-            if (version_compare(\Drupal::VERSION, '11.0', '>=')) {
-              throw \Exception(sprintf('The serve_%s Flysystem Option has been removed for Drupal 11 compatibility. Use the assets:// instead.  See See https://www.drupal.org/node/3328126', $extension));
-            }
-            else {
-              @trigger_error(sprintf('The serve_%s Flysystem option is deprecated in flysystem:2.1.0 and is removed from flysystem:3.0.0. Use the assets:// stream wrapper instead. See https://www.drupal.org/node/3328126', $extension), E_USER_DEPRECATED);
-            }
-          }
-        }
-        // Don't break, the last configured one will win.
-        $extension_scheme = $scheme;
-      }
-    }
-
-    return $extension_scheme;
-  }
-
-}
diff --git a/src/FlysystemServiceProvider.php b/src/FlysystemServiceProvider.php
index f433359..e9980c5 100644
--- a/src/FlysystemServiceProvider.php
+++ b/src/FlysystemServiceProvider.php
@@ -5,23 +5,17 @@ namespace Drupal\flysystem;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\Core\DependencyInjection\ServiceProviderInterface;
 use Drupal\Core\Site\Settings;
-use Drupal\flysystem\Asset\SchemeExtensionTrait;
 
 /**
  * Flysystem dependency injection container.
  */
 class FlysystemServiceProvider implements ServiceProviderInterface {
 
-  use SchemeExtensionTrait;
-
   /**
    * {@inheritdoc}
    */
   public function register(ContainerBuilder $container) {
 
-    $this->swapDumper($container, 'js');
-    $this->swapDumper($container, 'css');
-
     foreach (Settings::get('flysystem', []) as $scheme => $settings) {
 
       // Just some sanity checking, so things don't explode.
@@ -43,49 +37,4 @@ class FlysystemServiceProvider implements ServiceProviderInterface {
     }
   }
 
-  /**
-   * Swaps the js/css dumper if a scheme is configured to serve it.
-   *
-   * @param \Drupal\Core\DependencyInjection\ContainerBuilder $container
-   *   The container.
-   * @param string $extension
-   *   The file extension to swap.
-   */
-  protected function swapDumper(ContainerBuilder $container, $extension) {
-    if (!$container->has('asset.' . $extension . '.dumper')) {
-      return;
-    }
-
-    if (!$container->has('asset.' . $extension . '.collection_optimizer')) {
-      return;
-    }
-
-    // Don't rewrite if there's nothing to change.
-    $core_schemes = ['public', 'private', 'temporary'];
-    $additional_public_schemes = array_diff(Settings::get('file_additional_public_schemes', []), $core_schemes);
-    $public_schemes = array_merge(['public'], $additional_public_schemes);
-    $is_public = in_array($this->getSchemeForExtension($extension), $public_schemes, TRUE);
-    if ($is_public) {
-      return;
-    }
-
-    $container
-      ->getDefinition('asset.' . $extension . '.dumper')
-      ->setClass('Drupal\flysystem\Asset\AssetDumper');
-
-    $optimizer = $container->getDefinition('asset.' . $extension . '.collection_optimizer');
-    if ($optimizer->getClass() === 'Drupal\Core\Asset\\' . ucfirst($extension) . 'CollectionOptimizer') {
-      $optimizer->setClass('Drupal\flysystem\Asset\\' . ucfirst($extension) . 'CollectionOptimizer');
-    }
-    if ($optimizer->getClass() === 'Drupal\Core\Asset\\' . ucfirst($extension) . 'CollectionOptimizerLazy') {
-      $optimizer->setClass('Drupal\flysystem\Asset\\' . ucfirst($extension) . 'CollectionOptimizerLazy');
-    }
-
-    if ($extension === 'css') {
-      $container
-        ->getDefinition('asset.css.optimizer')
-        ->setClass('Drupal\flysystem\Asset\CssOptimizer');
-    }
-  }
-
 }
diff --git a/tests/src/Kernel/CollectionOptimizerLazyTest.php b/tests/src/Kernel/CollectionOptimizerLazyTest.php
deleted file mode 100644
index 1b22d63..0000000
--- a/tests/src/Kernel/CollectionOptimizerLazyTest.php
+++ /dev/null
@@ -1,191 +0,0 @@
-<?php
-
-namespace Drupal\Tests\flysystem\Kernel;
-
-use Drupal\Core\Asset\AssetCollectionGrouperInterface;
-use Drupal\Core\Asset\AssetOptimizerInterface;
-use Drupal\Core\Asset\CssOptimizer;
-use Drupal\Core\State\StateInterface;
-use Drupal\flysystem\Asset\AssetDumper;
-use Drupal\flysystem\Asset\CssCollectionOptimizerLazy;
-use Drupal\flysystem\Asset\JsCollectionOptimizerLazy;
-use Drupal\KernelTests\KernelTestBase;
-use org\bovigo\vfs\vfsStream;
-
-/**
- * @covers \Drupal\flysystem\Asset\JsCollectionOptimizerLazy
- * @covers \Drupal\flysystem\Asset\CssCollectionOptimizerLazy
- *
- * @group flysystem
- */
-class CollectionOptimizerLazyTest extends KernelTestBase {
-
-  /**
-   * {@inheritdoc}
-   */
-  protected static $modules = ['file'];
-
-  /**
-   * The file URL generator.
-   *
-   * @var \Drupal\Core\File\FileUrlGeneratorInterface
-   */
-  protected $fileUrlGenerator;
-
-  /**
-   * AssetCollectionGrouper.
-   *
-   * @var \Drupal\Core\Asset\AssetCollectionGrouperInterface
-   */
-  protected $assetCollectionGrouper;
-
-  /**
-   * {@inheritdoc}
-   */
-  public function setUp(): void {
-    parent::setUp();
-    $this->fileUrlGenerator = $this->container->get('file_url_generator');
-    $this->assetCollectionGrouper = $this->createMock(AssetCollectionGrouperInterface::class);
-    $this->cleanUp();
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  public function tearDown(): void {
-    $this->cleanUp();
-    parent::tearDown();
-  }
-
-  /**
-   * @covers \Drupal\flysystem\Asset\JsCollectionOptimizerLazy
-   */
-  public function testJsCollectionOptimizerLazy() {
-    vfsStream::setup('js');
-
-    $this->setSetting('flysystem', [
-      'vfs' => [
-        'serve_js' => TRUE,
-        'driver' => 'local',
-      ],
-    ]);
-
-    foreach ($this->jsFilesUnderTest() as $js_file => $expired) {
-      file_put_contents($js_file, 'dummy');
-      if ($expired === TRUE) {
-        // 2592000 is the default value of stale_file_threshold
-        touch($js_file, \Drupal::time()->getRequestTime() - 2592001);
-        continue;
-      }
-      touch($js_file, \Drupal::time()->getRequestTime() - 2591999);
-    }
-
-    $dumper = $this->prophesize(AssetDumper::class);
-    $state = $this->prophesize(StateInterface::class);
-    $jsOptimizer = $this->prophesize(AssetOptimizerInterface::class);
-
-    $optimizer = new JsCollectionOptimizerLazy($this->assetCollectionGrouper, $jsOptimizer->reveal(), $dumper->reveal(), $state->reveal(), $this->container->get('file_system'));
-    $optimizer->deleteAll();
-
-    foreach ($this->jsFilesUnderTest() as $js_file => $expired) {
-      if ($expired === TRUE) {
-        $this->assertFileDoesNotExist($js_file);
-        continue;
-      }
-      $this->assertFileExists($js_file);
-    }
-
-  }
-
-  /**
-   * @covers \Drupal\flysystem\Asset\CssCollectionOptimizerLazy
-   */
-  public function testCssCollectionOptimizerLazy() {
-    vfsStream::setup('css');
-
-    $this->setSetting('flysystem', [
-      'vfs' => [
-        'serve_css' => TRUE,
-        'driver' => 'local',
-      ],
-    ]);
-
-    foreach ($this->cssFilesUnderTest() as $css_file => $expired) {
-      file_put_contents($css_file, 'dummy');
-      if ($expired === TRUE) {
-        // 2592000 is the default value of stale_file_threshold
-        touch($css_file, \Drupal::time()->getRequestTime() - 2592001);
-        continue;
-      }
-      touch($css_file, \Drupal::time()->getRequestTime() - 2591999);
-    }
-
-    $dumper = $this->prophesize(AssetDumper::class);
-    $state = $this->prophesize(StateInterface::class);
-
-    $optimizer = new CssCollectionOptimizerLazy($this->assetCollectionGrouper, new CssOptimizer($this->fileUrlGenerator), $dumper->reveal(), $state->reveal(), $this->container->get('file_system'));
-    $optimizer->deleteAll();
-
-    foreach ($this->cssFilesUnderTest() as $css_file => $expired) {
-      if ($expired === TRUE) {
-        $this->assertFileDoesNotExist($css_file);
-        continue;
-      }
-      $this->assertFileExists($css_file);
-    }
-
-  }
-
-  /**
-   * CSS files involve in testing CssCollectionOptimizer.
-   *
-   * @return array
-   *   Keyed by the file URI, and its value is the flag of expiration. TRUE to
-   *   valid, FALSE to expired.
-   */
-  private function cssFilesUnderTest() {
-    return [
-      'vfs://css/foo_expired.css' => TRUE,
-      'vfs://css/bar_expired.css' => TRUE,
-      'vfs://css/baz_expired.css' => TRUE,
-      'vfs://css/foo.css' => FALSE,
-      'vfs://css/bar.css' => FALSE,
-      'vfs://css/baz.css' => FALSE,
-    ];
-  }
-
-  /**
-   * JS files involve in testing JsCollectionOptimizer.
-   *
-   * @return array
-   *   Keyed by the file URI, and its value is the flag of expiration. TRUE to
-   *   expired, FALSE to non-expired.
-   */
-  private function jsFilesUnderTest() {
-    return [
-      'vfs://js/foo_expired.js' => TRUE,
-      'vfs://js/bar_expired.js' => TRUE,
-      'vfs://js/baz_expired.js' => TRUE,
-      'vfs://js/foo.js' => FALSE,
-      'vfs://js/bar.js' => FALSE,
-      'vfs://js/zoo.js' => FALSE,
-    ];
-  }
-
-  /**
-   * A helper method for removing files before and after running tests.
-   */
-  private function cleanUp() {
-    foreach ($this->jsFilesUnderTest() as $js_file => $flag) {
-      if (file_exists($js_file)) {
-        unlink($js_file);
-      }
-    }
-    foreach ($this->cssFilesUnderTest() as $css_file => $flag) {
-      if (file_exists($css_file)) {
-        unlink($css_file);
-      }
-    }
-  }
-
-}
diff --git a/tests/src/Unit/Asset/SchemeExtensionTraitTest.php b/tests/src/Unit/Asset/SchemeExtensionTraitTest.php
deleted file mode 100644
index cf40c37..0000000
--- a/tests/src/Unit/Asset/SchemeExtensionTraitTest.php
+++ /dev/null
@@ -1,33 +0,0 @@
-<?php
-
-namespace Drupal\Tests\flysystem\Unit\Asset;
-
-use Drupal\Core\Site\Settings;
-use Drupal\flysystem\Asset\SchemeExtensionTrait;
-use Drupal\Tests\UnitTestCase;
-
-/**
- * @coversDefaultClass \Drupal\flysystem\Asset\SchemeExtensionTrait
- * @group flysystem
- */
-class SchemeExtensionTraitTest extends UnitTestCase {
-
-  /**
-   * @covers ::getSchemeForExtension
-   */
-  public function test() {
-
-    new Settings([
-      'flysystem' => [
-        'local' => ['serve_js' => TRUE, 'driver' => 'asdf'],
-        'ftp' => ['serve_css' => TRUE],
-      ],
-    ]);
-
-    $trait = $this->getMockForTrait(SchemeExtensionTrait::class);
-    $this->assertSame('local', $trait->getSchemeForExtension('js'));
-    $this->assertSame('local', $trait->getSchemeForExtension('css'));
-    $this->assertSame('local', $trait->getSchemeForExtension('jpg'));
-  }
-
-}
diff --git a/tests/src/Unit/FlysystemServiceProviderTest.php b/tests/src/Unit/FlysystemServiceProviderTest.php
index 1f4d5de..2e1f74f 100644
--- a/tests/src/Unit/FlysystemServiceProviderTest.php
+++ b/tests/src/Unit/FlysystemServiceProviderTest.php
@@ -2,16 +2,8 @@
 
 namespace Drupal\Tests\flysystem\Unit;
 
-use Drupal\Core\Asset\AssetDumper;
-use Drupal\Core\Asset\CssCollectionOptimizerLazy;
-use Drupal\Core\Asset\CssOptimizer;
-use Drupal\Core\Asset\JsCollectionOptimizerLazy;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\Core\Site\Settings;
-use Drupal\flysystem\Asset\AssetDumper as FlysystemAssetDumper;
-use Drupal\flysystem\Asset\CssCollectionOptimizerLazy as FlysystemCssCollectionOptimizerLazy;
-use Drupal\flysystem\Asset\CssOptimizer as FlysystemCssOptimizer;
-use Drupal\flysystem\Asset\JsCollectionOptimizerLazy as FlysystemJsCollectionOptimizerLazy;
 use Drupal\flysystem\FlysystemBridge;
 use Drupal\flysystem\FlysystemServiceProvider;
 use Drupal\flysystem\PathProcessor\LocalPathProcessor;
@@ -88,60 +80,4 @@ class FlysystemServiceProviderTest extends UnitTestCase {
     $this->assertSame(LocalPathProcessor::class, $this->container->getDefinition('flysystem.testscheme.path_processor')->getClass());
   }
 
-  /**
-   * @covers \Drupal\flysystem\FlysystemServiceProvider
-   */
-  public function test() {
-    // Test swapping the asset dumper.
-    $this->container->register('asset.js.dumper', AssetDumper::class);
-    (new FlysystemServiceProvider())->register($this->container);
-    $this->assertSame(AssetDumper::class, $this->container->getDefinition('asset.js.dumper')->getClass());
-
-    // @phpstan-ignore classConstant.deprecatedClass
-    $this->container->register('asset.js.collection_optimizer', JsCollectionOptimizerLazy::class);
-    (new FlysystemServiceProvider())->register($this->container);
-    $this->assertSame(FlysystemAssetDumper::class, $this->container->getDefinition('asset.js.dumper')->getClass());
-    // @phpstan-ignore classConstant.deprecatedClass
-    $this->assertSame(FlysystemJsCollectionOptimizerLazy::class, $this->container->getDefinition('asset.js.collection_optimizer')->getClass());
-
-    // A successful swap.
-    new Settings([
-      'flysystem' => [
-        'testscheme' => [
-          'driver' => 'whatever',
-          'serve_js' => TRUE,
-        ],
-      ],
-    ]);
-    (new FlysystemServiceProvider())->register($this->container);
-    $this->assertSame(FlysystemAssetDumper::class, $this->container->getDefinition('asset.js.dumper')->getClass());
-    $this->assertSame(FlysystemJsCollectionOptimizerLazy::class, $this->container->getDefinition('asset.js.collection_optimizer')->getClass());
-  }
-
-  /**
-   * @covers \Drupal\flysystem\FlysystemServiceProvider
-   */
-  public function testSwappingCssServices() {
-    // Test swapping the asset dumper.
-    $this->container->register('asset.css.dumper', AssetDumper::class);
-    // @phpstan-ignore classConstant.deprecatedClass
-    $this->container->register('asset.css.collection_optimizer', CssCollectionOptimizerLazy::class);
-    $this->container->register('asset.css.optimizer', CssOptimizer::class);
-
-    new Settings([
-      'flysystem' => [
-        'testscheme' => [
-          'driver' => 'whatever',
-          'serve_css' => TRUE,
-        ],
-      ],
-    ]);
-
-    (new FlysystemServiceProvider())->register($this->container);
-
-    $this->assertSame(FlysystemAssetDumper::class, $this->container->getDefinition('asset.css.dumper')->getClass());
-    $this->assertSame(FlysystemCssCollectionOptimizerLazy::class, $this->container->getDefinition('asset.css.collection_optimizer')->getClass());
-    $this->assertSame(FlysystemCssOptimizer::class, $this->container->getDefinition('asset.css.optimizer')->getClass());
-  }
-
 }
