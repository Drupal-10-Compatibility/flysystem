diff --git a/src/Asset/CssCollectionOptimizerLazy.php b/src/Asset/CssCollectionOptimizerLazy.php
index c47de1d..65e90fc 100644
--- a/src/Asset/CssCollectionOptimizerLazy.php
+++ b/src/Asset/CssCollectionOptimizerLazy.php
@@ -4,6 +4,7 @@ namespace Drupal\flysystem\Asset;
 
 use Drupal\Core\Asset\CssCollectionOptimizerLazy as DrupalCssCollectionOptimizerLazy;
 use Drupal\Core\File\Exception\FileException;
+use Drupal\Core\Logger\LoggerChannelTrait;
 
 /**
  * Optimizes CSS assets.
@@ -11,6 +12,7 @@ use Drupal\Core\File\Exception\FileException;
 class CssCollectionOptimizerLazy extends DrupalCssCollectionOptimizerLazy {
 
   use SchemeExtensionTrait;
+  use LoggerChannelTrait;
 
   /**
    * {@inheritdoc}
@@ -20,7 +22,7 @@ class CssCollectionOptimizerLazy extends DrupalCssCollectionOptimizerLazy {
       $this->fileSystem->deleteRecursive($this->getSchemeForExtension('css') . '://css');
     }
     catch (FileException $fileException) {
-      \Drupal::logger('flysystem')->error($fileException->getMessage());// @phpstan-ignore-line @codingStandardsIgnoreLine 
+      $this->getLogger('flysystem')->error($e->getMessage());
     }
   }
 
diff --git a/src/Asset/JsCollectionOptimizer.php b/src/Asset/JsCollectionOptimizer.php
index 3a3b26b..6238c81 100644
--- a/src/Asset/JsCollectionOptimizer.php
+++ b/src/Asset/JsCollectionOptimizer.php
@@ -3,7 +3,6 @@
 namespace Drupal\flysystem\Asset;
 
 use Drupal\Core\Asset\JsCollectionOptimizer as DrupalJsCollectionOptimizer;
-use Drupal\Core\Logger\LoggerChannelTrait;
 
 /**
  * Optimizes JavaScript assets.
@@ -11,7 +10,6 @@ use Drupal\Core\Logger\LoggerChannelTrait;
 class JsCollectionOptimizer extends DrupalJsCollectionOptimizer {// @phpstan-ignore-line @codingStandardsIgnoreLine 
 
   use SchemeExtensionTrait;
-  use LoggerChannelTrait;
 
   /**
    * {@inheritdoc}
diff --git a/src/Asset/JsCollectionOptimizerLazy.php b/src/Asset/JsCollectionOptimizerLazy.php
index c7f29af..1f42d06 100644
--- a/src/Asset/JsCollectionOptimizerLazy.php
+++ b/src/Asset/JsCollectionOptimizerLazy.php
@@ -4,6 +4,7 @@ namespace Drupal\flysystem\Asset;
 
 use Drupal\Core\Asset\JsCollectionOptimizerLazy as DrupalJsCollectionOptimizerLazy;
 use Drupal\Core\File\Exception\FileException;
+use Drupal\Core\Logger\LoggerChannelTrait;
 
 /**
  * Optimizes JavaScript assets.
@@ -11,6 +12,7 @@ use Drupal\Core\File\Exception\FileException;
 class JsCollectionOptimizerLazy extends DrupalJsCollectionOptimizerLazy {// @phpstan-ignore-line @codingStandardsIgnoreLine 
 
   use SchemeExtensionTrait;
+  use LoggerChannelTrait;
 
   /**
    * {@inheritdoc}
@@ -20,7 +22,7 @@ class JsCollectionOptimizerLazy extends DrupalJsCollectionOptimizerLazy {// @php
       $this->fileSystem->deleteRecursive($this->getSchemeForExtension('js') . '://js');
     }
     catch (FileException $fileException) {
-      \Drupal::logger('flysystem')->error($fileException->getMessage());// @phpstan-ignore-line @codingStandardsIgnoreLine 
+      $this->getLogger('flysystem')->error($e->getMessage());
     }
   }
 
diff --git a/tests/src/Kernel/CollectionOptimizerLazyTest.php b/tests/src/Kernel/CollectionOptimizerLazyTest.php
new file mode 100644
index 0000000..532bd50
--- /dev/null
+++ b/tests/src/Kernel/CollectionOptimizerLazyTest.php
@@ -0,0 +1,206 @@
+<?php
+
+namespace Drupal\Tests\flysystem\Kernel;
+
+use Drupal\Core\Asset\AssetCollectionGrouperInterface;
+use Drupal\Core\Asset\AssetOptimizerInterface;
+use Drupal\Core\Asset\LibraryDependencyResolverInterface;
+use Drupal\Core\Config\ConfigFactoryInterface;
+use Drupal\Core\File\FileUrlGeneratorInterface;
+use Drupal\Core\Theme\ThemeManagerInterface;
+use Drupal\Component\Datetime\TimeInterface;
+use Drupal\Core\Language\LanguageManagerInterface;
+use Drupal\flysystem\Asset\CssCollectionOptimizerLazy;
+use Drupal\flysystem\Asset\JsCollectionOptimizerLazy;
+use Drupal\KernelTests\KernelTestBase;
+use org\bovigo\vfs\vfsStream;
+use Symfony\Component\HttpFoundation\RequestStack;
+
+/**
+ * @covers \Drupal\flysystem\Asset\JsCollectionOptimizerLazy
+ * @covers \Drupal\flysystem\Asset\CssCollectionOptimizerLazy
+ *
+ * @group flysystem
+ */
+class CollectionOptimizerLazyTest extends KernelTestBase {
+
+  /**
+   * {@inheritdoc}
+   */
+  protected static $modules = ['file'];
+
+  /**
+   * The file URL generator.
+   *
+   * @var \Drupal\Core\File\FileUrlGeneratorInterface
+   */
+  protected $fileUrlGenerator;
+
+  /**
+   * DateTime service.
+   *
+   * @var Drupal\Component\Datetime\TimeInterface
+   */
+  protected $time;
+
+  /**
+   * {@inheritdoc}
+   */
+  public function setUp(): void {
+    parent::setUp();
+    $this->fileUrlGenerator = $this->container->get('file_url_generator');
+    $this->cleanUp();
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function tearDown(): void {
+    $this->cleanUp();
+    parent::tearDown();
+  }
+
+  /**
+   * @covers \Drupal\flysystem\Asset\JsCollectionOptimizerLazy
+   */
+  public function testJsCollectionOptimizer() {
+    vfsStream::setup('js');
+
+    $this->setSetting('flysystem', [
+      'vfs' => [
+        'serve_js' => TRUE,
+        'driver' => 'local',
+      ],
+    ]);
+
+    foreach ($this->jsFilesUnderTest() as $js_file => $expired) {
+      file_put_contents($js_file, 'dummy');
+      if ($expired === TRUE) {
+        // 2592000 is the default value of stale_file_threshold
+        touch($js_file, \Drupal::time()->getRequestTime() - 2592001);
+        continue;
+      }
+      touch($js_file, \Drupal::time()->getRequestTime() - 2591999);
+    }
+
+    $grouper = $this->prophesize(AssetCollectionGrouperInterface::class);
+    $asset_optimizer = $this->prophesize(AssetOptimizerInterface::class);
+    $theme_manager = $this->prophesize(ThemeManagerInterface::class);
+    $library_resolver = $this->prophesize(LibraryDependencyResolverInterface::class);
+    $request_stack = $this->prophesize(RequestStack::class);
+    $config_factory = $this->prophesize(ConfigFactoryInterface::class);
+    $time = $this->prophesize(TimeInterface::class);
+    $language_manager = $this->prophesize(LanguageManagerInterface::class);
+
+    $optimizer = new JsCollectionOptimizerLazy($grouper->reveal(), $asset_optimizer->reveal(), $theme_manager->reveal(), $library_resolver->reveal(), $request_stack->reveal(), $this->container->get('file_system'), $config_factory->reveal(), $this->fileUrlGenerator, $time->reveal(), $language_manager->reveal());
+    $optimizer->deleteAll();
+
+    foreach ($this->jsFilesUnderTest() as $js_file => $expired) {
+      if ($expired === TRUE) {
+        $this->assertFileDoesNotExist($js_file);
+        continue;
+      }
+      $this->assertFileExists($js_file);
+    }
+
+  }
+
+  /**
+   * @covers \Drupal\flysystem\Asset\CssCollectionOptimizerLazy
+   */
+  public function testCssCollectionOptimizer() {
+    vfsStream::setup('css');
+
+    $this->setSetting('flysystem', [
+      'vfs' => [
+        'serve_css' => TRUE,
+        'driver' => 'local',
+      ],
+    ]);
+
+    foreach ($this->cssFilesUnderTest() as $css_file => $expired) {
+      file_put_contents($css_file, 'dummy');
+      if ($expired === TRUE) {
+        // 2592000 is the default value of stale_file_threshold
+        touch($css_file, \Drupal::time()->getRequestTime() - 2592001);
+        continue;
+      }
+      touch($css_file, \Drupal::time()->getRequestTime() - 2591999);
+    }
+
+    $grouper = $this->prophesize(AssetCollectionGrouperInterface::class);
+    $asset_optimizer = $this->prophesize(AssetOptimizerInterface::class);
+    $theme_manager = $this->prophesize(ThemeManagerInterface::class);
+    $library_resolver = $this->prophesize(LibraryDependencyResolverInterface::class);
+    $request_stack = $this->prophesize(RequestStack::class);
+    $config_factory = $this->prophesize(ConfigFactoryInterface::class);
+    $time = $this->prophesize(TimeInterface::class);
+    $language_manager = $this->prophesize(LanguageManagerInterface::class);
+
+    $optimizer = new CssCollectionOptimizerLazy($grouper->reveal(), $asset_optimizer->reveal(), $theme_manager->reveal(), $library_resolver->reveal(), $request_stack->reveal(), $this->container->get('file_system'), $config_factory->reveal(), $this->fileUrlGenerator, $time->reveal(), $language_manager->reveal());
+
+    $optimizer->deleteAll();
+
+    foreach ($this->cssFilesUnderTest() as $css_file => $expired) {
+      if ($expired === TRUE) {
+        $this->assertFileDoesNotExist($css_file);
+        continue;
+      }
+      $this->assertFileExists($css_file);
+    }
+
+  }
+
+  /**
+   * CSS files involve in testing CssCollectionOptimizerLazy.
+   *
+   * @return array
+   *   Keyed by the file URI, and its value is the flag of expiration. TRUE to
+   *   valid, FALSE to expired.
+   */
+  private function cssFilesUnderTest() {
+    return [
+      'vfs://css/foo_expired.css' => TRUE,
+      'vfs://css/bar_expired.css' => TRUE,
+      'vfs://css/baz_expired.css' => TRUE,
+      'vfs://css/foo.css' => FALSE,
+      'vfs://css/bar.css' => FALSE,
+      'vfs://css/baz.css' => FALSE,
+    ];
+  }
+
+  /**
+   * JS files involve in testing JsCollectionOptimizerLazy.
+   *
+   * @return array
+   *   Keyed by the file URI, and its value is the flag of expiration. TRUE to
+   *   expired, FALSE to non-expired.
+   */
+  private function jsFilesUnderTest() {
+    return [
+      'vfs://js/foo_expired.js' => TRUE,
+      'vfs://js/bar_expired.js' => TRUE,
+      'vfs://js/baz_expired.js' => TRUE,
+      'vfs://js/foo.js' => FALSE,
+      'vfs://js/bar.js' => FALSE,
+      'vfs://js/zoo.js' => FALSE,
+    ];
+  }
+
+  /**
+   * A helper method for removing files before and after running tests.
+   */
+  private function cleanUp() {
+    foreach ($this->jsFilesUnderTest() as $js_file => $flag) {
+      if (file_exists($js_file)) {
+        unlink($js_file);
+      }
+    }
+    foreach ($this->cssFilesUnderTest() as $css_file => $flag) {
+      if (file_exists($css_file)) {
+        unlink($css_file);
+      }
+    }
+  }
+
+}
diff --git a/tests/src/Kernel/CollectionOptimizerTest.php b/tests/src/Kernel/CollectionOptimizerTest.php
index 04c7877..bf84240 100644
--- a/tests/src/Kernel/CollectionOptimizerTest.php
+++ b/tests/src/Kernel/CollectionOptimizerTest.php
@@ -4,7 +4,6 @@ namespace Drupal\Tests\flysystem\Kernel;
 
 use Drupal\Core\Asset\AssetCollectionGrouperInterface;
 use Drupal\Core\Asset\AssetOptimizerInterface;
-use Drupal\Core\Asset\CssOptimizer;
 use Drupal\Core\State\StateInterface;
 use Drupal\flysystem\Asset\AssetDumper;
 use Drupal\flysystem\Asset\CssCollectionOptimizer;
@@ -122,8 +121,9 @@ class CollectionOptimizerTest extends KernelTestBase {
     $grouper = $this->prophesize(AssetCollectionGrouperInterface::class);
     $dumper = $this->prophesize(AssetDumper::class);
     $state = $this->prophesize(StateInterface::class);
+    $cs_optimizer = $this->prophesize(AssetOptimizerInterface::class);
 
-    $optimizer = new CssCollectionOptimizer($grouper->reveal(), new CssOptimizer($this->fileUrlGenerator), $dumper->reveal(), $state->reveal(), $this->container->get('file_system'));
+    $optimizer = new CssCollectionOptimizer($grouper->reveal(), $cs_optimizer->reveal(), $dumper->reveal(), $state->reveal(), $this->container->get('file_system'));
     $optimizer->deleteAll();
 
     foreach ($this->cssFilesUnderTest() as $css_file => $expired) {
