diff --git a/src/Flysystem/Adapter/MissingAdapter.php b/src/Flysystem/Adapter/MissingAdapter.php
index b601870..d946d81 100644
--- a/src/Flysystem/Adapter/MissingAdapter.php
+++ b/src/Flysystem/Adapter/MissingAdapter.php
@@ -4,6 +4,7 @@ namespace Drupal\flysystem\Flysystem\Adapter;
 
 use League\Flysystem\FilesystemAdapter;
 use League\Flysystem\Config;
+use League\Flysystem\FileAttributes;
 
 /**
  * An adapter used when a plugin is missing. It fails at everything.
@@ -13,134 +14,104 @@ class MissingAdapter implements FilesystemAdapter {
   /**
    * {@inheritdoc}
    */
-  public function copy($path, $newPath): array|false {
+  public function fileExists($path): bool {
     return FALSE;
   }
 
   /**
    * {@inheritdoc}
    */
-  public function createDir($dirname, Config $config): array|false {
+  public function directoryExists($path): bool {
     return FALSE;
   }
 
   /**
    * {@inheritdoc}
    */
-  public function delete($path): bool {
-    return FALSE;
-  }
+  public function write($path, $contents, Config $config): void {}
 
   /**
    * {@inheritdoc}
    */
-  public function deleteDir($dirname): bool {
-    return FALSE;
-  }
+  public function writeStream($path, $contents, Config $config): void {}
 
   /**
    * {@inheritdoc}
    */
-  public function listContents($directory = '', $recursive = FALSE): array {
-    return [];
+  public function read($path): string {
+    return 'FALSE';
   }
 
   /**
    * {@inheritdoc}
    */
-  public function getMetadata($path): array|false {
+  public function readStream($path) {
     return FALSE;
   }
 
   /**
    * {@inheritdoc}
    */
-  public function getMimetype($path): array|false {
-    return FALSE;
-  }
+  public function delete($path): void {}
 
   /**
    * {@inheritdoc}
    */
-  public function getSize($path): array|false {
-    return FALSE;
-  }
+  public function deleteDirectory($dirname): void {}
 
   /**
    * {@inheritdoc}
    */
-  public function getTimestamp($path): array|false {
-    return FALSE;
-  }
+  public function createDirectory($dirname, Config $config): void {}
 
   /**
    * {@inheritdoc}
    */
-  public function getVisibility($path): array|false {
-    return FALSE;
-  }
+  public function setVisibility($path, $visibility): void {}
 
   /**
    * {@inheritdoc}
    */
-  public function has($path): array|bool|null {
-    return FALSE;
+  public function visibility(string $path): FileAttributes {
+    return new FileAttributes($path);
   }
 
   /**
    * {@inheritdoc}
    */
-  public function setVisibility($path, $visibility): array|false {
-    return FALSE;
+  public function mimeType(string $path): FileAttributes {
+    return new FileAttributes($path);
   }
 
   /**
    * {@inheritdoc}
    */
-  public function update($path, $contents, Config $config): array|false {
-    return FALSE;
+  public function lastModified(string $path): FileAttributes {
+    return new FileAttributes($path);
   }
 
   /**
    * {@inheritdoc}
    */
-  public function updateStream($path, $resource, Config $config): array|false {
-    return FALSE;
+  public function fileSize(string $path): FileAttributes {
+    return new FileAttributes($path);
   }
 
   /**
    * {@inheritdoc}
    */
-  public function read($path): array|false {
-    return FALSE;
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  public function readStream($path): array|false {
-    return FALSE;
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  public function rename($path, $newPath): bool {
-    return FALSE;
+  public function listContents($directory = '', $recursive = FALSE): iterable {
+    return [];
   }
 
   /**
    * {@inheritdoc}
    */
-  public function write($path, $contents, Config $config): array|false {
-    return FALSE;
-  }
+  public function copy($source, $destination, Config $config): void {}
 
   /**
    * {@inheritdoc}
    */
-  public function writeStream($path, $resource, Config $config): array|false {
-    return FALSE;
-  }
+  public function move($source, $destination, Config $config): void {}
 
 }
