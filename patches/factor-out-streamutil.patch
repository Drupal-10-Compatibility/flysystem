diff --git a/src/StreamWrapper/FlysystemStreamWrapper.php b/src/StreamWrapper/FlysystemStreamWrapper.php
index ec60306..2647601 100644
--- a/src/StreamWrapper/FlysystemStreamWrapper.php
+++ b/src/StreamWrapper/FlysystemStreamWrapper.php
@@ -9,7 +9,6 @@ use Drupal\flysystem\StreamWrapper\Exception\NotADirectoryException;
 use Drupal\flysystem\StreamWrapper\Exception\RootViolationException;
 use Drupal\flysystem\StreamWrapper\Exception\TriggerErrorException;
 use Drupal\flysystem\StreamWrapper\Plugin\Stat;
-use Drupal\flysystem\StreamWrapper\Util\StreamUtil;
 use League\Flysystem\AdapterInterface;
 use League\Flysystem\Config;
 use League\Flysystem\FilesystemInterface;
@@ -498,9 +497,10 @@ class FlysystemStreamWrapper {
     $this->uri = $uri;
     $path = $this->getTarget();
 
-    $this->isReadOnly = StreamUtil::modeIsReadOnly($mode);
-    $this->isWriteOnly = StreamUtil::modeIsWriteOnly($mode);
-    $this->isAppendMode = StreamUtil::modeIsAppendable($mode);
+    $this->isReadOnly = $mode[0] === 'r' && strpos($mode, '+') === FALSE;
+    $this->isWriteOnly = $this->modeIsWriteOnly($mode);
+
+    $this->isAppendMode = $mode[0] === 'a';
 
     $this->handle = $this->invoke($this, 'getStream', [$path, $mode], 'fopen');
 
@@ -602,7 +602,7 @@ class FlysystemStreamWrapper {
 
     // Use the size of our handle, since it could have been written to or
     // truncated.
-    $stream_util_size = StreamUtil::getSize($this->handle);
+    $stream_util_size = $this->getSize($this->handle);
     if ($stream_util_size) {
       $stat['size'] = $stat[7] = $stream_util_size;
     }
@@ -664,7 +664,7 @@ class FlysystemStreamWrapper {
 
     // Enforce append semantics.
     if ($this->isAppendMode) {
-      StreamUtil::trySeek($this->handle, 0, SEEK_END);
+      $this->trySeek($this->handle, 0, SEEK_END);
     }
 
     $written = fwrite($this->handle, $data);
@@ -795,7 +795,7 @@ class FlysystemStreamWrapper {
    */
   protected function getAppendStream($path) {
     if ($handle = $this->getWritableStream($path)) {
-      StreamUtil::trySeek($handle, 0, SEEK_END);
+      $this->trySeek($handle, 0, SEEK_END);
     }
 
     return $handle;
@@ -834,11 +834,11 @@ class FlysystemStreamWrapper {
 
     $this->needsCowCheck = FALSE;
 
-    if (StreamUtil::isWritable($this->handle)) {
+    if ($this->isWritable($this->handle)) {
       return;
     }
 
-    $this->handle = StreamUtil::copy($this->handle);
+    $this->handle = $this->copy($this->handle);
   }
 
   /**
@@ -1179,7 +1179,7 @@ class FlysystemStreamWrapper {
    * @throws \Drupal\flysystem\StreamWrapper\Exception\DirectoryNotEmptyException
    * @throws \Drupal\flysystem\StreamWrapper\Exception\NotADirectoryException
    */
-  public function forcedRename($path, $newpath) {
+  private function forcedRename($path, $newpath) {
     $path = $this->normalizeRelativePath($path);
     $newpath = $this->normalizeRelativePath($newpath);
 
@@ -1279,4 +1279,161 @@ class FlysystemStreamWrapper {
     return $adapter->deleteDir($dest);
   }
 
+  /**
+   * Tries to seek a stream.
+   *
+   * @param resource $stream
+   *   The stream.
+   * @param int $offset
+   *   The offset.
+   * @param int $whence
+   *   One of SEEK_SET, SEEK_CUR, SEEK_END.
+   *
+   * @return bool
+   *   True on success, false on failure.
+   *
+   * @see fseek()
+   */
+  private function trySeek($stream, $offset, $whence = SEEK_SET) {
+    $offset = (int) $offset;
+
+    // If SEEK_SET, we can avoid a seek if we're at the right location.
+    if ($whence === SEEK_SET && ftell($stream) === $offset) {
+      return TRUE;
+    }
+
+    $meta = stream_get_meta_data($stream);
+    (bool) $meta['seekable'] ?? NULL;
+
+    return ((bool) $meta['seekable'] ?? NULL) && fseek($stream, $offset, $whence) === 0;
+  }
+
+  /**
+   * Copies a stream.
+   *
+   * @param resource $stream
+   *   The stream to copy.
+   * @param bool $close
+   *   Whether to close the input stream.
+   *
+   * @return resource
+   *   The copied stream.
+   */
+  private function copy($stream, $close = TRUE) {
+    $cloned = fopen('php://temp', 'w+b');
+    $pos = ftell($stream);
+
+    $meta = stream_get_meta_data($stream);
+
+    ftell($stream) === 0 || ((bool) $meta['seekable'] ?? NULL) && rewind($stream);
+
+    stream_copy_to_stream($stream, $cloned);
+
+    if ($close) {
+      fclose($stream);
+    }
+    else {
+      $this->trySeek($stream, $pos);
+    }
+
+    fseek($cloned, $pos);
+
+    return $cloned;
+  }
+
+  /**
+   * Returns the size of a stream.
+   *
+   * If the size is 0, it could mean that the stream isn't reporting its size.
+   *
+   * @param resource $stream
+   *   The stream.
+   *
+   * @return mixed
+   *   The size of the stream, or false if it cannot be retrieved.
+   */
+  private function getSize($stream) {
+    $stat = stream_get_meta_data($stream);
+    switch ($stat['wrapper_type']) {
+      case 'plainfile':
+      case 'PHP':
+        $stats = fstat($stream);
+        return is_array($stats) && isset($stats['size']) ? $stats['size'] : FALSE;
+
+      case 'http':
+        stream_context_set_default(['http' => ['method' => 'HEAD']]);
+        $head = array_change_key_case(get_headers($stat['uri'], 1));
+        return $head['content-length'] ?? FALSE;
+
+      default:
+    }
+    return FALSE;
+  }
+
+  /**
+   * Returns whether a mode is write only.
+   *
+   * @param string $mode
+   *   The mode string.
+   *
+   * @return bool
+   *   True if write only, false if not.
+   */
+  private function modeIsWriteOnly($mode) {
+    return $this->modeIsWritable($mode) && !$this->modeIsReadable($mode);
+  }
+
+  /**
+   * Returns whether a mode is readable.
+   *
+   * @param string $mode
+   *   The mode string.
+   *
+   * @return bool
+   *   True if readable, false if not.
+   */
+  private function modeIsReadable($mode) {
+    return $mode[0] === 'r' || strpos($mode, '+') !== FALSE;
+  }
+
+  /**
+   * Returns whether a mode is read only.
+   *
+   * @param string $mode
+   *   The mode string.
+   *
+   * @return bool
+   *   True if read only, false if not.
+   */
+  private function modeIsReadOnly($mode) {
+    return $mode[0] === 'r' && strpos($mode, '+') === FALSE;
+  }
+
+  /**
+   * Returns whether a mode is writable.
+   *
+   * @param string $mode
+   *   The mode string.
+   *
+   * @return bool
+   *   True if writable, false if not.
+   */
+  private function modeIsWritable($mode) {
+    return !$this->modeIsReadOnly($mode);
+  }
+
+  /**
+   * Returns whether the stream is writable.
+   *
+   * @param resource $stream
+   *   The stream.
+   *
+   * @return bool
+   *   True if writable, false if not.
+   */
+  private function isWritable($stream) {
+    $meta = stream_get_meta_data($stream);
+    return $this->modeIsWritable($meta['mode'] ?? NULL);
+  }
+
 }
diff --git a/src/StreamWrapper/Util/StreamUtil.php b/src/StreamWrapper/Util/StreamUtil.php
deleted file mode 100644
index 6b32355..0000000
--- a/src/StreamWrapper/Util/StreamUtil.php
+++ /dev/null
@@ -1,288 +0,0 @@
-<?php
-
-namespace Drupal\flysystem\StreamWrapper\Util;
-
-/**
- * Helper functions for dealing with streams.
- */
-class StreamUtil {
-
-  /**
-   * Copies a stream.
-   *
-   * @param resource $stream
-   *   The stream to copy.
-   * @param bool $close
-   *   Whether to close the input stream.
-   *
-   * @return resource
-   *   The copied stream.
-   */
-  public static function copy($stream, $close = TRUE) {
-    $cloned = fopen('php://temp', 'w+b');
-    $pos = ftell($stream);
-
-    static::tryRewind($stream);
-    stream_copy_to_stream($stream, $cloned);
-
-    if ($close) {
-      fclose($stream);
-    }
-    else {
-      static::trySeek($stream, $pos);
-    }
-
-    fseek($cloned, $pos);
-
-    return $cloned;
-  }
-
-  /**
-   * Returns a key from stream_get_meta_data().
-   *
-   * @param resource $stream
-   *   The stream.
-   * @param string $key
-   *   The key to return.
-   *
-   * @return mixed
-   *   The value from stream_get_meta_data().
-   *
-   * @see stream_get_meta_data()
-   */
-  public static function getMetaDataKey($stream, $key) {
-    $meta = stream_get_meta_data($stream);
-
-    return $meta[$key] ?? NULL;
-  }
-
-  /**
-   * Returns the URI of a stream.
-   *
-   * @param resource $stream
-   *   The stream.
-   *
-   * @return string|null
-   *   The URI of the stream, or null if not set.
-   */
-  public static function getUri($stream) {
-    return static::getMetaDataKey($stream, 'uri');
-  }
-
-  /**
-   * Returns a URI that is usable via fopen().
-   *
-   * @param resource $stream
-   *   The stream.
-   *
-   * @return string|false
-   *   A usuable URI, or false on failure.
-   */
-  public static function getUsableUri($stream) {
-    $uri = static::getMetaDataKey($stream, 'uri');
-
-    return isset($uri) && $uri !== '' && file_exists($uri) ? $uri : FALSE;
-  }
-
-  /**
-   * Returns the size of a stream.
-   *
-   * If the size is 0, it could mean that the stream isn't reporting its size.
-   *
-   * @param resource $stream
-   *   The stream.
-   *
-   * @return mixed
-   *   The size of the stream, or false if it cannot be retrieved.
-   */
-  public static function getSize($stream) {
-    $stat = stream_get_meta_data($stream);
-    switch ($stat['wrapper_type']) {
-      case 'plainfile':
-      case 'PHP':
-        $stats = fstat($stream);
-        return is_array($stats) && isset($stats['size']) ? $stats['size'] : FALSE;
-
-      case 'http':
-        stream_context_set_default(['http' => ['method' => 'HEAD']]);
-        $head = array_change_key_case(get_headers($stat['uri'], 1));
-        return $head['content-length'] ?? FALSE;
-
-      default:
-        return FALSE;
-
-    }
-  }
-
-  /**
-   * Returns whether the stream is in append mode.
-   *
-   * @param resource $stream
-   *   The stream.
-   *
-   * @return bool
-   *   True if appendable, false if not.
-   */
-  public static function isAppendable($stream) {
-    return static::modeIsAppendable(static::getMetaDataKey($stream, 'mode'));
-  }
-
-  /**
-   * Returns whether the stream is readable.
-   *
-   * @param resource $stream
-   *   The stream.
-   *
-   * @return bool
-   *   True if readable, false if not.
-   */
-  public static function isReadable($stream) {
-    return static::modeIsReadable(static::getMetaDataKey($stream, 'mode'));
-  }
-
-  /**
-   * Returns whether the stream is seekable.
-   *
-   * @param resource $stream
-   *   The stream.
-   *
-   * @return bool
-   *   True if seekable, false if not.
-   */
-  public static function isSeekable($stream) {
-    return (bool) static::getMetaDataKey($stream, 'seekable');
-  }
-
-  /**
-   * Returns whether the stream is writable.
-   *
-   * @param resource $stream
-   *   The stream.
-   *
-   * @return bool
-   *   True if writable, false if not.
-   */
-  public static function isWritable($stream) {
-    return static::modeIsWritable(static::getMetaDataKey($stream, 'mode'));
-  }
-
-  /**
-   * Returns whether a mode is appendable.
-   *
-   * @param string $mode
-   *   The mode string.
-   *
-   * @return bool
-   *   True if appendable, false if not.
-   */
-  public static function modeIsAppendable($mode) {
-    return $mode[0] === 'a';
-  }
-
-  /**
-   * Returns whether a mode is append only.
-   *
-   * @param string $mode
-   *   The mode string.
-   *
-   * @return bool
-   *   True if append only, false if not.
-   */
-  public static function modeIsAppendOnly($mode) {
-    return $mode[0] === 'a' && strpos($mode, '+') === FALSE;
-  }
-
-  /**
-   * Returns whether a mode is readable.
-   *
-   * @param string $mode
-   *   The mode string.
-   *
-   * @return bool
-   *   True if readable, false if not.
-   */
-  public static function modeIsReadable($mode) {
-    return $mode[0] === 'r' || strpos($mode, '+') !== FALSE;
-  }
-
-  /**
-   * Returns whether a mode is read only.
-   *
-   * @param string $mode
-   *   The mode string.
-   *
-   * @return bool
-   *   True if read only, false if not.
-   */
-  public static function modeIsReadOnly($mode) {
-    return $mode[0] === 'r' && strpos($mode, '+') === FALSE;
-  }
-
-  /**
-   * Returns whether a mode is writable.
-   *
-   * @param string $mode
-   *   The mode string.
-   *
-   * @return bool
-   *   True if writable, false if not.
-   */
-  public static function modeIsWritable($mode) {
-    return !static::modeIsReadOnly($mode);
-  }
-
-  /**
-   * Returns whether a mode is write only.
-   *
-   * @param string $mode
-   *   The mode string.
-   *
-   * @return bool
-   *   True if write only, false if not.
-   */
-  public static function modeIsWriteOnly($mode) {
-    return static::modeIsWritable($mode) && !static::modeIsReadable($mode);
-  }
-
-  /**
-   * Tries to rewind a stream.
-   *
-   * @param resource $stream
-   *   The stream.
-   *
-   * @return bool
-   *   True on success, false on failure.
-   *
-   * @see rewind()
-   */
-  public static function tryRewind($stream) {
-    return ftell($stream) === 0 || static::isSeekable($stream) && rewind($stream);
-  }
-
-  /**
-   * Tries to seek a stream.
-   *
-   * @param resource $stream
-   *   The stream.
-   * @param int $offset
-   *   The offset.
-   * @param int $whence
-   *   One of SEEK_SET, SEEK_CUR, SEEK_END.
-   *
-   * @return bool
-   *   True on success, false on failure.
-   *
-   * @see fseek()
-   */
-  public static function trySeek($stream, $offset, $whence = SEEK_SET) {
-    $offset = (int) $offset;
-
-    // If SEEK_SET, we can avoid a seek if we're at the right location.
-    if ($whence === SEEK_SET && ftell($stream) === $offset) {
-      return TRUE;
-    }
-
-    return static::isSeekable($stream) && fseek($stream, $offset, $whence) === 0;
-  }
-
-}
