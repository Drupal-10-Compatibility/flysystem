diff --git a/tests/src/Kernel/CollectionOptimizerTest.php b/tests/src/Kernel/CollectionOptimizerTest.php
index a36b9d1..2fa56f0 100644
--- a/tests/src/Kernel/CollectionOptimizerTest.php
+++ b/tests/src/Kernel/CollectionOptimizerTest.php
@@ -32,12 +32,20 @@ class CollectionOptimizerTest extends KernelTestBase {
    */
   protected $fileUrlGenerator;
 
+  /**
+   * AssetCollectionGrouper.
+   *
+   * @var \Drupal\Core\Asset\AssetCollectionGrouperInterface
+   */
+  protected $assetCollectionGrouper;
+
   /**
    * {@inheritdoc}
    */
   public function setUp(): void {
     parent::setUp();
     $this->fileUrlGenerator = $this->container->get('file_url_generator');
+    $this->assetCollectionGrouper = $this->createMock(AssetCollectionGrouperInterface::class);
     $this->cleanUp();
   }
 
@@ -72,12 +80,12 @@ class CollectionOptimizerTest extends KernelTestBase {
       touch($js_file, \Drupal::time()->getRequestTime() - 2591999);
     }
 
-    $grouper = $this->prophesize(AssetCollectionGrouperInterface::class);
+    //$grouper = $this->prophesize(AssetCollectionGrouperInterface::class);
     $dumper = $this->prophesize(AssetDumper::class);
     $state = $this->prophesize(StateInterface::class);
     $jsOptimizer = $this->prophesize(AssetOptimizerInterface::class);
 
-    $optimizer = new JsCollectionOptimizer($grouper->reveal(), $jsOptimizer->reveal(), $dumper->reveal(), $state->reveal(), $this->container->get('file_system'));
+    $optimizer = new JsCollectionOptimizer($this->assetCollectionGrouper, $jsOptimizer->reveal(), $dumper->reveal(), $state->reveal(), $this->container->get('file_system'));
     $optimizer->deleteAll();
 
     foreach ($this->jsFilesUnderTest() as $js_file => $expired) {
@@ -113,11 +121,11 @@ class CollectionOptimizerTest extends KernelTestBase {
       touch($css_file, \Drupal::time()->getRequestTime() - 2591999);
     }
 
-    $grouper = $this->prophesize(AssetCollectionGrouperInterface::class);
+    //$grouper = $this->prophesize(AssetCollectionGrouperInterface::class);
     $dumper = $this->prophesize(AssetDumper::class);
     $state = $this->prophesize(StateInterface::class);
 
-    $optimizer = new CssCollectionOptimizer($grouper->reveal(), new CssOptimizer($this->fileUrlGenerator), $dumper->reveal(), $state->reveal(), $this->container->get('file_system'));
+    $optimizer = new CssCollectionOptimizer($this->assetCollectionGrouper, new CssOptimizer($this->fileUrlGenerator), $dumper->reveal(), $state->reveal(), $this->container->get('file_system'));
     $optimizer->deleteAll();
 
     foreach ($this->cssFilesUnderTest() as $css_file => $expired) {
diff --git a/tests/src/Unit/InstallFunctionsTest.php b/tests/src/Unit/InstallFunctionsTest.php
deleted file mode 100644
index 94750bb..0000000
--- a/tests/src/Unit/InstallFunctionsTest.php
+++ /dev/null
@@ -1,107 +0,0 @@
-<?php
-
-namespace Drupal\Tests\flysystem\Unit;
-
-use Drupal\Core\Logger\RfcLogLevel;
-use Drupal\Core\Site\Settings;
-use Drupal\flysystem\FlysystemFactory;
-use Drupal\Tests\UnitTestCase;
-use Symfony\Component\DependencyInjection\ContainerBuilder;
-use Drupal\flysystem\StreamWrapper\FlysystemStreamWrapper;
-
-/**
- * Tests flysystem.install functions.
- *
- * @group flysystem
- */
-class InstallFunctionsTest extends UnitTestCase {
-
-  /**
-   * The Flysystem factory prophecy object.
-   *
-   * @var \Prophecy\Prophecy\ObjectProphecy
-   */
-  protected $factory;
-
-  /**
-   * {@inheritdoc}
-   */
-  public function setUp(): void {
-    parent::setUp();
-
-    if (!defined('REQUIREMENT_ERROR')) {
-      define('REQUIREMENT_ERROR', 2);
-    }
-
-    require_once dirname(dirname(dirname(__DIR__))) . '/flysystem.install';
-
-    $this->factory = $this->prophesize(FlysystemFactory::class);
-
-    $container = new ContainerBuilder();
-    $container->set('flysystem_factory', $this->factory->reveal());
-    $container->set('string_translation', $this->getStringTranslationStub());
-
-    \Drupal::setContainer($container);
-  }
-
-  /**
-   * Tests flysystem_requirements() handles update.
-   */
-  public function testFlysystemRequirementsHandlesUpdate() {
-    $dependencies_exist = (int) class_exists(FlysystemStreamWrapper::class);
-
-    $return = flysystem_requirements('update');
-    $this->assertCount((1 - $dependencies_exist), $return);
-  }
-
-  /**
-   * Tests flysystem_requirements() handles install.
-   */
-  public function testFlysystemRequirementsHandlesInstall() {
-    $dependencies_exist = (int) class_exists(FlysystemStreamWrapper::class);
-
-    $return = flysystem_requirements('install');
-    $this->assertCount((1 - $dependencies_exist), $return);
-  }
-
-  /**
-   * Tests flysystem_requirements() handles runtime.
-   */
-  public function testFlysystemRequirementsHandlesRuntime() {
-    $dependencies_exist = (int) class_exists(FlysystemStreamWrapper::class);
-
-    $this->factory->ensure()->willReturn([
-      'testscheme' => [
-        [
-          'message' => 'Test message',
-          'context' => [],
-          'severity' => RfcLogLevel::ERROR,
-        ],
-      ],
-    ]);
-
-    $return = flysystem_requirements('runtime');
-
-    $this->assertCount((2 - $dependencies_exist), $return);
-    $this->assertSame('Test message', (string) $return['flysystem:testscheme']['description']);
-  }
-
-  /**
-   * Tests flysystem_requirements() detects invalid schemes.
-   */
-  public function testFlysystemRequirementsHandlesInvalidSchemes() {
-    new Settings(['flysystem' => ['test_scheme' => []]]);
-    $requirements = flysystem_requirements('update');
-
-    $this->assertTrue(isset($requirements['flysystem_invalid_scheme']));
-  }
-
-  /**
-   * Tests flysystem_install() calls ensure().
-   */
-  public function testFlysystemInstallCallsEnsure() {
-    $this->factory->ensure()->shouldBeCalled();
-    flysystem_install();
-  }
-
-}
diff --git a/tests/src/Unit/Plugin/FlysystemPluginManagerTest.php b/tests/src/Unit/Plugin/FlysystemPluginManagerTest.php
index 84a93af..8687cde 100644
--- a/tests/src/Unit/Plugin/FlysystemPluginManagerTest.php
+++ b/tests/src/Unit/Plugin/FlysystemPluginManagerTest.php
@@ -38,7 +38,7 @@ class FlysystemPluginManagerTest extends UnitTestCase {
       'test3' => ['extensions' => ['missing_extension']],
     ];
 
-    $method->invokeArgs($manager, [&$definitions]);
+    $method->invokeArgs($manager, [&$definitions]); // phpcs:ignore
     $this->assertCount(2, $definitions);
     $this->assertArrayHasKey('test1', $definitions);
     $this->assertArrayHasKey('test2', $definitions);
