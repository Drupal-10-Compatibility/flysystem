diff --git a/flysystem.routing.yml b/flysystem.routing.yml
index 5d5a931..183ecd9 100644
--- a/flysystem.routing.yml
+++ b/flysystem.routing.yml
@@ -4,6 +4,7 @@ flysystem.files:
     _controller: 'Drupal\system\FileDownloadController::download'
     _disable_route_normalizer: 'TRUE'
   requirements:
+    # Permissions are handled through Drupal file create / update permissions
     _access: 'TRUE'
     scheme: '^[a-zA-Z0-9+.-]+$'
 
@@ -13,6 +14,7 @@ flysystem.serve:
     _controller: 'Drupal\system\FileDownloadController::download'
     _disable_route_normalizer: 'TRUE'
   requirements:
+  # Permissions are handled through Drupal access content permissions
     _access: 'TRUE'
     scheme: '^[a-zA-Z0-9+.-]+$'
     filepath: .+
diff --git a/src/Annotation/Adapter.php b/src/Annotation/Adapter.php
index d2ea1ac..15f609d 100644
--- a/src/Annotation/Adapter.php
+++ b/src/Annotation/Adapter.php
@@ -7,7 +7,7 @@ use Drupal\Component\Annotation\Plugin;
 /**
  * Defines a Flysystem adapter plguin.
  *
- * Plugin Namespace: Flysystem
+ * Plugin Namespace: Flysystem.
  *
  * For a working example, see \Drupal\flysystem\Flysystem\Local.
  *
diff --git a/src/Asset/CssCollectionOptimizer.php b/src/Asset/CssCollectionOptimizer.php
index 4c5f077..c1d2f26 100644
--- a/src/Asset/CssCollectionOptimizer.php
+++ b/src/Asset/CssCollectionOptimizer.php
@@ -26,7 +26,8 @@ class CssCollectionOptimizer extends DrupalCssCollectionOptimizer {
       if (\Drupal::time()->getRequestTime() - filemtime($uri) > $stale_file_threshold) {
         try {
           $file_system->delete($uri);
-        } catch (\Exception $e) {
+        }
+        catch (\Exception $e) {
           $this->getLogger('flysystem')->error($e->getMessage());
         }
       }
diff --git a/src/Asset/CssOptimizer.php b/src/Asset/CssOptimizer.php
index 1e16e36..c969b9e 100644
--- a/src/Asset/CssOptimizer.php
+++ b/src/Asset/CssOptimizer.php
@@ -14,6 +14,7 @@ class CssOptimizer extends DrupalCssOptimizer {
   /**
    * {@inheritdoc}
    */
+  // phpcs:ignore
   public function rewriteFileURI($matches) {
     // Prefix with base and remove '../' segments where possible.
     $path = $this->rewriteFileURIBasePath . $matches[1];
diff --git a/src/Asset/JsCollectionOptimizer.php b/src/Asset/JsCollectionOptimizer.php
index 38a0a80..1de8cfa 100644
--- a/src/Asset/JsCollectionOptimizer.php
+++ b/src/Asset/JsCollectionOptimizer.php
@@ -26,7 +26,8 @@ class JsCollectionOptimizer extends DrupalJsCollectionOptimizer {
       if (\Drupal::time()->getRequestTime() - filemtime($uri) > $stale_file_threshold) {
         try {
           $file_system->delete($uri);
-        } catch (\Exception $e) {
+        }
+        catch (\Exception $e) {
           $this->getLogger('flysystem')->error($e->getMessage());
         }
       }
diff --git a/src/Event/EnsureEvent.php b/src/Event/EnsureEvent.php
index 304b9ba..697b82f 100644
--- a/src/Event/EnsureEvent.php
+++ b/src/Event/EnsureEvent.php
@@ -60,6 +60,7 @@ class EnsureEvent extends Event {
    * Returns the context.
    *
    * @return array
+   *   Context.
    */
   public function getContext() {
     return $this->context;
@@ -69,6 +70,7 @@ class EnsureEvent extends Event {
    * Returns the message.
    *
    * @return string
+   *   The message text.
    */
   public function getMessage() {
     return $this->message;
@@ -78,6 +80,7 @@ class EnsureEvent extends Event {
    * Returns the scheme.
    *
    * @return string
+   *   The scheme identifier.
    */
   public function getScheme() {
     return $this->scheme;
@@ -87,6 +90,7 @@ class EnsureEvent extends Event {
    * Returns the severity.
    *
    * @return int
+   *   The severity.
    */
   public function getSeverity() {
     return $this->severity;
diff --git a/src/Flysystem/Adapter/CacheItemBackend.php b/src/Flysystem/Adapter/CacheItemBackend.php
index b4e92a6..da12e1c 100644
--- a/src/Flysystem/Adapter/CacheItemBackend.php
+++ b/src/Flysystem/Adapter/CacheItemBackend.php
@@ -31,6 +31,8 @@ class CacheItemBackend {
   /**
    * Constructs a new CacheItemBackend.
    *
+   * @param string $scheme
+   *   The scheme being managed by the cache.
    * @param \Drupal\Core\Cache\CacheBackendInterface $cacheBackend
    *   The Drupal cache backend to store items in.
    */
diff --git a/src/Flysystem/Adapter/DrupalCacheAdapter.php b/src/Flysystem/Adapter/DrupalCacheAdapter.php
index 1abfe4e..3f2a05f 100644
--- a/src/Flysystem/Adapter/DrupalCacheAdapter.php
+++ b/src/Flysystem/Adapter/DrupalCacheAdapter.php
@@ -178,7 +178,7 @@ class DrupalCacheAdapter implements AdapterInterface {
     }
 
     // Always check the upstream adapter for new files.
-    // TODO: This could be a good place for a microcache?
+    // @todo This could be a good place for a microcache?
     return $this->adapter->has($path);
   }
 
@@ -202,7 +202,7 @@ class DrupalCacheAdapter implements AdapterInterface {
   public function listContents($directory = '', $recursive = FALSE) {
     // Don't cache directory listings to avoid having to keep track of
     // incomplete cache entries.
-    // TODO: This could be a good place for a microcache?
+    // @todo This could be a good place for a microcache?
     return $this->adapter->listContents($directory, $recursive);
   }
 
diff --git a/src/FlysystemBridge.php b/src/FlysystemBridge.php
index b21940c..998c37d 100644
--- a/src/FlysystemBridge.php
+++ b/src/FlysystemBridge.php
@@ -26,10 +26,10 @@ class FlysystemBridge extends FlysystemStreamWrapper implements StreamWrapperInt
    */
   public function getName() {
     $scheme = $this->getProtocol();
-    $name = (string) $this->getFactory()->getSettings($scheme)['name'];
+    $name = $this->getFactory()->getSettings($scheme)['name'];
     $default = $this->t('Flysystem: @scheme', ['@scheme' => $scheme]);
 
-    return $name !== '' ? $this->t($name) : $default;
+    return $name !== '' ? $name : $default;
   }
 
   /**
@@ -37,10 +37,10 @@ class FlysystemBridge extends FlysystemStreamWrapper implements StreamWrapperInt
    */
   public function getDescription() {
     $scheme = $this->getProtocol();
-    $description = (string) $this->getFactory()->getSettings($scheme)['description'];
+    $description = $this->getFactory()->getSettings($scheme)['description'];
     $default = $this->t('Flysystem: @scheme', ['@scheme' => $scheme]);
 
-    return $description !== '' ? $this->t($description) : $default;
+    return $description !== '' ? $description : $default;
   }
 
   /**
@@ -82,7 +82,7 @@ class FlysystemBridge extends FlysystemStreamWrapper implements StreamWrapperInt
       $uri = $this->uri;
     }
 
-    list($scheme, $target) = explode('://', $uri, 2);
+    [$scheme, $target] = explode('://', $uri, 2);
 
     return $scheme . '://' . ltrim(Util::dirname($target), '\/');
   }
diff --git a/src/FlysystemFactory.php b/src/FlysystemFactory.php
index 41fb8c8..7f19e63 100644
--- a/src/FlysystemFactory.php
+++ b/src/FlysystemFactory.php
@@ -4,7 +4,6 @@ namespace Drupal\flysystem;
 
 use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Core\Cache\CacheBackendInterface;
-use Drupal\Core\File\FileSystemInterface;
 use Drupal\Core\Site\Settings;
 use Drupal\Core\StreamWrapper\StreamWrapperManagerInterface;
 use Drupal\flysystem\Event\EnsureEvent;
@@ -163,7 +162,7 @@ class FlysystemFactory {
    *   The settings array from settings.php.
    */
   public function getSettings($scheme) {
-    return isset($this->settings[$scheme]) ? $this->settings[$scheme] : $this->defaults;
+    return $this->settings[$scheme] ?? $this->defaults;
   }
 
   /**
diff --git a/src/Form/ConfigForm.php b/src/Form/ConfigForm.php
index 42755bf..5dd117f 100644
--- a/src/Form/ConfigForm.php
+++ b/src/Form/ConfigForm.php
@@ -153,7 +153,9 @@ class ConfigForm extends FormBase {
 
       if (!is_resource($read_handle)) {
         $args = ['%scheme' => $scheme_from, '%file' => $filepath];
-        $context['results']['errors'][] = ['The file %scheme://%file could not be opened.', $args];
+        $context['results']['errors'][] = [
+          'The file %scheme://%file could not be opened.', $args,
+        ];
         return;
       }
 
@@ -161,14 +163,18 @@ class ConfigForm extends FormBase {
 
       if (!$success) {
         $args = ['%scheme' => $scheme_to, '%file' => $filepath];
-        $context['results']['errors'][] = ['The file %scheme://%file could not be saved.', $args];
+        $context['results']['errors'][] = [
+          'The file %scheme://%file could not be saved.', $args,
+        ];
       }
     }
 
     // Catch all exceptions so we don't break batching. The types of exceptions
     // that adapters can throw varies greatly.
     catch (\Exception $e) {
-      $context['results']['errors'][] = ['An eror occured while copying %file.', ['%file' => $filepath]];
+      $context['results']['errors'][] = [
+        'An eror occured while copying %file.', ['%file' => $filepath],
+      ];
       $context['results']['errors'][] = $e->getMessage();
 
       watchdog_exception('flysystem', $e);
diff --git a/src/PathProcessor/FlysystemPathProcessor.php b/src/PathProcessor/FlysystemPathProcessor.php
index 791433c..29c8a9b 100644
--- a/src/PathProcessor/FlysystemPathProcessor.php
+++ b/src/PathProcessor/FlysystemPathProcessor.php
@@ -32,7 +32,7 @@ class FlysystemPathProcessor implements InboundPathProcessorInterface {
 
     // Support image styles.
     if (strpos($rest, 'styles/') === 0 && substr_count($rest, '/') >= 3) {
-      list(, $image_style, $scheme, $file) = explode('/', $rest, 4);
+      [, $image_style, $scheme, $file] = explode('/', $rest, 4);
 
       // Set the file as query parameter.
       $request->query->set('file', $file);
diff --git a/src/PathProcessor/LocalPathProcessor.php b/src/PathProcessor/LocalPathProcessor.php
index 78c83a2..4d86beb 100644
--- a/src/PathProcessor/LocalPathProcessor.php
+++ b/src/PathProcessor/LocalPathProcessor.php
@@ -7,8 +7,7 @@ use Drupal\Core\Site\Settings;
 use Symfony\Component\HttpFoundation\Request;
 
 /**
- * Defines a path processor to serve public files directly for the local
- * adapter.
+ * Defines a path processor to serve public files for the local adapter.
  *
  * As the route system does not allow arbitrary amount of parameters convert
  * the file path to a query parameter on the request.
@@ -52,7 +51,7 @@ class LocalPathProcessor implements InboundPathProcessorInterface {
     $rest = substr($path, strlen($this->root) + 2);
 
     if (strpos($rest, 'styles/') === 0 && substr_count($rest, '/') >= 3) {
-      list(, $image_style, $scheme, $file) = explode('/', $rest, 4);
+      [, $image_style, $scheme, $file] = explode('/', $rest, 4);
 
       // Set the file as query parameter.
       $request->query->set('file', $file);
diff --git a/src/Plugin/FlysystemPluginInterface.php b/src/Plugin/FlysystemPluginInterface.php
index bc42f8f..17582c3 100644
--- a/src/Plugin/FlysystemPluginInterface.php
+++ b/src/Plugin/FlysystemPluginInterface.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\flysystem\Plugin;
 
+/**
+ * Interface definition for Flysystem plugins.
+ */
 interface FlysystemPluginInterface {
 
   /**
diff --git a/src/Plugin/ImageStyleGenerationTrait.php b/src/Plugin/ImageStyleGenerationTrait.php
index fb38520..f3005ed 100644
--- a/src/Plugin/ImageStyleGenerationTrait.php
+++ b/src/Plugin/ImageStyleGenerationTrait.php
@@ -24,7 +24,7 @@ trait ImageStyleGenerationTrait {
       return FALSE;
     }
 
-    list(, $style, $scheme, $file) = explode('/', $target, 4);
+    [, $style, $scheme, $file] = explode('/', $target, 4);
 
     if (!$image_style = ImageStyle::load($style)) {
       return FALSE;
diff --git a/tests/src/Functional/ModuleInstallUninstallWebTest.php b/tests/src/Functional/ModuleInstallUninstallWebTest.php
index 0d3a488..8cb2d41 100644
--- a/tests/src/Functional/ModuleInstallUninstallWebTest.php
+++ b/tests/src/Functional/ModuleInstallUninstallWebTest.php
@@ -19,7 +19,7 @@ class ModuleInstallUninstallWebTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  public static $modules = ['flysystem'];
+  protected static $modules = ['flysystem'];
 
   /**
    * Tests installation and uninstallation.
diff --git a/tests/src/Kernel/CollectionOptimizerTest.php b/tests/src/Kernel/CollectionOptimizerTest.php
index a6dd6fc..daa2edb 100644
--- a/tests/src/Kernel/CollectionOptimizerTest.php
+++ b/tests/src/Kernel/CollectionOptimizerTest.php
@@ -23,15 +23,28 @@ class CollectionOptimizerTest extends KernelTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  protected static $modules = ['file'];
+
+  /**
+   * The file URL generator.
+   *
+   * @var \Drupal\Core\File\FileUrlGeneratorInterface
+   */
+  protected $fileUrlGenerator;
+
+  /**
+   * {@inheritdoc}
+   */
+  public function setUp(): void {
     parent::setUp();
+    $this->fileUrlGenerator = $this->container->get('file_url_generator');
     $this->cleanUp();
   }
 
   /**
    * {@inheritdoc}
    */
-  public function tearDown() {
+  public function tearDown(): void {
     $this->cleanUp();
     parent::tearDown();
   }
@@ -68,7 +81,7 @@ class CollectionOptimizerTest extends KernelTestBase {
 
     foreach ($this->jsFilesUnderTest() as $js_file => $expired) {
       if ($expired === TRUE) {
-        $this->assertFileNotExists($js_file);
+        $this->assertFileDoesNotExist($js_file);
         continue;
       }
       $this->assertFileExists($js_file);
@@ -103,12 +116,12 @@ class CollectionOptimizerTest extends KernelTestBase {
     $dumper = $this->prophesize(AssetDumper::class);
     $state = $this->prophesize(StateInterface::class);
 
-    $optimizer = new CssCollectionOptimizer($grouper->reveal(), new CssOptimizer(), $dumper->reveal(), $state->reveal(), $this->container->get('file_system'));
+    $optimizer = new CssCollectionOptimizer($grouper->reveal(), new CssOptimizer($this->fileUrlGenerator), $dumper->reveal(), $state->reveal(), $this->container->get('file_system'));
     $optimizer->deleteAll();
 
     foreach ($this->cssFilesUnderTest() as $css_file => $expired) {
       if ($expired === TRUE) {
-        $this->assertFileNotExists($css_file);
+        $this->assertFileDoesNotExist($css_file);
         continue;
       }
       $this->assertFileExists($css_file);
diff --git a/tests/src/Unit/Flysystem/Adapter/CacheItemBackendTest.php b/tests/src/Unit/Flysystem/Adapter/CacheItemBackendTest.php
index dbf423d..f00b104 100644
--- a/tests/src/Unit/Flysystem/Adapter/CacheItemBackendTest.php
+++ b/tests/src/Unit/Flysystem/Adapter/CacheItemBackendTest.php
@@ -8,6 +8,8 @@ use Drupal\flysystem\Flysystem\Adapter\CacheItem;
 use Drupal\flysystem\Flysystem\Adapter\CacheItemBackend;
 
 /**
+ * Tests \Drupal\flysystem\Flysystem\Adapter\CacheItemBackend.
+ *
  * @group flysystem
  *
  * @coversDefaultClass \Drupal\flysystem\Flysystem\Adapter\CacheItemBackend
@@ -32,7 +34,7 @@ class CacheItemBackendTest extends UnitTestCase {
   /**
    * {@inheritdoc}
    */
-  public function setup() {
+  public function setup(): void {
     $this->cacheBackend = new MemoryBackend('foo');
     $this->cacheItemBackend = new CacheItemBackend('test-scheme', $this->cacheBackend);
   }
diff --git a/tests/src/Unit/Flysystem/Adapter/DrupalCacheAdapterTest.php b/tests/src/Unit/Flysystem/Adapter/DrupalCacheAdapterTest.php
index e655a5b..e851c37 100644
--- a/tests/src/Unit/Flysystem/Adapter/DrupalCacheAdapterTest.php
+++ b/tests/src/Unit/Flysystem/Adapter/DrupalCacheAdapterTest.php
@@ -57,12 +57,15 @@ class DrupalCacheAdapterTest extends UnitTestCase {
   /**
    * {@inheritdoc}
    */
-  public function setup() {
+  public function setup(): void {
     $this->cacheItemBackend = new CacheItemBackend(static::SCHEME, new MemoryBackend('foo'));
     $this->adapter = $this->prophesize(AdapterInterface::class);
     $this->cacheAdapter = new DrupalCacheAdapter(static::SCHEME, $this->adapter->reveal(), $this->cacheItemBackend);
   }
 
+  /**
+   * Tests creating a public file.
+   */
   public function testWriteSuccess() {
     $config = new Config();
     $this->adapter
@@ -75,6 +78,9 @@ class DrupalCacheAdapterTest extends UnitTestCase {
     $this->assertTrue($this->cacheItemBackend->has(static::FILE));
   }
 
+  /**
+   * Tests creating a public file stream.
+   */
   public function testWriteStreamSuccess() {
     $config = new Config();
     $stream = fopen('data:text/plain,contents', 'rb');
@@ -89,6 +95,9 @@ class DrupalCacheAdapterTest extends UnitTestCase {
     $this->assertTrue($this->cacheItemBackend->has(static::FILE));
   }
 
+  /**
+   * Tests public file updates.
+   */
   public function testUpdateSuccess() {
     $config = new Config();
     $this->adapter
@@ -100,6 +109,9 @@ class DrupalCacheAdapterTest extends UnitTestCase {
     $this->assertSame('public', $this->cacheAdapter->getVisibility(static::FILE)['visibility']);
   }
 
+  /**
+   * Tests public file stream updates.
+   */
   public function testUpdateStreamSuccess() {
     $config = new Config();
     $stream = fopen('data:text/plain,contents', 'rb');
@@ -114,6 +126,9 @@ class DrupalCacheAdapterTest extends UnitTestCase {
     $this->assertTrue($this->cacheItemBackend->has(static::FILE));
   }
 
+  /**
+   * Tests renaming a file.
+   */
   public function testRenameSuccess() {
     $config = new Config();
     $this->adapter
@@ -134,6 +149,9 @@ class DrupalCacheAdapterTest extends UnitTestCase {
 
   }
 
+  /**
+   * Tests copying a file.
+   */
   public function testCopySuccess() {
     $config = new Config();
     $this->adapter
@@ -152,6 +170,9 @@ class DrupalCacheAdapterTest extends UnitTestCase {
     $this->assertTrue($this->cacheItemBackend->has('new.txt'));
   }
 
+  /**
+   * Tests deleting a file.
+   */
   public function testDeleteSuccess() {
     $config = new Config();
     $this->adapter
@@ -166,6 +187,9 @@ class DrupalCacheAdapterTest extends UnitTestCase {
     $this->assertFalse($this->cacheItemBackend->has(static::FILE));
   }
 
+  /**
+   * Tests deleting a file directory.
+   */
   public function testDeleteDirSuccess() {
     $config = new Config();
     // Create a directory with one sub file.
@@ -187,8 +211,10 @@ class DrupalCacheAdapterTest extends UnitTestCase {
     $this->assertFalse($this->cacheItemBackend->has('testdir'));
   }
 
+  /**
+   * Tests visibility checking on private files.
+   */
   public function testSetVisibilitySuccess() {
-    $config = new Config();
     $this->adapter
       ->setVisibility(static::FILE, 'private')
       ->willReturn(['visibility' => 'private']);
@@ -199,32 +225,50 @@ class DrupalCacheAdapterTest extends UnitTestCase {
     $this->assertTrue($this->cacheItemBackend->has(static::FILE));
   }
 
+  /**
+   * Tests file loading success.
+   */
   public function testHasSuccess() {
     $cache_item = $this->cacheItemBackend->load(static::FILE);
     $this->cacheItemBackend->set(static::FILE, $cache_item);
     $this->assertTrue($this->cacheAdapter->has(static::FILE));
   }
 
+  /**
+   * Tests file loading failure.
+   */
   public function testHasFail() {
     $this->adapter->has(static::FILE)->willReturn(TRUE);
     $this->assertTrue($this->cacheAdapter->has(static::FILE));
   }
 
+  /**
+   * Tests reading a file.
+   */
   public function testRead() {
     $this->adapter->read(static::FILE)->willReturn(TRUE);
     $this->assertTrue($this->cacheAdapter->read(static::FILE));
   }
 
+  /**
+   * Tests reading a stream.
+   */
   public function testReadStream() {
     $this->adapter->readStream(static::FILE)->willReturn(TRUE);
     $this->assertTrue($this->cacheAdapter->readStream(static::FILE));
   }
 
+  /**
+   * Tests listing contents of a directory.
+   */
   public function testListContentsSuccess() {
     $this->adapter->listContents('testdir', TRUE)->willReturn(TRUE);
     $this->assertTrue($this->cacheAdapter->listContents('testdir', TRUE));
   }
 
+  /**
+   * Tests retrieving file metadata.
+   */
   public function testGetMetadataSuccess() {
     $cache_item = $this->cacheItemBackend->load(static::FILE);
     $cache_item->updateMetadata(['type' => 'dir']);
@@ -233,12 +277,18 @@ class DrupalCacheAdapterTest extends UnitTestCase {
     $this->assertSame('dir', $this->cacheAdapter->getMetadata(static::FILE)['type']);
   }
 
+  /**
+   * Tests failing to retrieve file metadata.
+   */
   public function testGetMetadataFail() {
     $this->adapter->getMetadata(static::FILE)->willReturn(['type' => 'dir']);
 
     $this->assertSame('dir', $this->cacheAdapter->getMetadata(static::FILE)['type']);
   }
 
+  /**
+   * Tests failing to retrieve file size.
+   */
   public function testGetSizeFail() {
     $this->adapter->getSize(static::FILE)->willReturn(['size' => 123]);
 
diff --git a/tests/src/Unit/Flysystem/FtpTest.php b/tests/src/Unit/Flysystem/FtpTest.php
index 0e657a7..2f28bf7 100644
--- a/tests/src/Unit/Flysystem/FtpTest.php
+++ b/tests/src/Unit/Flysystem/FtpTest.php
@@ -17,7 +17,7 @@ namespace Drupal\Tests\flysystem\Unit\Flysystem {
     /**
      * {@inheritdoc}
      */
-    public function setUp() {
+    public function setUp(): void {
       parent::setUp();
       if (!defined('FTP_BINARY')) {
         $this->markTestSkipped('The FTP_BINARY constant is not defined.');
diff --git a/tests/src/Unit/Flysystem/LocalTest.php b/tests/src/Unit/Flysystem/LocalTest.php
index fbc75fa..9147834 100644
--- a/tests/src/Unit/Flysystem/LocalTest.php
+++ b/tests/src/Unit/Flysystem/LocalTest.php
@@ -21,7 +21,7 @@ class LocalTest extends UnitTestCase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $GLOBALS['base_url'] = 'http://example.com';
 
@@ -42,7 +42,7 @@ class LocalTest extends UnitTestCase {
   /**
    * {@inheritdoc}
    */
-  public function tearDown() {
+  public function tearDown(): void {
     (new LocalAdapter('foo'))->deleteDir('');
     @rmdir('foo');
 
@@ -103,7 +103,7 @@ class LocalTest extends UnitTestCase {
    * @covers ::ensureDirectory
    */
   public function testDirectoryIsAutoCreatedAndHtaccessIsWritten() {
-    $plugin = new Local('does_not_exist');
+    new Local('does_not_exist');
     $this->assertTrue(is_dir('does_not_exist'));
     $this->assertTrue(is_file('does_not_exist/.htaccess'));
 
diff --git a/tests/src/Unit/FlysystemBridgeTest.php b/tests/src/Unit/FlysystemBridgeTest.php
index ce3704e..2fe42e1 100644
--- a/tests/src/Unit/FlysystemBridgeTest.php
+++ b/tests/src/Unit/FlysystemBridgeTest.php
@@ -18,11 +18,15 @@ use Symfony\Component\DependencyInjection\ContainerBuilder;
 class FlysystemBridgeTest extends UnitTestCase {
 
   /**
+   * Flysystem Bridge.
+   *
    * @var \Drupal\flysystem\FlysystemBridge
    */
   protected $bridge;
 
   /**
+   * File system.
+   *
    * @var \League\Flysystem\FilesystemInterface
    */
   protected $filesystem;
@@ -30,7 +34,7 @@ class FlysystemBridgeTest extends UnitTestCase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     $this->bridge = new FlysystemBridge();
     $this->bridge->setStringTranslation($this->getStringTranslationStub());
@@ -43,7 +47,10 @@ class FlysystemBridgeTest extends UnitTestCase {
 
     $factory->getFilesystem('testscheme')->willReturn($this->filesystem);
 
-    $factory->getSettings('testscheme')->willReturn(['name' => '', 'description' => '']);
+    $factory->getSettings('testscheme')->willReturn([
+      'name' => '',
+      'description' => '',
+    ]);
 
     $container = new ContainerBuilder();
     $container->set('flysystem_factory', $factory->reveal());
diff --git a/tests/src/Unit/FlysystemFactoryTest.php b/tests/src/Unit/FlysystemFactoryTest.php
index c9b99c9..9c9e0b1 100644
--- a/tests/src/Unit/FlysystemFactoryTest.php
+++ b/tests/src/Unit/FlysystemFactoryTest.php
@@ -4,7 +4,6 @@ namespace Drupal\Tests\flysystem\Unit;
 
 use Drupal\Component\Plugin\PluginManagerInterface;
 use Drupal\Core\Cache\NullBackend;
-use Drupal\Core\File\FileSystemInterface as CoreFileSystemInterface;
 use Drupal\Core\Site\Settings;
 use Drupal\Core\StreamWrapper\StreamWrapperManager;
 use Drupal\Tests\UnitTestCase;
@@ -26,26 +25,36 @@ use Symfony\Component\EventDispatcher\EventDispatcherInterface;
 class FlysystemFactoryTest extends UnitTestCase {
 
   /**
+   * Backend Cache.
+   *
    * @var \Drupal\Core\Cache\CacheBackendInterface
    */
   protected $cache;
 
   /**
+   * Event Dispatcher.
+   *
    * @var \Symfony\Component\EventDispatcher\EventDispatcherInterface
    */
   protected $eventDispatcher;
 
   /**
+   * Mocked File System.
+   *
    * @var \Prophecy\Prophecy\ObjectProphecy
    */
   protected $filesystem;
 
   /**
+   * Mocked Plugin.
+   *
    * @var \Prophecy\Prophecy\ObjectProphecy
    */
   protected $plugin;
 
   /**
+   * Mocked Plugin Manager.
+   *
    * @var \Prophecy\Prophecy\ObjectProphecy
    */
   protected $pluginManager;
@@ -53,7 +62,7 @@ class FlysystemFactoryTest extends UnitTestCase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     $this->cache = new NullBackend('bin');
@@ -181,7 +190,10 @@ class FlysystemFactoryTest extends UnitTestCase {
   }
 
   /**
+   * Gets and returns the Flysystem Factory.
+   *
    * @return \Drupal\flysystem\FlysystemFactory
+   *   Flysystem Factory.
    */
   protected function getFactory() {
     return new FlysystemFactory(
diff --git a/tests/src/Unit/FlysystemServiceProviderTest.php b/tests/src/Unit/FlysystemServiceProviderTest.php
index c0c2fde..745e198 100644
--- a/tests/src/Unit/FlysystemServiceProviderTest.php
+++ b/tests/src/Unit/FlysystemServiceProviderTest.php
@@ -33,7 +33,7 @@ class FlysystemServiceProviderTest extends UnitTestCase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     $this->container = new ContainerBuilder();
   }
 
@@ -102,7 +102,14 @@ class FlysystemServiceProviderTest extends UnitTestCase {
     $this->assertSame(JsCollectionOptimizer::class, $this->container->getDefinition('asset.js.collection_optimizer')->getClass());
 
     // A successful swap.
-    new Settings(['flysystem' => ['testscheme' => ['driver' => 'whatever', 'serve_js' => TRUE]]]);
+    new Settings([
+      'flysystem' => [
+        'testscheme' => [
+          'driver' => 'whatever',
+          'serve_js' => TRUE,
+        ],
+      ],
+    ]);
     (new FlysystemServiceProvider())->register($this->container);
     $this->assertSame(FlysystemAssetDumper::class, $this->container->getDefinition('asset.js.dumper')->getClass());
     $this->assertSame(FlysystemJsCollectionOptimizer::class, $this->container->getDefinition('asset.js.collection_optimizer')->getClass());
@@ -117,7 +124,14 @@ class FlysystemServiceProviderTest extends UnitTestCase {
     $this->container->register('asset.css.collection_optimizer', CssCollectionOptimizer::class);
     $this->container->register('asset.css.optimizer', CssOptimizer::class);
 
-    new Settings(['flysystem' => ['testscheme' => ['driver' => 'whatever', 'serve_css' => TRUE]]]);
+    new Settings([
+      'flysystem' => [
+        'testscheme' => [
+          'driver' => 'whatever',
+          'serve_css' => TRUE,
+        ],
+      ],
+    ]);
 
     (new FlysystemServiceProvider())->register($this->container);
 
diff --git a/tests/src/Unit/Form/ConfigFormTest.php b/tests/src/Unit/Form/ConfigFormTest.php
index 502e74d..058b711 100644
--- a/tests/src/Unit/Form/ConfigFormTest.php
+++ b/tests/src/Unit/Form/ConfigFormTest.php
@@ -5,6 +5,7 @@ namespace Drupal\Tests\flysystem\Unit\Form {
   use function Drupal\flysystem\Form\batch_set;
   use Drupal\Core\Form\FormState;
   use Drupal\Core\Logger\LoggerChannelFactoryInterface;
+  use Drupal\Core\Messenger\MessengerInterface;
   use Drupal\Tests\UnitTestCase;
   use Drupal\flysystem\FlysystemFactory;
   use Drupal\flysystem\Form\ConfigForm;
@@ -38,7 +39,7 @@ namespace Drupal\Tests\flysystem\Unit\Form {
     /**
      * {@inheritdoc}
      */
-    public function setUp() {
+    public function setUp(): void {
       parent::setUp();
 
       $this->factory = $this->prophesize(FlysystemFactory::class);
@@ -46,10 +47,9 @@ namespace Drupal\Tests\flysystem\Unit\Form {
       $this->factory->getFilesystem('to_empty')->willReturn(new Filesystem(new MemoryAdapter()));
       $this->factory->getSchemes()->willReturn(['from_empty', 'to_empty']);
 
-
       $this->form = new ConfigForm($this->factory->reveal());
       $this->form->setStringTranslation($this->getStringTranslationStub());
-      $messenger = $this->prophesize(\Drupal\Core\Messenger\MessengerInterface::class);
+      $messenger = $this->prophesize(MessengerInterface::class);
 
       $container = new ContainerBuilder();
       $container->set('string_translation', $this->getStringTranslationStub());
@@ -232,9 +232,12 @@ namespace Drupal\Tests\flysystem\Unit\Form {
       ConfigForm::finishBatch(TRUE, [
         'errors' => [
           'first error',
-          ['second error', ['']]],
+          [
+            'second error', [''],
+          ],
+        ],
       ], []);
-      // TODO: refactor.
+      // @todo refactor.
       $this->assertTrue(TRUE);
     }
 
@@ -262,9 +265,15 @@ namespace Drupal\Tests\flysystem\Unit\Form {
 
 namespace Drupal\flysystem\Form {
 
+  /**
+   * Override for drupal_set_message().
+   */
   function drupal_set_message() {
   }
 
+  /**
+   * Mock batch_set() for testing.
+   */
   function batch_set($batch = NULL) {
     static $last_batch;
 
@@ -274,12 +283,18 @@ namespace Drupal\flysystem\Form {
     return $last_batch;
   }
 
+  /**
+   * Override for drupal_set_time_limit().
+   */
   function drupal_set_time_limit($limit) {
     if ($limit !== 0) {
       throw new \Exception();
     }
   }
 
+  /**
+   * Override for Watchdog exception().
+   */
   function watchdog_exception() {
   }
 
diff --git a/tests/src/Unit/InstallFunctionsTest.php b/tests/src/Unit/InstallFunctionsTest.php
index 7e046bc..fdfa0d3 100644
--- a/tests/src/Unit/InstallFunctionsTest.php
+++ b/tests/src/Unit/InstallFunctionsTest.php
@@ -26,7 +26,7 @@ class InstallFunctionsTest extends UnitTestCase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
 
     if (!defined('REQUIREMENT_ERROR')) {
diff --git a/tests/src/Unit/Logger/ConvertTest.php b/tests/src/Unit/Logger/ConvertTest.php
index 9dbd346..8198eb3 100644
--- a/tests/src/Unit/Logger/ConvertTest.php
+++ b/tests/src/Unit/Logger/ConvertTest.php
@@ -15,7 +15,7 @@ class ConvertTest extends UnitTestCase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     $consts = [
       'REQUIREMENT_INFO' => -1,
       'REQUIREMENT_OK' => 0,
diff --git a/tests/src/Unit/ModuleFunctionsTest.php b/tests/src/Unit/ModuleFunctionsTest.php
index 614e510..e90dbdb 100644
--- a/tests/src/Unit/ModuleFunctionsTest.php
+++ b/tests/src/Unit/ModuleFunctionsTest.php
@@ -27,7 +27,7 @@ class ModuleFunctionsTest extends UnitTestCase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();
     vfsStream::setup('module_file');
 
@@ -38,7 +38,7 @@ class ModuleFunctionsTest extends UnitTestCase {
 
     $file_system_helper = $this->prophesize(StreamWrapperManagerInterface::class);
     $file_system_helper->isValidScheme(Argument::type('string'))->will(function ($uri) {
-      list($scheme) = explode('://', $uri[0]);
+      [$scheme] = explode('://', $uri[0]);
       return $scheme;
     });
 
diff --git a/tests/src/Unit/PathProcessor/LocalPathProcessorTest.php b/tests/src/Unit/PathProcessor/LocalPathProcessorTest.php
index a601bf1..49aff43 100644
--- a/tests/src/Unit/PathProcessor/LocalPathProcessorTest.php
+++ b/tests/src/Unit/PathProcessor/LocalPathProcessorTest.php
@@ -14,6 +14,8 @@ use Symfony\Component\HttpFoundation\Request;
 class LocalPathProcessorTest extends UnitTestCase {
 
   /**
+   * Inbound Path processor.
+   *
    * @var \Drupal\Core\PathProcessor\InboundPathProcessorInterface
    */
   protected $processor;
@@ -21,7 +23,7 @@ class LocalPathProcessorTest extends UnitTestCase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     new Settings(
       [
         'flysystem' => [
diff --git a/tests/src/Unit/Routing/FlysystemRoutesTest.php b/tests/src/Unit/Routing/FlysystemRoutesTest.php
index 1212658..816402b 100644
--- a/tests/src/Unit/Routing/FlysystemRoutesTest.php
+++ b/tests/src/Unit/Routing/FlysystemRoutesTest.php
@@ -18,16 +18,22 @@ use Drupal\flysystem\Routing\FlysystemRoutes;
 class FlysystemRoutesTest extends UnitTestCase {
 
   /**
+   * Flysystem Factory.
+   *
    * @var \Drupal\flysystem\FlysystemFactory
    */
   protected $factory;
 
   /**
+   * Drupal ModuleHandler.
+   *
    * @var \Drupal\Core\Extension\ModuleHandlerInterface
    */
   protected $moduleHandler;
 
   /**
+   * Flysystem routing for files.
+   *
    * @var \Drupal\flysystem\Routing\FlysystemRoutes
    */
   protected $router;
@@ -35,7 +41,7 @@ class FlysystemRoutesTest extends UnitTestCase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     $container = new ContainerBuilder();
 
     $stream_wrapper = $this->prophesize(LocalStream::class);
@@ -95,17 +101,17 @@ class FlysystemRoutesTest extends UnitTestCase {
    */
   public function testLocalPathSameAsPublicIsSkipped() {
     new Settings([
-    'flysystem' => [
-      'test' => [
-        'driver' => 'local',
-        'public' => TRUE,
-        'config' => [
+      'flysystem' => [
+        'test' => [
+          'driver' => 'local',
           'public' => TRUE,
-          'root' => 'sites/default/files',
+          'config' => [
+            'public' => TRUE,
+            'root' => 'sites/default/files',
+          ],
         ],
       ],
-    ],
-]);
+    ]);
 
     $this->assertSame([], $this->router->routes());
   }
@@ -115,17 +121,17 @@ class FlysystemRoutesTest extends UnitTestCase {
    */
   public function testValidRoutesReturned() {
     new Settings([
-    'flysystem' => [
-      'test' => [
-        'driver' => 'local',
-        'public' => TRUE,
-        'config' => [
+      'flysystem' => [
+        'test' => [
+          'driver' => 'local',
           'public' => TRUE,
-          'root' => 'sites/default/files/flysystem',
+          'config' => [
+            'public' => TRUE,
+            'root' => 'sites/default/files/flysystem',
+          ],
         ],
       ],
-    ],
-]);
+    ]);
 
     $routes = $this->router->routes();
     $this->assertSame(1, count($routes));
@@ -137,17 +143,17 @@ class FlysystemRoutesTest extends UnitTestCase {
    */
   public function testValidRoutesReturnedWithImageModule() {
     new Settings([
-    'flysystem' => [
-      'test' => [
-        'driver' => 'local',
-        'public' => TRUE,
-        'config' => [
+      'flysystem' => [
+        'test' => [
+          'driver' => 'local',
           'public' => TRUE,
-          'root' => 'sites/default/files/flysystem',
+          'config' => [
+            'public' => TRUE,
+            'root' => 'sites/default/files/flysystem',
+          ],
         ],
       ],
-    ],
-]);
+    ]);
 
     $this->moduleHandler->moduleExists('image')->willReturn(TRUE);
     $routes = $this->router->routes();
diff --git a/tests/src/Unit/SerializationStopperTraitTest.php b/tests/src/Unit/SerializationStopperTraitTest.php
index b88df49..b4ddb00 100644
--- a/tests/src/Unit/SerializationStopperTraitTest.php
+++ b/tests/src/Unit/SerializationStopperTraitTest.php
@@ -4,7 +4,6 @@ namespace Drupal\Tests\flysystem\Unit;
 
 use Drupal\Tests\UnitTestCase;
 use Drupal\flysystem\SerializationStopperTrait;
-use LogicException;
 
 /**
  * @coversDefaultClass \Drupal\flysystem\SerializationStopperTrait
@@ -16,7 +15,7 @@ class SerializationStopperTraitTest extends UnitTestCase {
    * @covers ::__sleep
    */
   public function test() {
-    $this->expectException(LogicException::class);
+    $this->expectException(\LogicException::class);
     $this->expectExceptionMessage('can not be serialized.');
     $trait = $this->getMockForTrait(SerializationStopperTrait::class);
     serialize($trait);
