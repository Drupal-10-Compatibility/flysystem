diff --git a/tests/src/Unit/Flysystem/Adapter/DrupalCacheAdapterTest.php b/tests/src/Unit/Flysystem/Adapter/DrupalCacheAdapterTest.php
deleted file mode 100644
index c8f8c40..0000000
--- a/tests/src/Unit/Flysystem/Adapter/DrupalCacheAdapterTest.php
+++ /dev/null
@@ -1,331 +0,0 @@
-<?php
-
-namespace Drupal\Tests\flysystem\Unit\Flysystem\Adapter;
-
-use Drupal\Component\Datetime\TimeInterface;
-use Drupal\Core\Cache\MemoryBackend;
-use Drupal\flysystem\Flysystem\Adapter\CacheItemBackend;
-use Drupal\flysystem\Flysystem\Adapter\DrupalCacheAdapter;
-use Drupal\Tests\UnitTestCase;
-use League\Flysystem\FilesystemAdapter;
-use League\Flysystem\Config;
-
-/**
- * Test the Drupal Cache Adapter.
- *
- * @group flysystem
- *
- * @coversDefaultClass \Drupal\flysystem\Flysystem\Adapter\DrupalCacheAdapter
- * @covers \Drupal\flysystem\Flysystem\Adapter\DrupalCacheAdapter
- */
-class DrupalCacheAdapterTest extends UnitTestCase {
-
-  /**
-   * URI scheme to use for testing.
-   *
-   * @var string
-   */
-  const SCHEME = 'test-scheme';
-
-  /**
-   * The main test file.
-   *
-   * @var string
-   */
-  const FILE = 'test.txt';
-
-  /**
-   * The wrapped Flysystem adapter.
-   *
-   * @var \League\Flysystem\FilesystemAdapter|\PHPUnit_Framework_MockObject_MockObject
-   */
-  protected $adapter;
-
-  /**
-   * The cache adapter under test.
-   *
-   * @var \Drupal\flysystem\Flysystem\Adapter\DrupalCacheAdapter
-   */
-  protected $cacheAdapter;
-
-  /**
-   * The flysystem backend for testing.
-   *
-   * @var \Drupal\flysystem\Flysystem\Adapter\CacheItemBackend
-   */
-  protected $cacheItemBackend;
-
-  /**
-   * {@inheritdoc}
-   */
-  public function setUp(): void {
-    parent::setUp();
-    $time = $this->prophesize(TimeInterface::class)->reveal();
-    $this->cacheItemBackend = new CacheItemBackend(static::SCHEME, new MemoryBackend($time));
-    $this->adapter = $this->prophesize(FilesystemAdapter::class);
-    $this->cacheAdapter = new DrupalCacheAdapter(static::SCHEME, $this->adapter->reveal(), $this->cacheItemBackend);
-  }
-
-  /**
-   * Tests creating a public file.
-   */
-  public function testWriteSuccess() {
-    $config = new Config();
-    $this->adapter
-      ->write(static::FILE, 'contents', $config)
-      ->willReturn(['visibility' => 'public']);
-
-    $metadata = $this->cacheAdapter->write(static::FILE, 'contents', $config);
-    $this->assertSame('public', $metadata['visibility']);
-    $this->assertSame('public', $this->cacheAdapter->getVisibility(static::FILE)['visibility']);
-    $this->assertTrue($this->cacheItemBackend->has(static::FILE));
-  }
-
-  /**
-   * Tests creating a public file stream.
-   */
-  public function testWriteStreamSuccess() {
-    $config = new Config();
-    $stream = fopen('data:text/plain,contents', 'rb');
-
-    $this->adapter
-      ->writeStream(static::FILE, $stream, $config)
-      ->willReturn(['timestamp' => 12345]);
-
-    $metadata = $this->cacheAdapter->writeStream(static::FILE, $stream, $config);
-    $this->assertSame(12345, $metadata['timestamp']);
-    $this->assertSame(12345, $this->cacheAdapter->getTimestamp(static::FILE)['timestamp']);
-    $this->assertTrue($this->cacheItemBackend->has(static::FILE));
-  }
-
-  /**
-   * Tests public file updates.
-   */
-  public function testUpdateSuccess() {
-    $config = new Config();
-    $this->adapter
-      ->update(static::FILE, 'contents', $config)
-      ->willReturn(['visibility' => 'public']);
-
-    $metadata = $this->cacheAdapter->update(static::FILE, 'contents', $config);
-    $this->assertSame('public', $metadata['visibility']);
-    $this->assertSame('public', $this->cacheAdapter->getVisibility(static::FILE)['visibility']);
-  }
-
-  /**
-   * Tests public file stream updates.
-   */
-  public function testUpdateStreamSuccess() {
-    $config = new Config();
-    $stream = fopen('data:text/plain,contents', 'rb');
-
-    $this->adapter
-      ->updateStream(static::FILE, $stream, $config)
-      ->willReturn(['mimetype' => 'test_mimetype']);
-
-    $metadata = $this->cacheAdapter->updateStream(static::FILE, $stream, $config);
-    $this->assertSame('test_mimetype', $metadata['mimetype']);
-    $this->assertSame('test_mimetype', $this->cacheAdapter->getMimetype(static::FILE)['mimetype']);
-    $this->assertTrue($this->cacheItemBackend->has(static::FILE));
-  }
-
-  /**
-   * Tests renaming a file.
-   */
-  public function testRenameSuccess() {
-    $config = new Config();
-    $this->adapter
-      ->write(static::FILE, 'contents', $config)
-      ->willReturn(['size' => 1234]);
-
-    $this->cacheAdapter->write(static::FILE, 'contents', $config);
-
-    $this->adapter
-      ->rename(static::FILE, 'new.txt')
-      ->willReturn(TRUE);
-
-    $this->assertTrue($this->cacheAdapter->rename(static::FILE, 'new.txt'));
-    $this->assertSame(1234, $this->cacheAdapter->getSize('new.txt')['size']);
-
-    $this->assertFalse($this->cacheItemBackend->has(static::FILE));
-    $this->assertTrue($this->cacheItemBackend->has('new.txt'));
-
-  }
-
-  /**
-   * Tests copying a file.
-   */
-  public function testCopySuccess() {
-    $config = new Config();
-    $this->adapter
-      ->write(static::FILE, 'contents', $config)
-      ->willReturn(['size' => 1234]);
-
-    $this->cacheAdapter->write(static::FILE, 'contents', $config);
-
-    $this->adapter->copy(static::FILE, 'new.txt')->willReturn(TRUE);
-
-    $this->assertTrue($this->cacheAdapter->copy(static::FILE, 'new.txt'));
-
-    $this->assertSame(1234, $this->cacheAdapter->getSize(static::FILE)['size']);
-    $this->assertSame(1234, $this->cacheAdapter->getSize('new.txt')['size']);
-    $this->assertTrue($this->cacheItemBackend->has(static::FILE));
-    $this->assertTrue($this->cacheItemBackend->has('new.txt'));
-  }
-
-  /**
-   * Tests deleting a file.
-   */
-  public function testDeleteSuccess() {
-    $config = new Config();
-    $this->adapter
-      ->write(static::FILE, 'contents', $config)
-      ->willReturn(['size' => 1234]);
-
-    $this->cacheAdapter->write(static::FILE, 'contents', $config);
-
-    $this->adapter->delete(static::FILE)->willReturn(TRUE);
-
-    $this->assertTrue($this->cacheAdapter->delete(static::FILE));
-    $this->assertFalse($this->cacheItemBackend->has(static::FILE));
-  }
-
-  /**
-   * Tests deleting a file directory.
-   */
-  public function testDeleteDirSuccess() {
-    $config = new Config();
-    // Create a directory with one sub file.
-    $this->adapter->createDir('test_dir', $config)->willReturn(['type' => 'dir']);
-    $this->adapter->write('test_dir/test.txt', 'contents', $config)
-      ->willReturn(['size' => 1234]);
-    $this->adapter->deleteDir('test_dir')->willReturn(TRUE);
-    $this->adapter->listContents('test_dir', TRUE)->willReturn([
-      ['path' => 'test_dir'],
-      ['path' => 'test_dir/test.txt'],
-    ]);
-
-    $this->cacheAdapter->createDir('test_dir', $config);
-    $this->cacheAdapter->write('test_dir/test.txt', 'contents', $config);
-
-    $this->assertTrue($this->cacheAdapter->deleteDir('test_dir'));
-
-    $this->assertFalse($this->cacheItemBackend->has('test_dir/test.txt'));
-    $this->assertFalse($this->cacheItemBackend->has('test_dir'));
-  }
-
-  /**
-   * Tests visibility checking on private files.
-   */
-  public function testSetVisibilitySuccess() {
-    $this->adapter
-      ->setVisibility(static::FILE, 'private')
-      ->willReturn(['visibility' => 'private']);
-
-    $metadata = $this->cacheAdapter->setVisibility(static::FILE, 'private');
-    $this->assertSame('private', $metadata['visibility']);
-    $this->assertSame('private', $this->cacheAdapter->getVisibility(static::FILE)['visibility']);
-    $this->assertTrue($this->cacheItemBackend->has(static::FILE));
-  }
-
-  /**
-   * Tests file loading success.
-   */
-  public function testHasSuccess() {
-    $cache_item = $this->cacheItemBackend->load(static::FILE);
-    $this->cacheItemBackend->set(static::FILE, $cache_item);
-    $this->assertTrue($this->cacheAdapter->has(static::FILE));
-  }
-
-  /**
-   * Tests file loading failure.
-   */
-  public function testHasFail() {
-    $this->adapter->has(static::FILE)->willReturn(TRUE);
-    $this->assertTrue($this->cacheAdapter->has(static::FILE));
-  }
-
-  /**
-   * Tests reading a file.
-   */
-  public function testRead() {
-    $this->adapter->read(static::FILE)->willReturn(FALSE);
-    $this->assertFalse($this->cacheAdapter->read(static::FILE));
-
-    $config = new Config();
-    $this->adapter
-      ->write(static::FILE, 'contents', $config);
-    $return = [
-      'type' => 'file',
-      'path' => static::FILE,
-      'contents' => $config,
-    ];
-    $this->adapter->read(static::FILE)->willReturn($return);
-    $this->assertSame($this->cacheAdapter->read(static::FILE), $return);
-  }
-
-  /**
-   * Tests reading a stream.
-   */
-  public function testReadStream() {
-    $this->adapter->readStream(static::FILE)->willReturn(FALSE);
-    $this->assertFalse($this->cacheAdapter->readStream(static::FILE));
-
-    $config = new Config();
-    $stream = fopen('data:text/plain,contents', 'rb');
-    $this->adapter
-      ->writeStream(static::FILE, $stream, $config);
-
-    $return = [
-      'type' => 'file',
-      'path' => static::FILE,
-      'stream' => $stream,
-    ];
-
-    $this->adapter->readStream(static::FILE)->willReturn($return);
-    $this->assertSame($this->cacheAdapter->readStream(static::FILE), $return);
-  }
-
-  /**
-   * Tests listing contents of a directory.
-   */
-  public function testListContentsSuccess() {
-    $return = [
-      ['path' => 'test_dir'],
-      ['path' => 'test_dir/test.txt'],
-    ];
-
-    $this->adapter->listContents('test_dir', TRUE)->willReturn($return);
-    $this->assertSame($this->cacheAdapter->listContents('test_dir', TRUE), $return);
-  }
-
-  /**
-   * Tests retrieving file metadata.
-   */
-  public function testGetMetadataSuccess() {
-    $cache_item = $this->cacheItemBackend->load(static::FILE);
-    $cache_item->updateMetadata(['type' => 'dir']);
-    $this->cacheItemBackend->set(static::FILE, $cache_item);
-
-    $this->assertSame('dir', $this->cacheAdapter->getMetadata(static::FILE)['type']);
-  }
-
-  /**
-   * Tests failing to retrieve file metadata.
-   */
-  public function testGetMetadataFail() {
-    $this->adapter->getMetadata(static::FILE)->willReturn(['type' => 'dir']);
-
-    $this->assertSame('dir', $this->cacheAdapter->getMetadata(static::FILE)['type']);
-  }
-
-  /**
-   * Tests failing to retrieve file size.
-   */
-  public function testGetSizeFail() {
-    $this->adapter->getSize(static::FILE)->willReturn(['size' => 123]);
-
-    $this->assertSame(123, $this->cacheAdapter->getSize(static::FILE)['size']);
-  }
-
-}
diff --git a/tests/src/Unit/Flysystem/Adapter/MissingAdapterTest.php b/tests/src/Unit/Flysystem/Adapter/MissingAdapterTest.php
deleted file mode 100644
index 7bae52f..0000000
--- a/tests/src/Unit/Flysystem/Adapter/MissingAdapterTest.php
+++ /dev/null
@@ -1,42 +0,0 @@
-<?php
-
-namespace Drupal\Tests\flysystem\Unit\Flysystem\Adapter;
-
-use Drupal\flysystem\Flysystem\Adapter\MissingAdapter;
-use Drupal\Tests\UnitTestCase;
-use League\Flysystem\Config;
-
-/**
- * @coversDefaultClass \Drupal\flysystem\Flysystem\Adapter\MissingAdapter
- * @group flysystem
- */
-class MissingAdapterTest extends UnitTestCase {
-
-  /**
-   * @covers \Drupal\flysystem\Flysystem\Adapter\MissingAdapter
-   */
-  public function test() {
-    $adapter = new MissingAdapter();
-
-    $this->assertFalse($adapter->copy('', ''));
-    $this->assertFalse($adapter->createDir('', new Config()));
-    $this->assertFalse($adapter->delete(''));
-    $this->assertFalse($adapter->deleteDir(''));
-    $this->assertIsArray($adapter->listContents(''));
-    $this->assertFalse($adapter->getMetadata(''));
-    $this->assertFalse($adapter->getMimetype(''));
-    $this->assertFalse($adapter->getSize(''));
-    $this->assertFalse($adapter->getTimestamp(''));
-    $this->assertFalse($adapter->getVisibility(''));
-    $this->assertFalse($adapter->has(''));
-    $this->assertFalse($adapter->setVisibility('', 'public'));
-    $this->assertFalse($adapter->update('', '', new Config()));
-    $this->assertFalse($adapter->updateStream('', NULL, new Config()));
-    $this->assertFalse($adapter->read(''));
-    $this->assertFalse($adapter->readStream(''));
-    $this->assertFalse($adapter->rename('', ''));
-    $this->assertFalse($adapter->write('', '', new Config()));
-    $this->assertFalse($adapter->writeStream('', NULL, new Config()));
-  }
-
-}
diff --git a/tests/src/Unit/Flysystem/FtpTest.php b/tests/src/Unit/Flysystem/FtpTest.php
deleted file mode 100644
index a4063b4..0000000
--- a/tests/src/Unit/Flysystem/FtpTest.php
+++ /dev/null
@@ -1,125 +0,0 @@
-<?php
-
-namespace Drupal\Tests\flysystem\Unit\Flysystem {
-
-  use Drupal\Core\Logger\RfcLogLevel;
-  use Drupal\flysystem\Flysystem\Adapter\MissingAdapter;
-  use Drupal\flysystem\Flysystem\Ftp;
-  use Drupal\Tests\UnitTestCase;
-  use League\Flysystem\Adapter\Ftp as LeagueFtp;
-
-  /**
-   * @coversDefaultClass \Drupal\flysystem\Flysystem\Ftp
-   * @group flysystem
-   */
-  class FtpTest extends UnitTestCase {
-
-    /**
-     * {@inheritdoc}
-     */
-    public function setUp(): void {
-      parent::setUp();
-      if (!defined('FTP_BINARY')) {
-        $this->markTestSkipped('The FTP_BINARY constant is not defined.');
-      }
-    }
-
-    /**
-     * @covers ::getAdapter
-     * @covers ::__construct
-     */
-    public function testGetAdapterSuccess() {
-      $plugin = new Ftp(['host' => 'success']);
-      $this->assertInstanceOf(LeagueFtp::class, $plugin->getAdapter());
-    }
-
-    /**
-     * @covers ::getAdapter
-     * @covers ::__construct
-     */
-    public function testGetAdapterFails() {
-      $plugin = new Ftp([]);
-      $this->assertInstanceOf(MissingAdapter::class, $plugin->getAdapter());
-    }
-
-    /**
-     * @covers ::ensure
-     */
-    public function testEnsureReturnsNoErrorsOnSuccess() {
-      $result = (new Ftp(['host' => 'success']))->ensure();
-
-      $this->assertCount(1, $result);
-      $this->assertSame(RfcLogLevel::INFO, $result[0]['severity']);
-    }
-
-    /**
-     * @covers ::ensure
-     */
-    public function testEnsureReturnsErrors() {
-      $plugin = new Ftp([]);
-      $result = $plugin->ensure();
-      $this->assertCount(1, $result);
-      $this->assertSame(21, $result[0]['context']['%port']);
-    }
-
-  }
-}
-
-namespace League\Flysystem\Adapter {
-
-  /**
-   * Stubs ftp_chdir().
-   */
-  function ftp_chdir() {
-    return TRUE;
-  }
-
-  /**
-   * Stubs ftp_close().
-   */
-  function ftp_close() {
-  }
-
-  /**
-   * Stubs ftp_connect().
-   */
-  function ftp_connect($host) {
-    return $host === 'success';
-  }
-
-  /**
-   * Stubs ftp_login().
-   */
-  function ftp_login() {
-    return TRUE;
-  }
-
-  /**
-   * Stubs ftp_pasv().
-   */
-  function ftp_pasv() {
-    return TRUE;
-  }
-
-  /**
-   * Stubs ftp_pwd().
-   */
-  function ftp_pwd() {
-    return '';
-  }
-
-  /**
-   * Stubs ftp_systype().
-   */
-  function ftp_systype() {
-    return TRUE;
-  }
-
-  /**
-   * Stubs ftp_raw().
-   */
-  function ftp_raw() {
-    return ['200'];
-  }
-
-}
diff --git a/tests/src/Unit/Flysystem/LocalTest.php b/tests/src/Unit/Flysystem/LocalTest.php
deleted file mode 100644
index 4123f0f..0000000
--- a/tests/src/Unit/Flysystem/LocalTest.php
+++ /dev/null
@@ -1,147 +0,0 @@
-<?php
-
-namespace Drupal\Tests\flysystem\Unit\Flysystem;
-
-use Drupal\Core\DependencyInjection\ContainerBuilder;
-use Drupal\Core\Logger\RfcLogLevel;
-use Drupal\Core\Routing\UrlGeneratorInterface;
-use Drupal\Core\Site\Settings;
-use Drupal\flysystem\Flysystem\Adapter\MissingAdapter;
-use Drupal\flysystem\Flysystem\Local;
-use Drupal\Tests\UnitTestCase;
-use League\Flysystem\Adapter\Local as LocalAdapter;
-use Prophecy\Argument;
-
-/**
- * @coversDefaultClass \Drupal\flysystem\Flysystem\Local
- * @group flysystem
- */
-class LocalTest extends UnitTestCase {
-
-  /**
-   * {@inheritdoc}
-   */
-  public function setUp(): void {
-    parent::setUp();
-    $GLOBALS['base_url'] = 'http://example.com';
-
-    $container = new ContainerBuilder();
-    $url_generator = $this->prophesize(UrlGeneratorInterface::class);
-    $url_generator->generateFromRoute(Argument::cetera())->willReturn('download');
-    $container->set('url_generator', $url_generator->reveal());
-    \Drupal::setContainer($container);
-    (new LocalAdapter('foo/bar'))->deleteDir('');
-    @rmdir('foo/bar');
-    @rmdir('foo');
-    mkdir('foo');
-    mkdir('foo/bar');
-
-    touch('test.txt');
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  public function tearDown(): void {
-    (new LocalAdapter('foo'))->deleteDir('');
-    @rmdir('foo');
-
-    unlink('test.txt');
-
-    @unlink('does_not_exist/.htaccess');
-    @rmdir('does_not_exist');
-  }
-
-  /**
-   * @covers ::__construct
-   * @covers ::create
-   */
-  public function testCreateReturnsPlugin() {
-    $container = new ContainerBuilder();
-    $settings = new Settings([]);
-    $container->set('settings', $settings);
-
-    $configuration = ['root' => 'foo/bar'];
-
-    $this->assertInstanceOf(Local::class, Local::create($container, $configuration, '', []));
-  }
-
-  /**
-   * @covers ::getAdapter
-   * @covers ::ensureDirectory
-   */
-  public function testReturnsLocalAdapter() {
-    $this->assertInstanceOf(LocalAdapter::class, (new Local('foo/bar', FALSE))->getAdapter());
-  }
-
-  /**
-   * @covers ::getAdapter
-   * @covers ::ensureDirectory
-   */
-  public function testMissingAdapterReturnedWhenPathIsFile() {
-    $this->assertInstanceOf(MissingAdapter::class, (new Local('test.txt'))->getAdapter());
-  }
-
-  /**
-   * @covers ::getExternalUrl
-   */
-  public function testReturnsValidLocalUrl() {
-    $plugin = new Local('foo/bar', FALSE);
-    $this->assertSame('download', $plugin->getExternalUrl('uri://test.html'));
-  }
-
-  /**
-   * @covers ::getExternalUrl
-   */
-  public function testReturnsValidExternalUrl() {
-    $plugin = new Local('foo/bar', TRUE);
-    $this->assertSame('http://example.com/foo/bar/test%20thing.html', $plugin->getExternalUrl('uri://test thing.html'));
-  }
-
-  /**
-   * @covers ::ensure
-   * @covers ::ensureDirectory
-   */
-  public function testDirectoryIsAutoCreatedAndHtaccessIsWritten() {
-    new Local('does_not_exist');
-    $this->assertTrue(is_dir('does_not_exist'));
-    $this->assertTrue(is_file('does_not_exist/.htaccess'));
-
-  }
-
-  /**
-   * @covers ::ensure
-   * @covers ::writeHtaccess
-   */
-  public function testHtaccessNotOverwritten() {
-    file_put_contents('foo/bar/.htaccess', 'htaccess content');
-
-    $result = (new Local('foo/bar'))->ensure();
-
-    $this->assertCount(1, $result);
-    $this->assertSame(RfcLogLevel::INFO, $result[0]['severity']);
-    $this->assertSame('htaccess content', file_get_contents('foo/bar/.htaccess'));
-  }
-
-  /**
-   * @covers ::ensure
-   * @covers ::writeHtaccess
-   */
-  public function testHtaccessNotOverwrittenAndFails() {
-    mkdir('foo/bar/.htaccess', 0777, TRUE);
-
-    $result = (new Local('foo/bar'))->ensure(TRUE);
-    $this->assertCount(1, $result);
-    $this->assertSame('https://www.drupal.org/SA-CORE-2013-003', $result[0]['context']['@url']);
-  }
-
-  /**
-   * @covers ::ensure
-   * @covers ::writeHtaccess
-   */
-  public function testEnsureReturnsErrorWhenCantCreateDir() {
-    $result = (new Local('test.txt'))->ensure();
-    $this->assertSame('test.txt', $result[0]['context']['%root']);
-  }
-
-}
