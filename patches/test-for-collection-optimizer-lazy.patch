diff --git a/tests/src/Kernel/CollectionOptimizerTest.php b/tests/src/Kernel/CollectionOptimizerTest.php
deleted file mode 100644
index 13a4ce0..0000000
--- a/tests/src/Kernel/CollectionOptimizerTest.php
+++ /dev/null
@@ -1,191 +0,0 @@
-<?php
-
-namespace Drupal\Tests\flysystem\Kernel;
-
-use Drupal\Core\Asset\AssetCollectionGrouperInterface;
-use Drupal\Core\Asset\AssetOptimizerInterface;
-use Drupal\Core\Asset\CssOptimizer;
-use Drupal\Core\State\StateInterface;
-use Drupal\flysystem\Asset\AssetDumper;
-use Drupal\flysystem\Asset\CssCollectionOptimizer;
-use Drupal\flysystem\Asset\JsCollectionOptimizer;
-use Drupal\KernelTests\KernelTestBase;
-use org\bovigo\vfs\vfsStream;
-
-/**
- * @covers \Drupal\flysystem\Asset\JsCollectionOptimizer
- * @covers \Drupal\flysystem\Asset\CssCollectionOptimizer
- *
- * @group flysystem
- */
-class CollectionOptimizerTest extends KernelTestBase {
-
-  /**
-   * {@inheritdoc}
-   */
-  protected static $modules = ['file'];
-
-  /**
-   * The file URL generator.
-   *
-   * @var \Drupal\Core\File\FileUrlGeneratorInterface
-   */
-  protected $fileUrlGenerator;
-
-  /**
-   * AssetCollectionGrouper.
-   *
-   * @var \Drupal\Core\Asset\AssetCollectionGrouperInterface
-   */
-  protected $assetCollectionGrouper;
-
-  /**
-   * {@inheritdoc}
-   */
-  public function setUp(): void {
-    parent::setUp();
-    $this->fileUrlGenerator = $this->container->get('file_url_generator');
-    $this->assetCollectionGrouper = $this->createMock(AssetCollectionGrouperInterface::class);
-    $this->cleanUp();
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  public function tearDown(): void {
-    $this->cleanUp();
-    parent::tearDown();
-  }
-
-  /**
-   * @covers \Drupal\flysystem\Asset\JsCollectionOptimizer
-   */
-  public function testJsCollectionOptimizer() {
-    vfsStream::setup('js');
-
-    $this->setSetting('flysystem', [
-      'vfs' => [
-        'serve_js' => TRUE,
-        'driver' => 'local',
-      ],
-    ]);
-
-    foreach ($this->jsFilesUnderTest() as $js_file => $expired) {
-      file_put_contents($js_file, 'dummy');
-      if ($expired === TRUE) {
-        // 2592000 is the default value of stale_file_threshold
-        touch($js_file, \Drupal::time()->getRequestTime() - 2592001);
-        continue;
-      }
-      touch($js_file, \Drupal::time()->getRequestTime() - 2591999);
-    }
-
-    $dumper = $this->prophesize(AssetDumper::class);
-    $state = $this->prophesize(StateInterface::class);
-    $jsOptimizer = $this->prophesize(AssetOptimizerInterface::class);
-
-    $optimizer = new JsCollectionOptimizer($this->assetCollectionGrouper, $jsOptimizer->reveal(), $dumper->reveal(), $state->reveal(), $this->container->get('file_system'));
-    $optimizer->deleteAll();
-
-    foreach ($this->jsFilesUnderTest() as $js_file => $expired) {
-      if ($expired === TRUE) {
-        $this->assertFileDoesNotExist($js_file);
-        continue;
-      }
-      $this->assertFileExists($js_file);
-    }
-
-  }
-
-  /**
-   * @covers \Drupal\flysystem\Asset\CssCollectionOptimizer
-   */
-  public function testCssCollectionOptimizer() {
-    vfsStream::setup('css');
-
-    $this->setSetting('flysystem', [
-      'vfs' => [
-        'serve_css' => TRUE,
-        'driver' => 'local',
-      ],
-    ]);
-
-    foreach ($this->cssFilesUnderTest() as $css_file => $expired) {
-      file_put_contents($css_file, 'dummy');
-      if ($expired === TRUE) {
-        // 2592000 is the default value of stale_file_threshold
-        touch($css_file, \Drupal::time()->getRequestTime() - 2592001);
-        continue;
-      }
-      touch($css_file, \Drupal::time()->getRequestTime() - 2591999);
-    }
-
-    $dumper = $this->prophesize(AssetDumper::class);
-    $state = $this->prophesize(StateInterface::class);
-
-    $optimizer = new CssCollectionOptimizer($this->assetCollectionGrouper, new CssOptimizer($this->fileUrlGenerator), $dumper->reveal(), $state->reveal(), $this->container->get('file_system'));
-    $optimizer->deleteAll();
-
-    foreach ($this->cssFilesUnderTest() as $css_file => $expired) {
-      if ($expired === TRUE) {
-        $this->assertFileDoesNotExist($css_file);
-        continue;
-      }
-      $this->assertFileExists($css_file);
-    }
-
-  }
-
-  /**
-   * CSS files involve in testing CssCollectionOptimizer.
-   *
-   * @return array
-   *   Keyed by the file URI, and its value is the flag of expiration. TRUE to
-   *   valid, FALSE to expired.
-   */
-  private function cssFilesUnderTest() {
-    return [
-      'vfs://css/foo_expired.css' => TRUE,
-      'vfs://css/bar_expired.css' => TRUE,
-      'vfs://css/baz_expired.css' => TRUE,
-      'vfs://css/foo.css' => FALSE,
-      'vfs://css/bar.css' => FALSE,
-      'vfs://css/baz.css' => FALSE,
-    ];
-  }
-
-  /**
-   * JS files involve in testing JsCollectionOptimizer.
-   *
-   * @return array
-   *   Keyed by the file URI, and its value is the flag of expiration. TRUE to
-   *   expired, FALSE to non-expired.
-   */
-  private function jsFilesUnderTest() {
-    return [
-      'vfs://js/foo_expired.js' => TRUE,
-      'vfs://js/bar_expired.js' => TRUE,
-      'vfs://js/baz_expired.js' => TRUE,
-      'vfs://js/foo.js' => FALSE,
-      'vfs://js/bar.js' => FALSE,
-      'vfs://js/zoo.js' => FALSE,
-    ];
-  }
-
-  /**
-   * A helper method for removing files before and after running tests.
-   */
-  private function cleanUp() {
-    foreach ($this->jsFilesUnderTest() as $js_file => $flag) {
-      if (file_exists($js_file)) {
-        unlink($js_file);
-      }
-    }
-    foreach ($this->cssFilesUnderTest() as $css_file => $flag) {
-      if (file_exists($css_file)) {
-        unlink($css_file);
-      }
-    }
-  }
-
-}
diff --git a/tests/src/Unit/Asset/SchemeExtensionTraitTest.php b/tests/src/Unit/Asset/SchemeExtensionTraitTest.php
index a9a01a9..cf40c37 100644
--- a/tests/src/Unit/Asset/SchemeExtensionTraitTest.php
+++ b/tests/src/Unit/Asset/SchemeExtensionTraitTest.php
@@ -26,8 +26,8 @@ class SchemeExtensionTraitTest extends UnitTestCase {
 
     $trait = $this->getMockForTrait(SchemeExtensionTrait::class);
     $this->assertSame('local', $trait->getSchemeForExtension('js'));
-    $this->assertSame('public', $trait->getSchemeForExtension('css'));
-    $this->assertSame('public', $trait->getSchemeForExtension('jpg'));
+    $this->assertSame('local', $trait->getSchemeForExtension('css'));
+    $this->assertSame('local', $trait->getSchemeForExtension('jpg'));
   }
 
 }
diff --git a/tests/src/Unit/FlysystemServiceProviderTest.php b/tests/src/Unit/FlysystemServiceProviderTest.php
index 8772044..1f4d5de 100644
--- a/tests/src/Unit/FlysystemServiceProviderTest.php
+++ b/tests/src/Unit/FlysystemServiceProviderTest.php
@@ -3,15 +3,15 @@
 namespace Drupal\Tests\flysystem\Unit;
 
 use Drupal\Core\Asset\AssetDumper;
-use Drupal\Core\Asset\CssCollectionOptimizer;
+use Drupal\Core\Asset\CssCollectionOptimizerLazy;
 use Drupal\Core\Asset\CssOptimizer;
-use Drupal\Core\Asset\JsCollectionOptimizer;
+use Drupal\Core\Asset\JsCollectionOptimizerLazy;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\Core\Site\Settings;
 use Drupal\flysystem\Asset\AssetDumper as FlysystemAssetDumper;
-use Drupal\flysystem\Asset\CssCollectionOptimizer as FlysystemCssCollectionOptimizer;
+use Drupal\flysystem\Asset\CssCollectionOptimizerLazy as FlysystemCssCollectionOptimizerLazy;
 use Drupal\flysystem\Asset\CssOptimizer as FlysystemCssOptimizer;
-use Drupal\flysystem\Asset\JsCollectionOptimizer as FlysystemJsCollectionOptimizer;
+use Drupal\flysystem\Asset\JsCollectionOptimizerLazy as FlysystemJsCollectionOptimizerLazy;
 use Drupal\flysystem\FlysystemBridge;
 use Drupal\flysystem\FlysystemServiceProvider;
 use Drupal\flysystem\PathProcessor\LocalPathProcessor;
@@ -98,11 +98,11 @@ class FlysystemServiceProviderTest extends UnitTestCase {
     $this->assertSame(AssetDumper::class, $this->container->getDefinition('asset.js.dumper')->getClass());
 
     // @phpstan-ignore classConstant.deprecatedClass
-    $this->container->register('asset.js.collection_optimizer', JsCollectionOptimizer::class);
+    $this->container->register('asset.js.collection_optimizer', JsCollectionOptimizerLazy::class);
     (new FlysystemServiceProvider())->register($this->container);
-    $this->assertSame(AssetDumper::class, $this->container->getDefinition('asset.js.dumper')->getClass());
+    $this->assertSame(FlysystemAssetDumper::class, $this->container->getDefinition('asset.js.dumper')->getClass());
     // @phpstan-ignore classConstant.deprecatedClass
-    $this->assertSame(JsCollectionOptimizer::class, $this->container->getDefinition('asset.js.collection_optimizer')->getClass());
+    $this->assertSame(FlysystemJsCollectionOptimizerLazy::class, $this->container->getDefinition('asset.js.collection_optimizer')->getClass());
 
     // A successful swap.
     new Settings([
@@ -115,7 +115,7 @@ class FlysystemServiceProviderTest extends UnitTestCase {
     ]);
     (new FlysystemServiceProvider())->register($this->container);
     $this->assertSame(FlysystemAssetDumper::class, $this->container->getDefinition('asset.js.dumper')->getClass());
-    $this->assertSame(FlysystemJsCollectionOptimizer::class, $this->container->getDefinition('asset.js.collection_optimizer')->getClass());
+    $this->assertSame(FlysystemJsCollectionOptimizerLazy::class, $this->container->getDefinition('asset.js.collection_optimizer')->getClass());
   }
 
   /**
@@ -125,7 +125,7 @@ class FlysystemServiceProviderTest extends UnitTestCase {
     // Test swapping the asset dumper.
     $this->container->register('asset.css.dumper', AssetDumper::class);
     // @phpstan-ignore classConstant.deprecatedClass
-    $this->container->register('asset.css.collection_optimizer', CssCollectionOptimizer::class);
+    $this->container->register('asset.css.collection_optimizer', CssCollectionOptimizerLazy::class);
     $this->container->register('asset.css.optimizer', CssOptimizer::class);
 
     new Settings([
@@ -140,7 +140,7 @@ class FlysystemServiceProviderTest extends UnitTestCase {
     (new FlysystemServiceProvider())->register($this->container);
 
     $this->assertSame(FlysystemAssetDumper::class, $this->container->getDefinition('asset.css.dumper')->getClass());
-    $this->assertSame(FlysystemCssCollectionOptimizer::class, $this->container->getDefinition('asset.css.collection_optimizer')->getClass());
+    $this->assertSame(FlysystemCssCollectionOptimizerLazy::class, $this->container->getDefinition('asset.css.collection_optimizer')->getClass());
     $this->assertSame(FlysystemCssOptimizer::class, $this->container->getDefinition('asset.css.optimizer')->getClass());
   }
 
